% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/shiny.R
\name{ui_epoxy_html}
\alias{ui_epoxy_html}
\alias{epoxyHTML}
\title{Epoxy HTML Output for Shiny}
\usage{
ui_epoxy_html(
  .id,
  ...,
  .class = NULL,
  .class_item = NULL,
  .container = "div",
  .container_item = "span",
  .placeholder = "",
  .sep = "",
  .open = "{{",
  .close = "}}",
  .na = "",
  .null = "",
  .literal = FALSE,
  .trim = FALSE
)

epoxyHTML(.id, ...)
}
\arguments{
\item{.id}{The output id}

\item{...}{UI elements or text (that will be treated as HTML), containing
template variables. Use named values to provide initial placeholder values.}

\item{.class}{Classes added to the output div, in addition to \code{.epoxy-html}}

\item{.class_item}{Classes added to the \code{.container} wrapping each template
variable.}

\item{.container}{The name of the HTML element to be used for the output
element, by default \code{"div"}.}

\item{.container_item}{The name of the HTML element to be used for each template item,
by default \code{"span"}.}

\item{.placeholder}{Default placeholder if a template variable placeholder
isn't provided.}

\item{.sep}{[\code{character(1)}: \sQuote{""}]\cr Separator used to separate elements.}

\item{.open}{[\code{character(1)}: \sQuote{\\\{}]\cr The opening delimiter around
the template variable or expression. Doubling the full delimiter escapes
it.}

\item{.close}{[\code{character(1)}: \sQuote{\\\}}]\cr The closing delimiter
around the template variable or expression. Doubling the full delimiter
escapes it.}

\item{.na}{[\code{character(1)}: \sQuote{NA}]\cr Value to replace \code{NA} values
with. If \code{NULL} missing values are propagated, that is an \code{NA} result will
cause \code{NA} output. Otherwise the value is replaced by the value of \code{.na}.}

\item{.null}{[\code{character(1)}: \sQuote{character()}]\cr Value to replace
NULL values with. If \code{character()} whole output is \code{character()}. If
\code{NULL} all NULL values are dropped (as in \code{paste0()}). Otherwise the
value is replaced by the value of \code{.null}.}

\item{.literal}{[\code{boolean(1)}: \sQuote{FALSE}]\cr Whether to treat single or
double quotes, backticks, and comments as regular characters (vs. as
syntactic elements), when parsing the expression string. Setting \code{.literal = TRUE} probably only makes sense in combination with a custom
\code{.transformer}, as is the case with \code{glue_col()}. Regard this argument
(especially, its name) as experimental.}

\item{.trim}{[\code{logical(1)}: \sQuote{TRUE}]\cr Whether to trim the input
template with \code{\link[glue:trim]{trim()}} or not.}
}
\value{
An HTML object.
}
\description{
A glue-like output for Shiny. \code{ui_epoxy_html()} lets you use placeholders in your
HTML such as \code{"{{first_name}}"}, that are provided values from the server by
giving \code{render_epoxy()} a \code{first_name} value.
}
\section{Functions}{
\itemize{
\item \code{epoxyHTML()}: \ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#deprecated}{\figure{lifecycle-deprecated.svg}{options: alt='[Deprecated]'}}}{\strong{[Deprecated]}} Deprecated
alias, please use \code{ui_epoxy_html()}.

}}
\section{HTML Markup}{
 By default, placeholders are inserted into a \verb{<span>}
element in your UI, with the classes specified in \code{.class_item}.

\code{ui_epoxy_html()} also supports an HTML markup syntax similar to
\href{https://pughtml.com/what-is-pug-html}{pug} (an HTML preprocessor). With the
markup syntax, \code{"{{h3.example.basic#basic-three demo}}"} creates a \code{demo}
placeholder inside an \verb{<h3 id="basic-three" class="example basic"></h3>} tag.

The placeholder template string follows the pattern \verb{\{\{<markup> <name>\}\}}.
The markup syntax comes first, separated from the placeholder name by a
space. The HTML element is first, followed by classes prefixed with \code{.} or
and ID prefixed with \verb{#}. The template markup can contain only one element
and one ID, but many classes can be specified.
}

\examples{
\dontshow{if (rlang::is_installed("shiny")) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
ui <- shiny::fluidPage(
  shiny::h2("ui_epoxy_html demo"),
  ui_epoxy_html(
    .id = 'test',
    .class_item = "inner",
    shiny::fluidRow(
      shiny::tags$div(
        class = "col-xs-4",
        shiny::selectInput(
          inputId = "thing",
          label = "What is this {{color}} thing?",
          choices = c("apple", "banana", "coconut", "dolphin")
        )
      ),
      shiny::tags$div(
        class = "col-xs-4",
        shiny::selectInput(
          inputId = "color",
          label = "What color is the {{thing}}?",
          c("red", "blue", "black", "green", "yellow")
        )
      ),
      shiny::tags$div(
        class = "col-xs-4",
        shiny::sliderInput(
          inputId = "height",
          label = "How tall is the {{color}} {{thing}}?",
          value = 5,
          min = 0,
          max = 10,
          step = 0.1,
          post = "ft"
        )
      )
    ),
    shiny::tags$p(class = "big", "The {{color}} {{thing}} is {{height}} feet tall."),
    # Default values for placeholders above.
    thing = "THING",
    color = "COLOR",
    height = "HEIGHT"
  ),
  shiny::tags$style(shiny::HTML(
    '.big { font-size: 1.5em; }
     .inner { background-color: rgba(254, 233, 105, 0.5);}
     .epoxy-item__placeholder { color: #999999; background-color: unset; }'
  ))
)

server <- function(input, output, session) {
  output$test <- render_epoxy(
    thing = input$thing,
    color = input$color,
    height = input$height
  )
}

if (interactive()) {
  shiny::shinyApp(ui, server)
}
\dontshow{\}) # examplesIf}
}
\seealso{
\code{\link[=ui_epoxy_mustache]{ui_epoxy_mustache()}}, \code{\link[=render_epoxy]{render_epoxy()}}
}
