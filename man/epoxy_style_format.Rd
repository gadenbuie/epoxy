% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/epoxy_style_format.R
\name{epoxy_style_format}
\alias{epoxy_style_format}
\title{Style replacements with inline formatting}
\usage{
epoxy_style_format(
  bytes = scales::label_bytes(),
  date = scales::label_date(),
  date_short = scales::label_date_short(),
  time = scales::label_time(),
  dollar = scales::label_dollar(),
  log = scales::label_log(),
  number = scales::label_number(),
  comma = scales::label_comma(),
  number_auto = scales::label_number_auto(),
  ordinal = scales::label_ordinal(),
  parse = scales::label_parse(),
  math = scales::label_math(),
  percent = scales::label_percent(),
  pvalue = scales::label_pvalue(),
  scientific = scales::label_scientific(),
  wrap = scales::label_wrap(width = 80),
  uppercase = toupper,
  lowercase = tolower,
  titlecase = tools::toTitleCase,
  ...,
  transformer = glue::identity_transformer
)
}
\arguments{
\item{bytes}{The function to apply to when \code{label} is \code{"bytes"}. Default is
\code{\link[scales:label_bytes]{scales::label_bytes()}}.}

\item{date}{The function to apply to when \code{label} is \verb{"date" or "d"}. Default
is \code{\link[scales:label_date]{scales::label_date()}}.}

\item{date_short}{The function to apply to when \code{label} is \verb{"date_short" or "ds"}. Default is \code{\link[scales:label_date]{scales::label_date_short()}}.}

\item{time}{The function to apply to when \code{label} is \verb{"time" or "dt"}.
Default is \code{\link[scales:label_date]{scales::label_time()}}.}

\item{dollar}{The function to apply to when \code{label} is \verb{"dollar" or "$"}.
Default is \code{\link[scales:label_dollar]{scales::label_dollar()}}.}

\item{log}{The function to apply to when \code{label} is \code{"log"}. Default is
\code{\link[scales:label_log]{scales::label_log()}}.}

\item{number}{The function to apply to when \code{label} is \verb{"number" or "#"}.
Default is \code{\link[scales:label_number]{scales::label_number()}}.}

\item{comma}{The function to apply to when \code{label} is \verb{"comma" or ","}.
Default is \code{\link[scales:label_number]{scales::label_comma()}}.}

\item{number_auto}{The function to apply to when \code{label} is \verb{"number_auto", "a", or "auto"}. Default is \code{\link[scales:label_number_auto]{scales::label_number_auto()}}.}

\item{ordinal}{The function to apply to when \code{label} is \verb{"ordinal" or "o"}.
Default is \code{\link[scales:label_ordinal]{scales::label_ordinal()}}.}

\item{parse}{The function to apply to when \code{label} is \code{"parse"}. Default is
\code{\link[scales:label_parse]{scales::label_parse()}}.}

\item{math}{The function to apply to when \code{label} is \code{"math"}. Default is
\code{\link[scales:label_parse]{scales::label_math()}}.}

\item{percent}{The function to apply to when \code{label} is \verb{"percent", "pct", or "\%"}. Default is \code{\link[scales:label_percent]{scales::label_percent()}}.}

\item{pvalue}{The function to apply to when \code{label} is \verb{"pvalue" or "p"}.
Default is \code{\link[scales:label_pvalue]{scales::label_pvalue()}}.}

\item{scientific}{The function to apply to when \code{label} is \verb{"scientific" or "si"}. Default is \code{\link[scales:label_scientific]{scales::label_scientific()}}.}

\item{wrap}{The function to apply to when \code{label} is \code{"wrap"}. Default is
\code{\link[scales:label_wrap]{scales::label_wrap()}}.}

\item{uppercase}{The function to apply to when \code{label} is \verb{"uppercase" or "uc"}. Default is \code{\link[=toupper]{toupper()}}.}

\item{lowercase}{The function to apply to when \code{label} is \verb{"lowercase" or "lc"}. Default is \code{\link[=tolower]{tolower()}}.}

\item{titlecase}{The function to apply to when \code{label} is \verb{"titlecase" or "tc"}. Default is \code{\link[tools:toTitleCase]{tools::toTitleCase()}}.}

\item{...}{Additional formatting functions as named arguments. The name of
the argument in \code{...} determines the \code{label} value associated with the
formatter in \code{fmt()}.

For example, providing \code{url = utils::URLencode} would allow you to apply
URL-encoding formatting using \code{fmt(expr, "url")}.}

\item{transformer}{The transformer to apply to the replacement string. This
argument is used for chaining the transformer functions. By providing a
function to this argument you can apply an additional transformation after
the current transformation. In nearly all cases, you can let
\code{epoxy_style()} handle this for you. The chain ends when
\code{\link[glue:identity_transformer]{glue::identity_transformer()}} is used as the \code{transformer}.}
}
\description{
Makes available all of the \code{label_} functions from the \pkg{scales} package
within an inline format function, \code{fmt()}. To apply formatting, wrap embraced
expressions in \code{fmt(expr, label)}, where \code{label} is the name of a labeller
function from \pkg{scales} (with or without the leading \code{label_}), e.g.
\code{"dollar"} or \code{"label_dollar"} for \code{\link[scales:label_dollar]{scales::label_dollar()}}. Short \code{label}
forms exist for some labellers, e.g. \code{"$"} for \code{"dollar"}. See the full
listing in the table below.

\if{html}{\out{<div class="sourceCode markdown">}}\preformatted{```\{r\}
# Airbnb stats that may not be completely accurate
airbnb <- list(
 countries = 220,
 cities = 1e5,
 avg_stay = 4.326,
 avg_cost = 184.952,
 hosts = 4.12e6
)
```
}\if{html}{\out{</div>}}

With standard inline R code in R Markdown, we can write the following:

\if{html}{\out{<div class="sourceCode default">}}\preformatted{* Airbnb includes listings in `r airbnb$cities` cities
  in `r airbnb$countries` countries
  from around `r airbnb$hosts` hosts.
  The average guest stays `r airbnb$avg_stay` nights
  at a rate of `r airbnb$avg_cost` per night.
}\if{html}{\out{</div>}}
\itemize{
\item Airbnb includes listings in 10^5 cities
in 220 countries
from around 4.12 Ã— 10^6 hosts.
The average guest stays 4.326 nights
at a rate of 184.952 per night.
}

Using \code{epoxy} and the light-weight \code{fmt()} function from \code{epoxy_style_format()},
we can improve the readability and formatting of the interwoven numbers.

\if{html}{\out{<div class="sourceCode markdown">}}\preformatted{```\{r my_style, echo = FALSE\}
# Define number/dollar styles to apply consistently
my_style <- epoxy_style_format(
 dollar = scales::label_dollar(accuracy = 1),
 number = scales::label_number(
   accuracy = 0.1,
   scale_cut = scales::cut_short_scale()
 )
)
```

```\{epoxy epoxy_style = my_style\}
* Airbnb includes listings in \{fmt(airbnb$cities, ",")\} cities
  in \{fmt(airbnb$countries, "auto")\} countries
  from around \{fmt(airbnb$hosts, "#")\} hosts.
  The average guest stays \{fmt(airbnb$avg_stay, "#")\} nights
  at a rate of \{fmt(airbnb$avg_cost, "$")\} per night.
```
}\if{html}{\out{</div>}}
\itemize{
\item Airbnb includes listings in 100,000 cities
in 220 countries
from around 4.1M hosts.
The average guest stays 4.3 nights
at a rate of $185 per night.
}
\subsection{\code{fmt()} labels for formatters}{\tabular{ll}{
   \code{label} \tab Applies formatting with \cr
   \code{"bytes"} \tab \code{\link[scales:label_bytes]{scales::label_bytes()}} \cr
   \code{"d"}, \code{"date"} \tab \code{\link[scales:label_date]{scales::label_date()}} \cr
   \code{"ds"}, \code{"date_short"} \tab \code{\link[scales:label_date]{scales::label_date_short()}} \cr
   \code{"dt"}, \code{"time"} \tab \code{\link[scales:label_date]{scales::label_time()}} \cr
   \code{"$"}, \code{"dollar"} \tab \code{\link[scales:label_dollar]{scales::label_dollar()}} \cr
   \code{"log"} \tab \code{\link[scales:label_log]{scales::label_log()}} \cr
   \code{"#"}, \code{"number"} \tab \code{\link[scales:label_number]{scales::label_number()}} \cr
   \code{","}, \code{"comma"} \tab \code{\link[scales:label_number]{scales::label_comma()}} \cr
   \code{"a"}, \code{"auto"}, \code{"number_auto"} \tab \code{\link[scales:label_number_auto]{scales::label_number_auto()}} \cr
   \code{"o"}, \code{"ordinal"} \tab \code{\link[scales:label_ordinal]{scales::label_ordinal()}} \cr
   \code{"parse"} \tab \code{\link[scales:label_parse]{scales::label_parse()}} \cr
   \code{"math"} \tab \code{\link[scales:label_parse]{scales::label_math()}} \cr
   \code{"pct"}, \code{"\%"}, \code{"percent"} \tab \code{\link[scales:label_percent]{scales::label_percent()}} \cr
   \code{"p"}, \code{"pvalue"} \tab \code{\link[scales:label_pvalue]{scales::label_pvalue()}} \cr
   \code{"si"}, \code{"scientific"} \tab \code{\link[scales:label_scientific]{scales::label_scientific()}} \cr
   \code{"wrap"} \tab \code{\link[scales:label_wrap]{scales::label_wrap()}} \cr
   \code{"uc"}, \code{"uppercase"} \tab \code{\link[=toupper]{toupper()}} \cr
   \code{"lc"}, \code{"lowercase"} \tab \code{\link[=tolower]{tolower()}} \cr
   \code{"tc"}, \code{"titlecase"} \tab \code{\link[tools:toTitleCase]{tools::toTitleCase()}} \cr
}

}
}
\examples{
revenue <- 0.2123
sales <- 42000.134
glue::glue(
  '{fmt(revenue, "\%")} of revenue generates {fmt(sales, "$")} in profits.',
  .transformer = epoxy_style_format()
)

# To set labeller options, provide the label calls
glue::glue(
  '{fmt(revenue, "\%")} of revenue generates {fmt(sales, "$")} in profits.',
  .transformer = epoxy_style_format(
    percent = scales::label_percent(accuracy = 0.1),
    dollar = scales::label_dollar(accuracy = 10)
  )
)

# Add your own formatting functions
search <- "why are cats scared of cucumbers"
glue::glue(
  '<https://example.com?q={fmt(search, "url")}>',
  .transformer = epoxy_style_format(
    url = utils::URLencode
  )
)
}
\seealso{
Other epoxy-style glue transformers: 
\code{\link{epoxy_style_html}()},
\code{\link{epoxy_style}()}
}
\concept{epoxy-style glue transformers}
