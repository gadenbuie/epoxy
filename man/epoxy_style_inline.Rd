% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/epoxy_style_inline.R
\name{epoxy_style_inline}
\alias{epoxy_style_inline}
\title{Epoxy Inline Style Transformer}
\usage{
epoxy_style_inline(
  ...,
  transformer = glue::identity_transformer,
  bytes = scales::label_bytes(),
  date = function(x) format(x, format = "\%F"),
  time = function(x) format(x, format = "\%T"),
  datetime = function(x) format(x, format = "\%F \%T"),
  dollar = scales::label_dollar(prefix = default_for_engine("$", "$", "\\\\$")),
  number = scales::label_number(),
  comma = scales::label_comma(),
  ordinal = scales::label_ordinal(),
  percent = scales::label_percent(suffix = default_for_engine("\%", "\%", "\\\\\%")),
  pvalue = scales::label_pvalue(),
  scientific = scales::label_scientific(),
  uppercase = toupper,
  lowercase = tolower,
  titlecase = tools::toTitleCase
)
}
\arguments{
\item{...}{Additional named inline transformers. The evaluated expression
from the template expression is passed as the first argument to the
function.}

\item{transformer}{[\verb{function]}\cr A function taking three parameters \code{code}, \code{envir} and
\code{data} used to transform the output of each block before, during, or after
evaluation. For example transformers see \code{vignette("transformers")}.}

\item{bytes}{The function to apply to \code{x} when the template is \verb{\{.bytes x\}}. Default is \code{\link[scales:label_bytes]{scales::label_bytes()}}.}

\item{date}{The function to apply to \code{x} when the template is \verb{\{.date x\}}. Default is \code{\link[=function]{function()}}.}

\item{time}{The function to apply to \code{x} when the template is \verb{\{.time x\}}. Default is \code{\link[=function]{function()}}.}

\item{datetime}{The function to apply to \code{x} when the template is \verb{\{.datetime x\}} or \verb{\{.dttm x\}}. Default is \code{\link[=function]{function()}}.}

\item{dollar}{The function to apply to \code{x} when the template is \verb{\{.dollar x\}}. Default is \code{\link[scales:label_dollar]{scales::label_dollar()}}.}

\item{number}{The function to apply to \code{x} when the template is \verb{\{.number x\}} or \verb{\{.num x\}}. Default is \code{\link[scales:label_number]{scales::label_number()}}.}

\item{comma}{The function to apply to \code{x} when the template is \verb{\{.comma x\}}. Default is \code{\link[scales:label_number]{scales::label_comma()}}.}

\item{ordinal}{The function to apply to \code{x} when the template is \verb{\{.ordinal x\}}. Default is \code{\link[scales:label_ordinal]{scales::label_ordinal()}}.}

\item{percent}{The function to apply to \code{x} when the template is \verb{\{.percent x\}} or \verb{\{.pct x\}}. Default is \code{\link[scales:label_percent]{scales::label_percent()}}.}

\item{pvalue}{The function to apply to \code{x} when the template is \verb{\{.pvalue x\}}. Default is \code{\link[scales:label_pvalue]{scales::label_pvalue()}}.}

\item{scientific}{The function to apply to \code{x} when the template is \verb{\{.scientific x\}}. Default is \code{\link[scales:label_scientific]{scales::label_scientific()}}.}

\item{uppercase}{The function to apply to \code{x} when the template is \verb{\{.uppercase x\}} or \verb{\{.uc x\}}. Default is \code{\link[=toupper]{toupper()}}.}

\item{lowercase}{The function to apply to \code{x} when the template is \verb{\{.lowercase x\}} or \verb{\{.lo x\}}. Default is \code{\link[=tolower]{tolower()}}.}

\item{titlecase}{The function to apply to \code{x} when the template is \verb{\{.titlecase x\}} or \verb{\{.tc x\}}. Default is \code{\link[tools:toTitleCase]{tools::toTitleCase()}}.}
}
\value{
A function of \code{text} and \code{envir} suitable for the \code{.transformer}
argument of \code{\link[glue:glue]{glue::glue()}}.
}
\description{
This epoxy style is heavily inspired by the inline formatters in the
\href{https://cli.r-lib.org}{cli package}. The syntax is quite similar, but
\pkg{epoxy}'s syntax is slightly different to accomodate reporting use cases.

With the inline styles, you can include a keyword, prefixed with a dot (\code{.})
that is used to format the template variable in place.

\if{html}{\out{<div class="sourceCode r">}}\preformatted{epoxy("It cost \{.dollar 123456\}.", .style = "inline")
#> It cost $123,456.
}\if{html}{\out{</div>}}

The formatters, e.g. \code{dollar} in the example above, can be customized using
the arguments of \code{epoxy_style_inline()}. Pass a customized
\code{\link[scales:label_dollar]{scales::label_dollar()}} to \code{dollar} to achieve a different style.

\if{html}{\out{<div class="sourceCode r">}}\preformatted{dollars_nzd <- scales::label_dollar(suffix = " NZD")

epoxy(
  "It cost \{.dollar 123456\}.",
  .style = epoxy_style_inline(dollar = dollars_nzd)
)
#> It cost $123,456 NZD.
}\if{html}{\out{</div>}}

Note that, unlike
\href{https://cli.r-lib.org/reference/inline-markup.html}{inline markup with cli},
the text within the template variable, other than the keyword, is treated as
an R expression.

\if{html}{\out{<div class="sourceCode r">}}\preformatted{money <- 123456
epoxy("It cost \{.dollar money\}.", .style = "inline")
#> It cost $123,456.
}\if{html}{\out{</div>}}

You can also nest inline markup expressions.

\if{html}{\out{<div class="sourceCode r">}}\preformatted{money <- c(123.456, 234.567)
epoxy("It will cost either \{.or \{.dollar money\}\}.", .style = "inline")
#> It will cost either $123.46 or $234.57.
}\if{html}{\out{</div>}}

Finally, you can provide your own function that is applied to the evaluated
expression.

\if{html}{\out{<div class="sourceCode r">}}\preformatted{set.seed(4242)

epoxy(
  "Here are three random percentages: \{.and \{.pct \{.runif 3\}\}\}.",
  .style = epoxy_style_inline(
    runif = function(n) sort(runif(n))
  )
)
#> Here are three random percentages: 23\%, 35\%, and 99\%.
}\if{html}{\out{</div>}}
}
\seealso{
Other epoxy-style glue transformers: 
\code{\link{epoxy_style_format}()},
\code{\link{epoxy_style_html}()},
\code{\link{epoxy_style}()}
}
\concept{epoxy-style glue transformers}
