% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/epoxy_style_inline.R
\name{epoxy_style_inline}
\alias{epoxy_style_inline}
\title{Epoxy Inline Style Transformer}
\usage{
epoxy_style_inline(
  ...,
  transformer = glue::identity_transformer,
  bytes = scales::bytes,
  date = scales::label_date(),
  time = scales::label_time(),
  dttm = function(text) strftime(text, "\%F \%T"),
  dollar = scales::label_dollar(prefix = default_for_engine("$", "$", "\\\\$")),
  number = scales::number,
  comma = scales::comma,
  ordinal = scales::ordinal,
  math = scales::math,
  percent = scales::label_percent(suffix = default_for_engine("\%", "\%", "\\\\\%")),
  pvalue = scales::pvalue,
  scientific = scales::scientific,
  uppercase = toupper(text),
  lowercase = tolower(text),
  titlecase = tools::toTitleCase(text)
)
}
\arguments{
\item{...}{Additional named inline transformers. The evaluated expression
from the template expression is passed as the first argument to the
function.}

\item{transformer}{The transformer to apply to the replacement string. This
argument is used for chaining the transformer functions. By providing a
function to this argument you can apply an additional transformation after
the current transformation. In nearly all cases, you can let
\code{epoxy_style()} handle this for you. The chain ends when
\code{\link[glue:identity_transformer]{glue::identity_transformer()}} is used as the \code{transformer}.}

\item{bytes}{The function to apply to when \code{label} is \code{"bytes"}. Default is
\code{\link[scales:label_bytes]{scales::label_bytes()}}.}

\item{date}{The function to apply to when \code{label} is \verb{"date" or "d"}. Default
is \code{\link[scales:label_date]{scales::label_date()}}.}

\item{time}{The function to apply to when \code{label} is \verb{"time" or "dt"}.
Default is \code{\link[scales:label_date]{scales::label_time()}}.}

\item{dollar}{The function to apply to when \code{label} is \verb{"dollar" or "$"}.
Default is \code{\link[scales:label_dollar]{scales::label_dollar()}}.}

\item{number}{The function to apply to when \code{label} is \verb{"number" or "#"}.
Default is \code{\link[scales:label_number]{scales::label_number()}}.}

\item{comma}{The function to apply to when \code{label} is \verb{"comma" or ","}.
Default is \code{\link[scales:label_number]{scales::label_comma()}}.}

\item{ordinal}{The function to apply to when \code{label} is \verb{"ordinal" or "o"}.
Default is \code{\link[scales:label_ordinal]{scales::label_ordinal()}}.}

\item{math}{The function to apply to when \code{label} is \code{"math"}. Default is
\code{\link[scales:label_parse]{scales::label_math()}}.}

\item{percent}{The function to apply to when \code{label} is \verb{"percent", "pct", or "\%"}. Default is \code{\link[scales:label_percent]{scales::label_percent()}}.}

\item{pvalue}{The function to apply to when \code{label} is \verb{"pvalue" or "p"}.
Default is \code{\link[scales:label_pvalue]{scales::label_pvalue()}}.}

\item{scientific}{The function to apply to when \code{label} is \verb{"scientific" or "si"}. Default is \code{\link[scales:label_scientific]{scales::label_scientific()}}.}

\item{uppercase}{The function to apply to when \code{label} is \verb{"uppercase" or "uc"}. Default is \code{\link[=toupper]{toupper()}}.}

\item{lowercase}{The function to apply to when \code{label} is \verb{"lowercase" or "lc"}. Default is \code{\link[=tolower]{tolower()}}.}

\item{titlecase}{The function to apply to when \code{label} is \verb{"titlecase" or "tc"}. Default is \code{\link[tools:toTitleCase]{tools::toTitleCase()}}.}
}
\description{
This epoxy style is heavily inspired by the inline formatters in the
\href{https://cli.r-lib.org}{cli package}. The syntax is quite similar, but
\pkg{epoxy}'s syntax is slightly different to accomodate reporting use cases.

With the inline styles, you can include a keyword, prefixed with a dot (\code{.})
that is used to format the template variable in place.

\if{html}{\out{<div class="sourceCode r">}}\preformatted{epoxy("It cost \{.dollar 123456\}.", .style = "inline")
#> It cost $123,456.
}\if{html}{\out{</div>}}

The formatters, e.g. \code{dollar} in the example above, can be customized using
the arguments of \code{epoxy_style_inline()}. Pass a customized
\code{\link[scales:label_dollar]{scales::label_dollar()}} to \code{dollar} to achieve a different style.

\if{html}{\out{<div class="sourceCode r">}}\preformatted{dollars_nzd <- scales::label_dollar(suffix = " NZD")

epoxy(
  "It cost \{.dollar 123456\}.",
  .style = epoxy_style_inline(dollar = dollars_nzd)
)
#> It cost $123,456 NZD.
}\if{html}{\out{</div>}}

Note that, unlike
\href{https://cli.r-lib.org/reference/inline-markup.html}{inline markup with cli},
the text within the template variable, other than the keyword, is treated as
an R expression.

\if{html}{\out{<div class="sourceCode r">}}\preformatted{money <- 123456
epoxy("It cost \{.dollar money\}.", .style = "inline")
#> It cost $123,456.
}\if{html}{\out{</div>}}

You can also nest inline markup expressions.

\if{html}{\out{<div class="sourceCode r">}}\preformatted{money <- c(123.456, 234.567)
epoxy("It will cost either \{.or \{.dollar money\}\}.", .style = "inline")
#> It will cost either $123.46 or $234.57.
}\if{html}{\out{</div>}}

Finally, you can provide your own function that is applied to the evaluated
expression.

\if{html}{\out{<div class="sourceCode r">}}\preformatted{set.seed(4242)

epoxy(
  "Here are three random percentages: \{.and \{.pct \{.runif 3\}\}\}.",
  .style = epoxy_style_inline(
    runif = function(n) sort(runif(n))
  )
)
#> Here are three random percentages: 23\%, 35\%, and 99\%.
}\if{html}{\out{</div>}}
}
