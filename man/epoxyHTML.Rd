% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/shiny.R
\name{epoxyHTML}
\alias{epoxyHTML}
\title{Epoxy HTML Output for Shiny}
\usage{
epoxyHTML(
  .id,
  ...,
  .class = NULL,
  .class_item = NULL,
  .container = "div",
  .placeholder = "",
  .sep = "",
  .open = "{{",
  .close = "}}",
  .na = "",
  .trim = FALSE
)
}
\arguments{
\item{.id}{The output id}

\item{...}{UI elements or text (that will be treated as HTML), containing
template variables. Use named values to provide initial placeholder values.}

\item{.class}{Classes added to the output div, in addition to \code{.epoxy-html}}

\item{.class_item}{Classes added to the \code{.container} wrapping each template
variable.}

\item{.container}{The HTML element used for each template item, by default
\verb{<span>}.}

\item{.placeholder}{Default placeholder if a template variable placeholder
isn't provided.}

\item{.sep}{[\code{character(1)}: \sQuote{""}]\cr Separator used to separate elements.}

\item{.open}{[\code{character(1)}: \sQuote{\\{}]\cr The opening delimiter. Doubling the
full delimiter escapes it.}

\item{.close}{[\code{character(1)}: \sQuote{\\}}]\cr The closing delimiter. Doubling the
full delimiter escapes it.}

\item{.na}{[\code{character(1)}: \sQuote{NA}]\cr Value to replace NA values
with. If \code{NULL} missing values are propagated, that is an \code{NA} result will
cause \code{NA} output. Otherwise the value is replaced by the value of \code{.na}.}

\item{.trim}{[\code{logical(1)}: \sQuote{TRUE}]\cr Whether to trim the input
template with \code{trim()} or not.}
}
\value{
An HTML object.
}
\description{
Expermimental. An glue-like output for Shiny. \code{epoxyHTML()} lets you use
placeholders in your HTML such as \code{"{{height}}"}, that are provided values
from the server by giving \code{renderEpoxyHTML()} a \code{height} value.
}
\examples{
\dontrun{
ui <- fluidPage(
  h2("epoxyHTML demo"),
  epoxy:::epoxyHTML(
    'test',
    fluidRow(
      tags$div(
        class = "col-xs-4",
        selectInput("thing", "What is this {{color}} thing?", c("apple", "banana", "coconut", "dolphin"))
      ),
      tags$div(
        class = "col-xs-4",
        selectInput("color", "What color is the {{thing}}?", c("red", "blue", "black", "green", "yellow"))
      ),
      tags$div(
        class = "col-xs-4",
        sliderInput("height", "How tall is the {{color}} {{thing}}?", value = 5, min = 0, max = 10, step = 0.1, post = "ft")
      )
    ),
    tags$p(class = "big", "The {{color}} {{thing}} is {{height}} feet tall."),
    thing = "THING",
    color = "COLOR",
    height = "HEIGHT",
    .class_item = "inner"
  ),
  tags$style(HTML(
    '.big { font-size: 1.5em; }
    .inner:not(.epoxy-item__placeholder) { background-color: rgba(254, 233, 105, 0.5)}
    .epoxy-item__placeholder { color: #999999; }'
  ))
)

server <- function(input, output, session) {
  output$test <- epoxy:::renderEpoxyHTML(
    thing = input$thing,
    color = input$color,
    height = input$height
  )
}

shinyApp(ui, server)
}

}
\seealso{
renderEpoxyHTML
}
