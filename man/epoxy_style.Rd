% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/transformers.R
\name{epoxy_style}
\alias{epoxy_style}
\alias{epoxy_style_get}
\alias{epoxy_style_set}
\title{epoxy Style Transformers}
\usage{
epoxy_style(..., engine = NULL, syntax = lifecycle::deprecated())

epoxy_style_get(engine = c("md", "html", "latex"))

epoxy_style_set(..., engine = NULL, syntax = lifecycle::deprecated())
}
\arguments{
\item{...}{A list of style functions, e.g. \code{epoxy_style_bold} or the name of
a style function, e.g. \code{"bold"}, or a call to a style function, e.g.
\code{epoxy_style_bold()}. \code{epoxy_style()} chains the style functions together,
applying the styles from left to right.

For example, \code{epoxy_style("bold", "collapse")} results in replaced strings
that are emboldened \emph{and then} collapsed, e.g. \verb{**a** and **b**}. On the
other hand, \code{epoxy_style("collapse", "bold")}  will collapse the vector
\emph{and then} embolden the entire string.

In \code{epoxy_style_apply()}, the \code{...} are passed to the underlying call the
underlying function call.

In \code{epoxy_style_collapse()}, the \code{...} are ignored.}

\item{engine}{One of \code{"markdown"} (or \code{"md"}), \code{"html"}, or \code{"latex"}. The
default is chosen based on the engine of the chunk where the style function
is called, or according to the option \code{epoxy.engine}. Caution: invalid
options are silently ignored, falling back to \code{"markdown"}.}

\item{syntax}{\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#deprecated}{\figure{lifecycle-deprecated.svg}{options: alt='[Deprecated]'}}}{\strong{[Deprecated]}} Use \code{engine} instead.}

\item{transformer}{The transformer to apply to the replacement string. This
argument is used for chaining the transformer functions. By providing a
function to this argument you can apply an additional transformation after
the current transformation. In nearly all cases, you can let
\code{epoxy_style()} handle this for you. The chain ends when
\code{\link[glue:identity_transformer]{glue::identity_transformer()}} is used as the \code{transformer}.}
}
\value{
A function of \code{text} and \code{envir} suitable for the \code{.transformer} argument of
\code{\link[glue:glue]{glue::glue()}}.
}
\description{
These transformers provide additional automatic formatting for the template
strings. They are designed to be used with the \code{.transformer} chunk option of
in \code{epoxy} chunks. You can use \code{epoxy_style()} to chain several transformers
together. \code{epoxy_style()} and individual \pkg{epoxy} style functions can be
used in \code{epoxy}, \code{epoxy_html} and \code{epoxy_latex} chunks and will choose the
correct engine for each.
}
\section{Functions}{
\itemize{
\item \code{epoxy_style()}: Construct an epoxy styler, a.k.a. a glue transformer
for use with \code{\link[=epoxy]{epoxy()}} or \code{\link[glue:glue]{glue::glue()}}.

\item \code{epoxy_style_get()}: Get the default epoxy \code{.style} transformer for all
epoxy engines or for a subset of engines.

\item \code{epoxy_style_set()}: Set the default epoxy \code{.style} transformer for all
epoxy engines or for a subset of engines.

}}
\section{Output-specific styling}{

The \code{epoxy_style_} functions will attempt to use the correct engine for
styling the replacement text for markdown, HTML and LaTeX. This choice is
driven by the chunk engine where the styling function is used. The \code{epoxy}
engine corresponds to markdown, \code{epoxy_html} to HTML, and \code{epoxy_latex} to
LaTeX.

Automatic engine selection only works when the epoxy style functions are used
with epoxy knitr engines and during the knitr rendering process. When
used outside of this context, you can choose the desired engine by setting
the \code{engine} to one of \code{"markdown"}, \code{"html"} or \code{"latex"}.
}

\examples{
epoxy("{.strong {.and letters[1:3]}}")
epoxy("{.and {.strong letters[1:3]}}")

# You can also use the static stylers to apply these transformations
# to every replacement. (This is slightly older syntax.)
epoxy("{letters[1:3]&}", .style = epoxy_style("bold", "collapse"))
epoxy("{letters[1:3]&}", .style = epoxy_style("collapse", "bold"))

# In an epoxy_html chunk...
epoxy_html("{{.strong {{.or letters[1:3] }} }}")

# Or in an epoxy_latex chunk...
epoxy_latex("<.and <.strong letters[1:3] >>")

# ---- Other Transfomers ----

# Format numbers with an inline transformation
amount <- 123.4234234
epoxy("{.number amount}")
epoxy(
  "{.number amount}",
  .style = epoxy_style_inline(
    number = scales::label_number(accuracy = 0.01)
  )
)

# Apply _any_ function to all replacements
epoxy(
  "{amount} is the same as {amount}",
  .style = epoxy_style_apply(round, digits = 0)
)

epoxy(
  "{amount} is the same as {amount}",
  .style = epoxy_style(
    epoxy_style_apply(~ .x * 100),
    epoxy_style_apply(round, digits = 2),
    epoxy_style_apply(~ paste0(.x, "\%"))
  )
)
}
\seealso{
Other epoxy-style glue transformers: 
\code{\link{epoxy_style_html}()},
\code{\link{epoxy_style_inline}()}
}
\concept{epoxy-style glue transformers}
