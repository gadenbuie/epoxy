[{"path":"http://pkg.garrickadenbuie.com/epoxy/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2020 Garrick Aden-Buie Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/articles/epoxy.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"epoxy","text":"can install latest version epoxy remotes gadenbuie.r-universe.dev.","code":"# install.packages(\"remotes\") remotes::install_github(\"gadenbuie/epoxy\") options(repos = c(   gadenbuie = \"https://gadenbuie.r-universe.dev/\",   getOptions(\"repos\") ))  install.packages(\"epoxy\")"},{"path":"http://pkg.garrickadenbuie.com/epoxy/articles/epoxy.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"epoxy","text":"Loading epoxy adds four new knitr engines, chunk types. type lets intermix text R code data (expr table ), geared toward different output context. ⚠️ Caution: Previously, epoxy provided glue engine, conflicts similar chunk engine [glue] package. can update existing documents use epoxy engine, can explicitly use epoxy’s glue chunk including following setup chunk.","code":"library(epoxy) use_epoxy_glue_engine()"},{"path":"http://pkg.garrickadenbuie.com/epoxy/articles/epoxy.html","id":"use-epoxy","dir":"Articles","previous_headings":"","what":"Use epoxy","title":"epoxy","text":"use epoxy R Markdown document, create new chunk using engine choice. chunk, write markdown, HTML, LaTeX needed, wrapping R expressions inside delimiters epoxy chunk. average speed cars 15.4 mph. average distance traveled 42.98 ft. epoxy built around glue::glue(), evaluates R expressions { } inserts results string. chunk equivalent call glue::glue(): One immediate advantage using epoxy instead glue::glue() RStudio’s autocompletion feature works inside epoxy chunks! Typing cars$ chunk suggest columns cars.","code":"```{epoxy} The average speed of the cars was **{mean(cars$speed)} mph.** But on average the distance traveled was only _{mean(cars$dist)}_. ``` glue::glue(\"The average speed of the cars was **{mean(cars$speed)} mph**. But on average the distance traveled was only _{mean(cars$dist)} ft_.\") #> The average speed of the cars was **15.4 mph**. #> But on average the distance traveled was only _42.98 ft_."},{"path":"http://pkg.garrickadenbuie.com/epoxy/articles/epoxy.html","id":"inline-styles","dir":"Articles","previous_headings":"","what":"Inline styles","title":"epoxy","text":"epoxy provides inline styling inspired cli’s inline markup. styling enabled default epoxy(), epoxy_html() epoxy_latex() respective knitr chunk engines. ’s example using small list containing data movie. can use inline styles format replacement text build description data. movie Back Future Part II released 1989. earned $118,450,002 budget $40,000,000, features movie stars Michael J. Fox, Christopher Lloyd, Lea Thompson Thomas F. Wilson. Read inline styles ?epoxy_style_inline.","code":"movie <- list(   year = 1989,   title = \"Back to the Future Part II\",   budget = 4e+07,   domgross = 118450002,   imdb_rating = 7.8,   actors = c(     \"Michael J. Fox\",     \"Christopher Lloyd\",     \"Lea Thompson\",     \"Thomas F. Wilson\"   ),   runtime = 108L ) ```{epoxy echo = FALSE} The movie {.emph {.titlecase movie$title}} was released in {.strong movie$year}. It earned {.dollar movie$domgross} with a budget of {.dollar movie$budget}, and it features movie stars {.and movie$actors}. ```"},{"path":"http://pkg.garrickadenbuie.com/epoxy/articles/epoxy.html","id":"style-replaced-values","dir":"Articles","previous_headings":"Inline styles","what":"Style replaced values","title":"epoxy","text":"can use epoxy_style_wrap() epoxy_style chunk option wrap evaluated R expression formatting templating text. can use pre-set epoxy_style_bold(), epoxy_style_italic(), epoxy_style_code() style transformers epoxy_style(). cars stopped 2 120 feet starting speed 4—120 mph.","code":"```{epoxy, epoxy_style = epoxy_style(\"bold\")} All cars stopped between {min(cars$dist)} and {max(cars$dist)} feet from a starting speed of {min(cars$speed)}---{max(cars$speed)} ```"},{"path":"http://pkg.garrickadenbuie.com/epoxy/articles/epoxy.html","id":"epoxy-chunks-are-vectorized","dir":"Articles","previous_headings":"Inline styles","what":"epoxy chunks are vectorized","title":"epoxy","text":"Unlike inline R code, epoxy chunks vectorized. can something watch can advantage: “” apple “b” banana “c” coconut “d” donut can collapse fields automatically using epoxy_style_collapse() transformer. can choose vectors collapsed adding *, & | end expression. * collapses commas, e.g. {letters[1:3]*}. & collapses commas adds \" \" last two items | collapses commas adds \" \" last two items. first three letters , b, c. capitalized, , B C. ’re indexed 1, 2 3. can change separator entries last entry using sep, last _and _or specific arguments epoxy_style_collapse() function.","code":"```{epoxy} {1:4}. \"{letters[1:4]}\" is for {c(\"apple\", \"banana\", \"coconut\", \"donut\")} ``` ```{epoxy, epoxy_style = epoxy_style(\"collapse\")} - The first three letters are {letters[1:3]*}. - When capitalized, they are {LETTERS[1:3]&}. - They're indexed by {1:3|}. ```"},{"path":"http://pkg.garrickadenbuie.com/epoxy/articles/epoxy.html","id":"templating-with-epoxy-chunks","dir":"Articles","previous_headings":"Inline styles","what":"Templating with epoxy chunks","title":"epoxy","text":"’s also possible create reusable template. Use ref.label chunk option reuse template using values data chunk option, can list data frame. Chevrolet Malibu gets 19 city 27 highway miles per gallon. Dodge Caravan gets 7 city 24 highway miles per gallon. Ford Expedition gets 11 city 17 highway miles per gallon.","code":"mpg <- data.frame(   manufacturer = c(\"Chevrolet\", \"Dodge\", \"Ford\"),   model = c(\"Malibu\", \"Caravan\", \"Expedition\"),   cty = c(19, 7, 11),   hwy = c(27, 24, 17) ) ```{epoxy car-name, eval=FALSE} - A {manufacturer} {model} gets {cty} city and {hwy} highway miles per gallon. ```  ```{epoxy ref.label=\"car-name\", data = mpg} ```"},{"path":"http://pkg.garrickadenbuie.com/epoxy/articles/epoxy.html","id":"whisker-engine","dir":"Articles","previous_headings":"","what":"Whisker Engine","title":"epoxy","text":"Sometimes epoxy engine doesn’t quite deliver template power need. cases, can use whisker engine instead. Hello R User: just won $1000! Well, $600, taxes.","code":"```{r} contestant <- list(name = \"R User\", value = 1000, taxed = 600, in_ca = TRUE) ```  ```{whisker data = contestant, echo=FALSE} Hello {{name}}: You have just won ${{value}}! {{#in_ca}} Well, ${{taxed}}, after taxes. {{/in_ca}} ``` contestant <- list(name = \"R User\", value = 1000, taxed = 600, in_ca = TRUE)"},{"path":[]},{"path":"http://pkg.garrickadenbuie.com/epoxy/articles/epoxy.html","id":"html-blocks","dir":"Articles","previous_headings":"Raw Blocks","what":"HTML Blocks","title":"epoxy","text":"Use epoxy_html block epoxy (glue) R HTML together. output raw HTML. default, expressions types blocks wrapped {{ }}, like whisker templates . Chevrolet Malibu Dodge Caravan Ford Expedition","code":"<ul> ```{epoxy_html, data = mpg}   <li><strong>{{manufacturer}}<\/strong> <em>{{model}}<\/em><\/li> ``` <\/ul>"},{"path":"http://pkg.garrickadenbuie.com/epoxy/articles/epoxy.html","id":"latex-blocks","dir":"Articles","previous_headings":"Raw Blocks","what":"LaTeX Blocks","title":"epoxy","text":"Similarly, can also use epoxy_latex blocks epoxy R LaTeX together. default, expressions types blocks wrapped < >. R Markdown knitting LaTeX output, renders :","code":"\\begin{itemize} ```{epoxy_latex, data = mpg} \\item \\textbf{<manufacturer>} \\textit{<model>} gets <cty> city and <hwy> highway miles per gallon. ``` \\end{itemize} \\begin{itemize} \\item \\textbf{Chevrolet} \\textit{Malibu} gets 19 city and 27 highway miles per gallon. \\item \\textbf{Dodge} \\textit{Caravan} gets 7 city and 24 highway miles per gallon. \\item \\textbf{Ford} \\textit{Expedition} gets 11 city and 17 highway miles per gallon. \\end{itemize}"},{"path":"http://pkg.garrickadenbuie.com/epoxy/articles/inline-reporting.html","id":"plug-in-reporting","dir":"Articles","previous_headings":"","what":"Plug-in reporting","title":"Inline Reporting","text":"Tristan Yihui Xie call inline reporting act interleaving R expressions prose markdown text. click Knit button call rmarkdown::render() build report, knitr evaluates R expressions, turns text plugs output. common use case reporting descriptive statistics. illustrate, ’ll use Orange dataset contains circumference measurements 5 orange trees 7 points time. R code might use summarize Orange data: lines might include report growth trees: dataset contains 35 tree size measurements 5 trees 7 timepoints study. normal R Markdown inline reporting written .Rmd file instead: two forms similar, epoxy chunk approach provides advantages, ’ll discover vignette.","code":"n_trees <- length(levels(Orange$Tree)) n_timepoints <- length(unique(Orange$age)) ```{r setup, include = FALSE} library(epoxy) ```  ```{epoxy} The dataset contains {nrow(Orange)} tree size measurements from {n_trees} trees at {n_timepoints} time points in the study. ``` The dataset contains `r nrow(Orange)` tree size measurements from `r n_trees` trees at `r n_timepoints` time points in the study."},{"path":"http://pkg.garrickadenbuie.com/epoxy/articles/inline-reporting.html","id":"collect-your-variables-in-lists","dir":"Articles","previous_headings":"","what":"Collect your variables in lists","title":"Inline Reporting","text":"example, used normal variables available global environment document. small structural change can bring great benefits. ’s worth reading Tristan’s blog post, steal thunder: store data lists. , one hand, create variables named knitted_when, knitted_where knitted_with store facts knitting process. knitted_ prefix helpful aid remember variables related. store three variables single object instead. Bundling everything list() allows report results accessing list elements name $. Report prepared 2023-03-28 inline-reporting.Rmd knitr version 1.42 😆. Read knitr::knit(). still essentially equivalent R Markdown’s inline R chunks. epoxy chunks include data chunk argument, allows us reference items knitted list directly without use $. Report prepared 2023-03-28 inline-reporting.Rmd knitr version 1.42 😆. Read knitr::knit(). Note can still arbitrary R code epoxy inline expressions: emo_ji() function — vignette-safe version emo::ji() — exists global environment.","code":"knitted <- list(   when = format(Sys.Date()),   where = knitr::current_input(),   with = format(utils::packageVersion(\"knitr\")),   doc_url = \"https://rdrr.io/pkg/knitr/man/knit.html\" ) ```{epoxy} Report prepared on {knitted$when} from `{knitted$where}`  with knitr version {knitted$with} {emo_ji('happy')}.  Read more about [`knitr::knit()`]({knitted$doc_url}). ``` ```{epoxy knitted-2, data = knitted} Report prepared on {when} from `{where}`  with knitr version {with} {emo_ji('happy')}.  Read more about [`knitr::knit()`]({doc_url}). ```"},{"path":"http://pkg.garrickadenbuie.com/epoxy/articles/inline-reporting.html","id":"reporting-model-results","dir":"Articles","previous_headings":"","what":"Reporting Model Results","title":"Inline Reporting","text":"Suppose model results ’ve prepared table (details, see Tristan’s blog post). results summarize linear mixed model estimating population averages trees grown several ozone conditions. ’ve copied resulting data frame vignette avoid taking extra dependencies vignette. can use split() make list data frames can index values term column. now list one-row dataframes: Now can write results inline reporting: average log-size control condition 4.25 units, 95% Wald CI [4.00, 4.51]. statistically clear difference ozone conditions intercepts (day-0 values), B = −0.14, [−0.45, 0.17]. control group, average growth rate 0.34 log-size units per 100 days, [0.31, 0.36]. growth rate ozone treatment group significantly slower, diff = −0.04, [−0.07, −0.01].","code":"text_ready <-   data.frame(     term = c(\"intercept\", \"hund_days\", \"ozone\", \"hund_days_ozone\"),     estimate = c(\"4.25\", \"0.34\", \"&minus;0.14\", \"&minus;0.04\"),     se = c(0.131, 0.013, 0.158, 0.015),     ci = c(\"[4.00, 4.51]\", \"[0.31, 0.36]\", \"[&minus;0.45, 0.17]\",\"[&minus;0.07, &minus;0.01]\"),     stringsAsFactors = FALSE   ) stats <- split(text_ready, text_ready$term) str(stats) #> List of 4 #>  $ hund_days      :'data.frame': 1 obs. of  4 variables: #>   ..$ term    : chr \"hund_days\" #>   ..$ estimate: chr \"0.34\" #>   ..$ se      : num 0.013 #>   ..$ ci      : chr \"[0.31, 0.36]\" #>  $ hund_days_ozone:'data.frame': 1 obs. of  4 variables: #>   ..$ term    : chr \"hund_days_ozone\" #>   ..$ estimate: chr \"&minus;0.04\" #>   ..$ se      : num 0.015 #>   ..$ ci      : chr \"[&minus;0.07, &minus;0.01]\" #>  $ intercept      :'data.frame': 1 obs. of  4 variables: #>   ..$ term    : chr \"intercept\" #>   ..$ estimate: chr \"4.25\" #>   ..$ se      : num 0.131 #>   ..$ ci      : chr \"[4.00, 4.51]\" #>  $ ozone          :'data.frame': 1 obs. of  4 variables: #>   ..$ term    : chr \"ozone\" #>   ..$ estimate: chr \"&minus;0.14\" #>   ..$ se      : num 0.158 #>   ..$ ci      : chr \"[&minus;0.45, 0.17]\" ```{epoxy} The average log-size in the control condition was {stats$intercept$estimate} units,  95% Wald CI {stats$intercept$ci}. There was not a statistically clear difference between the  ozone conditions for their intercepts (day-0 values),  *B* = {stats$ozone$estimate}, {stats$ozone$ci}. For the control group, the average growth rate was  {stats$hund_days$estimate} log-size units per 100 days,  {stats$hund_days$ci}. The growth rate for  the ozone treatment group was significantly slower,  *diff* = {stats$hund_days_ozone$estimate},  {stats$hund_days_ozone$ci}. ```"},{"path":"http://pkg.garrickadenbuie.com/epoxy/articles/inline-reporting.html","id":"inline-reporting-with-autocomplete","dir":"Articles","previous_headings":"Reporting Model Results","what":"Inline reporting with autocomplete","title":"Inline Reporting","text":"’s extra neat epoxy — readily apparent ’re reading vignette — RStudio’s autocomplete feature kicks type stats$ inside braced expression { }. Actually, IDE doesn’t know epoxy knitr engine, autocomplete tries help every word. ’s typically easy ignore suggestions words part prose, ’s usually outweighed usefulness able autocomplete names data structures.","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/articles/inline-reporting.html","id":"intermittent-inline-reporting","dir":"Articles","previous_headings":"Reporting Model Results","what":"Intermittent inline-reporting","title":"Inline Reporting","text":"Note don’t need write entire document even paragraph inside epoxy chunk; can wrap data-heavy parts needed. statistically clear difference ozone conditions intercepts (day-0 values), B = −0.14, [−0.45, 0.17]. growth rate ozone treatment group significantly slower, diff = −0.04, [−0.07, −0.01].","code":"There was not a statistically clear difference between the  ozone conditions for their intercepts (day-0 values), ```{epoxy} *B* = {stats$ozone$estimate}, {stats$ozone$ci}. ``` The growth rate for the ozone treatment group was significantly slower, ```{epoxy} *diff* = {stats$hund_days_ozone$estimate}, {stats$hund_days_ozone$ci}. ```"},{"path":"http://pkg.garrickadenbuie.com/epoxy/articles/inline-reporting.html","id":"repeated-inline-reporting","dir":"Articles","previous_headings":"","what":"Repeated inline reporting","title":"Inline Reporting","text":"Occasionally may need re-use phrase document structure different slices data.","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/articles/inline-reporting.html","id":"vectorized-inline-reporting-chunks","dir":"Articles","previous_headings":"Repeated inline reporting","what":"Vectorized inline reporting chunks","title":"Inline Reporting","text":"Suppose summarize orange tree growth (normally use combination dplyr::group_by() dplyr::summarize() .) epoxy chunks, like glue::glue(), vectorized, find needing repeat thing , can use feature advantage. quick recap growth observed orange trees: Tree number 1 started 30mm , 1464 days, grew 145mm. Tree number 2 started 33mm , 1464 days, grew 203mm. Tree number 3 started 30mm , 1464 days, grew 140mm. Tree number 4 started 32mm , 1464 days, grew 214mm. Tree number 5 started 30mm , 1464 days, grew 177mm.","code":"summarize_tree_growth <- function(tree) {   tree <- Orange[Orange$Tree == tree, ]   tree <- data.frame(     tree = tree$Tree[1],     age_range = diff(range(tree$age)),     circumference_first = tree$circumference[1],     circumference_last = tree$circumference[nrow(tree)]   )   tree$growth_rate <- with(tree, (circumference_last - circumference_first) / age_range)   tree }  orange_summary <- lapply(1:5, summarize_tree_growth) orange_summary <- do.call(rbind, orange_summary) orange_summary #>   tree age_range circumference_first circumference_last growth_rate #> 1    1      1464                  30                145  0.07855191 #> 2    2      1464                  33                203  0.11612022 #> 3    3      1464                  30                140  0.07513661 #> 4    4      1464                  32                214  0.12431694 #> 5    5      1464                  30                177  0.10040984 A quick recap of the growth observed in the orange trees:  ```{epoxy data = orange_summary} - Tree number {tree} started out at {circumference_first}mm and,   over {age_range} days, grew to be {circumference_last}mm. ```"},{"path":"http://pkg.garrickadenbuie.com/epoxy/articles/inline-reporting.html","id":"template-inline-reporting-chunks","dir":"Articles","previous_headings":"Repeated inline reporting","what":"Template inline reporting chunks","title":"Inline Reporting","text":"using knitr’s reference labels feature, epoxy data chunk option saw , can create epoxy template can re-use like parameterized chunk. start creating labelled epoxy chunk eval = FALSE can later use prose referencing chunk ref.label providing different slice data via data chunk option. fourth tree largest tree end study, growing average 0.87mm per week. Meanwhile, smallest tree third, grew average 0.53mm per week.","code":"```{epoxy average-growth, eval=FALSE} an average of {signif(growth_rate * 7, 2)}mm per week. ``` The fourth tree was the largest tree at the end of the study, growing ```{epoxy ref.label=\"average-growth\", data = summarize_tree_growth(4)} ``` Meanwhile, the smallest tree was the third, which grew at ```{epoxy ref.label=\"average-growth\", data = summarize_tree_growth(3)} ```"},{"path":"http://pkg.garrickadenbuie.com/epoxy/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Garrick Aden-Buie. Author, maintainer.","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Aden-Buie G (2023). epoxy: String Interpolation 'R Markdown' Documents. R package version 0.0.3.9000, https://github.com/gadenbuie/epoxy.","code":"@Manual{,   title = {epoxy: String Interpolation for 'R Markdown' Documents},   author = {Garrick Aden-Buie},   year = {2023},   note = {R package version 0.0.3.9000},   url = {https://github.com/gadenbuie/epoxy}, }"},{"path":"http://pkg.garrickadenbuie.com/epoxy/index.html","id":"epoxy-","dir":"","previous_headings":"","what":"String Interpolation for R Markdown Documents","title":"String Interpolation for R Markdown Documents","text":"epoxy makes templating glue easy R Markdown documents Shiny apps.","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"String Interpolation for R Markdown Documents","text":"can install latest version epoxy remotes gadenbuie.r-universe.dev.","code":"# install.packages(\"remotes\") remotes::install_github(\"gadenbuie/epoxy\") options(repos = c(   gadenbuie = \"https://gadenbuie.r-universe.dev/\",   getOptions(\"repos\") ))  install.packages(\"epoxy\")"},{"path":"http://pkg.garrickadenbuie.com/epoxy/index.html","id":"setup","dir":"","previous_headings":"","what":"Setup","title":"String Interpolation for R Markdown Documents","text":"Loading epoxy adds four new knitr engines, chunk types. type lets intermix text R code data (expr table ), geared toward different output context. ⚠️ Caution: Previously, epoxy provided glue engine, conflicts similar chunk engine glue package. can update existing documents use epoxy engine, can explicitly use epoxy’s glue chunk including following setup chunk.","code":"library(epoxy) use_epoxy_glue_engine()"},{"path":"http://pkg.garrickadenbuie.com/epoxy/index.html","id":"use-epoxy","dir":"","previous_headings":"","what":"Use epoxy","title":"String Interpolation for R Markdown Documents","text":"use epoxy R Markdown document, create new chunk using engine choice. chunk, write markdown, HTML, LaTeX needed, wrapping R expressions inside delimiters epoxy chunk. average speed cars 15.4 mph. average distance traveled 42.98 ft. epoxy built around glue::glue(), evaluates R expressions { } inserts results string. chunk equivalent call glue::glue(): One immediate advantage using epoxy instead glue::glue() RStudio’s autocompletion feature works inside epoxy chunks! Typing cars$ chunk suggest columns cars.","code":"```{epoxy} The average speed of the cars was **{mean(cars$speed)} mph.** But on average the distance traveled was only _{mean(cars$dist)}_. ``` glue::glue(\"The average speed of the cars was **{mean(cars$speed)} mph**. But on average the distance traveled was only _{mean(cars$dist)} ft_.\") #> The average speed of the cars was **15.4 mph**. #> But on average the distance traveled was only _42.98 ft_."},{"path":"http://pkg.garrickadenbuie.com/epoxy/index.html","id":"learn-more","dir":"","previous_headings":"","what":"Learn more","title":"String Interpolation for R Markdown Documents","text":"’s whole lot epoxy can ! Learn : epoxy Package Documentation Getting Started Inline Reporting epoxy","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/preview/pr26/LICENSE.html","id":null,"dir":"Preview > Pr26","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2020 Garrick Aden-Buie Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/preview/pr26/authors.html","id":null,"dir":"Preview > Pr26","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Garrick Aden-Buie. Author, maintainer.","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/preview/pr26/authors.html","id":"citation","dir":"Preview > Pr26","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Aden-Buie G (2022). epoxy: String Interpolation 'R Markdown' Documents. R package version 0.0.2.9000, https://github.com/gadenbuie/epoxy.","code":"@Manual{,   title = {epoxy: String Interpolation for 'R Markdown' Documents},   author = {Garrick Aden-Buie},   year = {2022},   note = {R package version 0.0.2.9000},   url = {https://github.com/gadenbuie/epoxy}, }"},{"path":"http://pkg.garrickadenbuie.com/epoxy/preview/pr26/index.html","id":"epoxy","dir":"Preview > Pr26","previous_headings":"","what":"String Interpolation for R Markdown Documents","title":"String Interpolation for R Markdown Documents","text":"epoxy makes templating glue easy R Markdown documents Shiny apps. epoxy proof--concept stage right now. ’m still experimenting, API may change. ’d love hear thoughts, feel free open issues.","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/preview/pr26/index.html","id":"installation","dir":"Preview > Pr26","previous_headings":"","what":"Installation","title":"String Interpolation for R Markdown Documents","text":"can install proof--concept version epoxy remotes gadenbuie.r-universe.dev.","code":"# install.packages(\"remotes\") remotes::install_github(\"gadenbuie/epoxy\") options(repos = c(   gadenbuie = \"https://gadenbuie.r-universe.dev/\",   getOptions(repos) ))  install.packages(\"epoxy\")"},{"path":"http://pkg.garrickadenbuie.com/epoxy/preview/pr26/index.html","id":"example","dir":"Preview > Pr26","previous_headings":"","what":"Example","title":"String Interpolation for R Markdown Documents","text":"Loading epoxy adds new chunk type called epoxy. ⚠️ Note previously, epoxy provided glue chunk, clashes chunk engine provided glue package. wish restore use epoxy’s glue chunk, can include following setup chunk.","code":"library(epoxy) epoxy:::epoxy_set_knitr_engines(use_glue_engine = TRUE)"},{"path":"http://pkg.garrickadenbuie.com/epoxy/preview/pr26/index.html","id":"epoxy-chunks","dir":"Preview > Pr26","previous_headings":"Example","what":"epoxy chunks","title":"String Interpolation for R Markdown Documents","text":"can write regular markdown epoxy chunk, wrapping R expressions {...}, just like glue::glue(). average speed cars 15.4 mph. average distance travelled 42.98 ft. arguments glue::glue() available chunk options, can configure .open .close characters, e.g. {{ instead {, among options. amazing stroke luck, RStudio autocompletion works inside epoxy chunks!","code":"```{epoxy} The average speed of the cars was **{mean(cars$speed)} mph.** But on average the distance travelled was only _{mean(cars$dist)}_. ```"},{"path":"http://pkg.garrickadenbuie.com/epoxy/preview/pr26/index.html","id":"style-replaced-values","dir":"Preview > Pr26","previous_headings":"Example","what":"Style replaced values","title":"String Interpolation for R Markdown Documents","text":"can use epoxy_style_wrap() .transformer chunk option wrap evaluated R expression formating templating text. can use pre-set epoxy_style_bold(), epoxy_style_italic(), epoxy_style_code() style transformers. cars stopped 2 120 feet starting speed 4—120 mph.","code":"```{epoxy, .transformer = epoxy_style_bold()} All cars stopped between {min(cars$dist)} and {max(cars$dist)} feet from a starting speed of {min(cars$speed)}---{max(cars$speed)} ```"},{"path":"http://pkg.garrickadenbuie.com/epoxy/preview/pr26/index.html","id":"epoxy-chunks-are-vectorized","dir":"Preview > Pr26","previous_headings":"Example","what":"epoxy chunks are vectorized","title":"String Interpolation for R Markdown Documents","text":"Unlike inline R code, epoxy chunks vectorized. can something watch can advantage: “” apple “b” banana “c” coconut “d” donut can collapse fields automatically using epoxy_style_collapse() transformer. can choose vectors collapsed adding *, & | end expression. * collapses commas, e.g. {letters[1:3]*}. & collapses commas adds \" \" last two items | collapses commas adds \" \" last two items. first three letters , b, c. capitalized, , B C. ’re indexed 1, 2 3. can change separator entries last entry using sep, last _and _or specific arguments epoxy_style_collapse() function.","code":"```{epoxy} {1:4}. \"{letters[1:4]}\" is for {c(\"apple\", \"banana\", \"coconut\", \"donut\")} ``` ```{epoxy, .transformer = epoxy_style_collapse()} - The first three letters are {letters[1:3]*}. - When capitalized, they are {LETTERS[1:3]&}. - They're indexed by {1:3|}. ```"},{"path":"http://pkg.garrickadenbuie.com/epoxy/preview/pr26/index.html","id":"templating-with-epoxy-chunks","dir":"Preview > Pr26","previous_headings":"Example","what":"Templating with epoxy chunks","title":"String Interpolation for R Markdown Documents","text":"’s also possible create reusable template. Use ref.label chunk option reuse template using values data chunk option, can list data frame. Chevrolet Malibu gets 19 city 27 highway miles per gallon. Dodge Caravan gets 7 city 24 highway miles per gallon. Ford Expedition gets 11 city 17 highway miles per gallon.","code":"mpg <- data.frame(   manufacturer = c(\"Chevrolet\", \"Dodge\", \"Ford\"),   model = c(\"Malibu\", \"Caravan\", \"Expedition\"),   cty = c(19, 7, 11),   hwy = c(27, 24, 17) ) ```{epoxy car-name, eval=FALSE} - A {manufacturer} {model} gets {cty} city and {hwy} highway miles per gallon. ```  ```{epoxy ref.label=\"car-name\", data = mpg} ```"},{"path":"http://pkg.garrickadenbuie.com/epoxy/preview/pr26/index.html","id":"whisker-engine","dir":"Preview > Pr26","previous_headings":"","what":"Whisker Engine","title":"String Interpolation for R Markdown Documents","text":"Sometimes epoxy engine doesn’t quite deliver template power need. cases, can use whisker engine instead. Hello R User: just won $1000! Well, $600, taxes.","code":"```{r} contestant <- list(name = \"R User\", value = 1000, taxed = 600, in_ca = TRUE) ```  ```{whisker data = contestant, echo=FALSE} Hello {{name}}: You have just won ${{value}}! {{#in_ca}} Well, ${{taxed}}, after taxes. {{/in_ca}} ``` contestant <- list(name = \"R User\", value = 1000, taxed = 600, in_ca = TRUE)"},{"path":[]},{"path":"http://pkg.garrickadenbuie.com/epoxy/preview/pr26/index.html","id":"html-blocks","dir":"Preview > Pr26","previous_headings":"Raw Blocks","what":"HTML Blocks","title":"String Interpolation for R Markdown Documents","text":"Use epoxy_html block epoxy (glue) R HTML together. output raw HTML. default, expressions types blocks wrapped {{ }}, like whisker templates . Chevrolet Malibu Dodge Caravan Ford Expedition","code":"<ul> ```{epoxy_html, data = mpg}   <li><strong>{{manufacturer}}<\/strong> <em>{{model}}<\/em><\/li> ``` <\/ul>"},{"path":"http://pkg.garrickadenbuie.com/epoxy/preview/pr26/index.html","id":"latex-blocks","dir":"Preview > Pr26","previous_headings":"Raw Blocks","what":"LaTeX Blocks","title":"String Interpolation for R Markdown Documents","text":"Similarly, can also use epoxy_latex blocks epoxy R LaTeX together. default, expressions types blocks wrapped < >. R Markdown knitting LaTeX output, renders :","code":"\\begin{itemize} ```{epoxy_latex, data = mpg} \\item \\textbf{<manufacturer>} \\textit{<model>} gets <cty> city and <hwy> highway miles per gallon. ``` \\end{itemize} \\begin{itemize} \\item \\textbf{Chevrolet} \\textit{Malibu} gets 19 city and 27 highway miles per gallon. \\item \\textbf{Dodge} \\textit{Caravan} gets 7 city and 24 highway miles per gallon. \\item \\textbf{Ford} \\textit{Expedition} gets 11 city and 17 highway miles per gallon. \\end{itemize}"},{"path":"http://pkg.garrickadenbuie.com/epoxy/preview/pr26/news/index.html","id":"epoxy-0029000","dir":"Preview > Pr26 > News","previous_headings":"","what":"epoxy 0.0.2.9000","title":"Changelog","text":"epoxy’s knitr engine now epoxy glue. avoids name clash glue package, provides glue knitr engine similar functionality. epoxy also provides epoxy_html epoxy_latex knitr engines, although can still used via aliases glue_html glue_latex. (#21) epoxyHTML() now render elements IDs using # syntax, e.g. {{h3#name.author full_name}} create element (essentially) <h3 id=\"name\" class=\"author\">{{ full_name }}<\/h3> (#22). epoxy requires glue >= 1.5.0. Added new internal dataset, bechdel, containing details random sample ten movies received score 3 Bechdel Test (#24). epoxy’s style transformers can now chained via epoxy_style(). example use epoxy_style_bold() epoxy_style_collapse() replacement strings, can call epoxy_style(\"bold\", \"collapse\"). epoxy_style() accepts style function name, e.g. \"collapse\", function objet directly, e.g. epoxy_style_collapse, call style function, e.g. epoxy_style_collapse() (#26).","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/preview/pr26/news/index.html","id":"epoxy-002","dir":"Preview > Pr26 > News","previous_headings":"","what":"epoxy 0.0.2","title":"Changelog","text":"Added whisker engine uses whisker package instead glue. chunk option glue_data changed data. glue_html engine now uses {{ }} open/close delimiters. glue/whisker chunks now accept .envir chunk option containing environemnt, otherwise falling back knitr::knit_global() env.","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/preview/pr26/reference/bechdel.html","id":null,"dir":"Preview > Pr26 > Reference","previous_headings":"","what":"Top 10 Highest-Rated, Bechdel-Passing Movies — bechdel","title":"Top 10 Highest-Rated, Bechdel-Passing Movies — bechdel","text":"small dataset epoxy demonstrations top audience-rated movies pass Bechdel Test.","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/preview/pr26/reference/bechdel.html","id":"ref-usage","dir":"Preview > Pr26 > Reference","previous_headings":"","what":"Usage","title":"Top 10 Highest-Rated, Bechdel-Passing Movies — bechdel","text":"","code":"bechdel"},{"path":"http://pkg.garrickadenbuie.com/epoxy/preview/pr26/reference/bechdel.html","id":"format","dir":"Preview > Pr26 > Reference","previous_headings":"","what":"Format","title":"Top 10 Highest-Rated, Bechdel-Passing Movies — bechdel","text":"data frame 10 rows 18 variables: imdb_id IMDB Movie ID bechdel_rating Rating (0-3): 0 = unscored; 1 = least two (named) women ; 2 = talk ; 3 = something besides man. year Year title Title movie budget Budget $USD release year domgross Domestic gross $USD release year intgross International gross $USD release year plot Plot movie rated Moving rating, e.g. PG, PG-13, R, etc. language Language movie country Country movie produced imdb_rating IMDB rating movie, 0-10 director Director movie actors Major actors appearing movie genre Genre awards Awards won movie, text description runtime Movie runtime minutes poster URL movie poster image, sourced themoviedb.org. Poster images URLs ar provided TMDB API epoxy endorsed certified TMDB.","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/preview/pr26/reference/bechdel.html","id":"source","dir":"Preview > Pr26 > Reference","previous_headings":"","what":"Source","title":"Top 10 Highest-Rated, Bechdel-Passing Movies — bechdel","text":"TidyTuesday (2021-03-09), FiveThirtyEight, bechdeltest.com, themoviedb.org","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/preview/pr26/reference/epoxy-package.html","id":null,"dir":"Preview > Pr26 > Reference","previous_headings":"","what":"epoxy: String Interpolation for 'R Markdown' Documents — epoxy-package","title":"epoxy: String Interpolation for 'R Markdown' Documents — epoxy-package","text":"Experimental. String interpolation 'R Markdown' documents 'Shiny' apps.","code":""},{"path":[]},{"path":"http://pkg.garrickadenbuie.com/epoxy/preview/pr26/reference/epoxy-package.html","id":"author","dir":"Preview > Pr26 > Reference","previous_headings":"","what":"Author","title":"epoxy: String Interpolation for 'R Markdown' Documents — epoxy-package","text":"Maintainer: Garrick Aden-Buie garrick@adenbuie.com (ORCID)","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/preview/pr26/reference/epoxyHTML.html","id":null,"dir":"Preview > Pr26 > Reference","previous_headings":"","what":"Epoxy HTML Output for Shiny — epoxyHTML","title":"Epoxy HTML Output for Shiny — epoxyHTML","text":"Expermimental. glue-like output Shiny. epoxyHTML() lets use placeholders HTML \"{{height}}\", provided values server giving renderEpoxyHTML() height value.","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/preview/pr26/reference/epoxyHTML.html","id":"ref-usage","dir":"Preview > Pr26 > Reference","previous_headings":"","what":"Usage","title":"Epoxy HTML Output for Shiny — epoxyHTML","text":"","code":"epoxyHTML(   .id,   ...,   .class = NULL,   .class_item = NULL,   .container = \"div\",   .container_item = \"span\",   .placeholder = \"\",   .sep = \"\",   .open = \"{{\",   .close = \"}}\",   .na = \"\",   .trim = FALSE )"},{"path":"http://pkg.garrickadenbuie.com/epoxy/preview/pr26/reference/epoxyHTML.html","id":"arguments","dir":"Preview > Pr26 > Reference","previous_headings":"","what":"Arguments","title":"Epoxy HTML Output for Shiny — epoxyHTML","text":".id output id ... UI elements text (treated HTML), containing template variables. Use named values provide initial placeholder values. .class Classes added output div, addition .epoxy-html .class_item Classes added .container wrapping template variable. .container name HTML element used output element, default \"div\". .container_item name HTML element used template item, default \"span\". .placeholder Default placeholder template variable placeholder provided. .sep [character(1): ‘\"\"’] Separator used separate elements. .open Opening template variable delimiter .close Closing template variable delimiter .na [character(1): ‘NA’] Value replace NA values . NULL missing values propagated, NA result cause NA output. Otherwise value replaced value .na. .trim [logical(1): ‘TRUE’] Whether trim input template trim() .","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/preview/pr26/reference/epoxyHTML.html","id":"value","dir":"Preview > Pr26 > Reference","previous_headings":"","what":"Value","title":"Epoxy HTML Output for Shiny — epoxyHTML","text":"HTML object.","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/preview/pr26/reference/epoxyHTML.html","id":"html-markup","dir":"Preview > Pr26 > Reference","previous_headings":"","what":"HTML Markup","title":"Epoxy HTML Output for Shiny — epoxyHTML","text":"default, placeholders inserted <span> element UI, classes specified .class_item. epoxyHTML() also supports HTML markup syntax similar pug (HTML preprocessor). markup syntax, \"{{h3.example.basic%basic-three demo}}\" creates demo placeholder inside <h3 id=\"basic-three\" class=\"example basic\"><\/h3> tag. placeholder template string follows pattern {{<markup> <name>}}. markup syntax comes first, separated placeholder name space. HTML element first, followed classes prefixed . ID prefixed #. template markup can contain one element one ID, many classes can specified.","code":""},{"path":[]},{"path":"http://pkg.garrickadenbuie.com/epoxy/preview/pr26/reference/epoxyHTML.html","id":"ref-examples","dir":"Preview > Pr26 > Reference","previous_headings":"","what":"Examples","title":"Epoxy HTML Output for Shiny — epoxyHTML","text":"","code":"if (FALSE) { library(shiny)  ui <- fluidPage(   h2(\"epoxyHTML demo\"),   epoxy:::epoxyHTML(     'test',     fluidRow(       tags$div(         class = \"col-xs-4\",         selectInput(           inputId = \"thing\",           label = \"What is this {{color}} thing?\",           choices = c(\"apple\", \"banana\", \"coconut\", \"dolphin\")         )       ),       tags$div(         class = \"col-xs-4\",         selectInput(           inputId = \"color\",           label = \"What color is the {{thing}}?\",           c(\"red\", \"blue\", \"black\", \"green\", \"yellow\")         )       ),       tags$div(         class = \"col-xs-4\",         sliderInput(           inputId = \"height\",           label = \"How tall is the {{color}} {{thing}}?\",           value = 5,           min = 0,           max = 10,           step = 0.1,           post = \"ft\"         )       )     ),     tags$p(class = \"big\", \"The {{color}} {{thing}} is {{height}} feet tall.\"),     thing = \"THING\",     color = \"COLOR\",     height = \"HEIGHT\",     .class_item = \"inner\"   ),   tags$style(HTML(     '.big { font-size: 1.5em; }     .inner:not(.epoxy-item__placeholder) { background-color: rgba(254, 233, 105, 0.5)}     .epoxy-item__placeholder { color: #999999; }'   )) )  server <- function(input, output, session) {   output$test <- epoxy:::renderEpoxyHTML(     thing = input$thing,     color = input$color,     height = input$height   ) }  shinyApp(ui, server) }"},{"path":"http://pkg.garrickadenbuie.com/epoxy/preview/pr26/reference/epoxy_style.html","id":null,"dir":"Preview > Pr26 > Reference","previous_headings":"","what":"epoxy Style Transformers — epoxy_style","title":"epoxy Style Transformers — epoxy_style","text":"transformers provide additional automatic formatting template strings. designed used .transformer chunk option epoxy chunks. can use epoxy_style() chain several transformers together.","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/preview/pr26/reference/epoxy_style.html","id":"ref-usage","dir":"Preview > Pr26 > Reference","previous_headings":"","what":"Usage","title":"epoxy Style Transformers — epoxy_style","text":"","code":"epoxy_style(...)  epoxy_style_wrap(   before = \"**\",   after = \"**\",   transformer = glue::identity_transformer )  epoxy_style_bold(transformer = glue::identity_transformer)  epoxy_style_italic(transformer = glue::identity_transformer)  epoxy_style_code(transformer = glue::identity_transformer)  epoxy_style_collapse(   sep = \", \",   last = \"\",   last_and = \" and \",   last_or = \" or \",   sep_and = sep,   sep_or = sep,   transformer = glue::identity_transformer )"},{"path":"http://pkg.garrickadenbuie.com/epoxy/preview/pr26/reference/epoxy_style.html","id":"arguments","dir":"Preview > Pr26 > Reference","previous_headings":"","what":"Arguments","title":"epoxy Style Transformers — epoxy_style","text":"... list style functions, e.g. epoxy_style_bold name style function, e.g. \"bold\", call style function, e.g. epoxy_style_bold(). epoxy_style() chains style functions together, applying styles left right. example, epoxy_style(\"bold\", \"collapse\") results replaced strings emboldened collapsed, e.g. **** **b**. hand, epoxy_style(\"collapse\", \"bold\")  collapse vector embolden entire string. , epoxy_style_wrap(), characters added variables template string. transformer transformer apply replacement string. argument used chaining transformer functions. providing function argument can apply additional transformation current transformation. nearly cases, can let epoxy_style() handle . chain ends glue::identity_transformer() used transformer. sep, sep_and, sep_or separator use joining vector elements variable ends *, &, | respectively. default, \", \". last, last_and, last_or Additional text added sep last element variable ends *, &, | respectively.","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/preview/pr26/reference/epoxy_style.html","id":"value","dir":"Preview > Pr26 > Reference","previous_headings":"","what":"Value","title":"epoxy Style Transformers — epoxy_style","text":"function text envir suitable .transformerargument glue::glue().","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/preview/pr26/reference/epoxy_style.html","id":"functions","dir":"Preview > Pr26 > Reference","previous_headings":"","what":"Functions","title":"epoxy Style Transformers — epoxy_style","text":"epoxy_style_wrap: Wrap variables epoxy_style_bold: Embolden variables using markdown ** syntax epoxy_style_italic: Italicize variables using markdown _ syntax epoxy_style_code: Code format variables using markdown backtick syntax epoxy_style_collapse: Collapse vector variables.","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/preview/pr26/reference/epoxy_style.html","id":"ref-examples","dir":"Preview > Pr26 > Reference","previous_headings":"","what":"Examples","title":"epoxy Style Transformers — epoxy_style","text":"","code":"glue::glue(\"{letters[1:3]&}\", .transformer = epoxy_style(\"bold\", \"collapse\")) #> **a**, **b** and **c** glue::glue(\"{letters[1:3]&}\", .transformer = epoxy_style(\"collapse\", \"bold\")) #> **a, b and c**"},{"path":[]},{"path":"http://pkg.garrickadenbuie.com/epoxy/preview/pr26/reference/index.html","id":null,"dir":"Preview > Pr26 > Reference","previous_headings":"","what":"Function reference","title":"Function reference","text":"epoxyHTML() Epoxy HTML Output Shiny renderEpoxyHTML() Render Epoxy Output","code":""},{"path":[]},{"path":"http://pkg.garrickadenbuie.com/epoxy/preview/pr26/reference/index.html","id":null,"dir":"Preview > Pr26 > Reference","previous_headings":"","what":"Function reference","title":"Function reference","text":"epoxy_style() epoxy_style_wrap() epoxy_style_bold() epoxy_style_italic() epoxy_style_code() epoxy_style_collapse() epoxy Style Transformers","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/preview/pr26/reference/index.html","id":"example-datasets","dir":"Preview > Pr26 > Reference","previous_headings":"","what":"Example Datasets","title":"Function reference","text":"Interesting datasets can help explore, learn, practice using epoxy.","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/preview/pr26/reference/index.html","id":null,"dir":"Preview > Pr26 > Reference","previous_headings":"","what":"Function reference","title":"Function reference","text":"bechdel Top 10 Highest-Rated, Bechdel-Passing Movies","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/preview/pr26/reference/renderEpoxyHTML.html","id":null,"dir":"Preview > Pr26 > Reference","previous_headings":"","what":"Render Epoxy Output — renderEpoxyHTML","title":"Render Epoxy Output — renderEpoxyHTML","text":"Server-side render function used provide values template items. Use named values matching template variable names associated epoxyHTML().","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/preview/pr26/reference/renderEpoxyHTML.html","id":"ref-usage","dir":"Preview > Pr26 > Reference","previous_headings":"","what":"Usage","title":"Render Epoxy Output — renderEpoxyHTML","text":"","code":"renderEpoxyHTML(..., .list = NULL, env = parent.frame(), outputArgs = list())"},{"path":"http://pkg.garrickadenbuie.com/epoxy/preview/pr26/reference/renderEpoxyHTML.html","id":"arguments","dir":"Preview > Pr26 > Reference","previous_headings":"","what":"Arguments","title":"Render Epoxy Output — renderEpoxyHTML","text":"... Named values corresponding template variables created associated epoxyHTML() UI element. .list named list shiny::reactiveValues() list names corresponding template variables created associated epoxyHTML() UI element. env environment evaluate ... outputArgs list arguments passed implicit call epoxyHTML() renderEpoxyHTML used interactive R Markdown document.","code":""},{"path":[]},{"path":"http://pkg.garrickadenbuie.com/epoxy/reference/bechdel.html","id":null,"dir":"Reference","previous_headings":"","what":"Top 10 Highest-Rated, Bechdel-Passing Movies — bechdel","title":"Top 10 Highest-Rated, Bechdel-Passing Movies — bechdel","text":"small dataset epoxy demonstrations top audience-rated movies pass Bechdel Test.","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/reference/bechdel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Top 10 Highest-Rated, Bechdel-Passing Movies — bechdel","text":"","code":"bechdel"},{"path":"http://pkg.garrickadenbuie.com/epoxy/reference/bechdel.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Top 10 Highest-Rated, Bechdel-Passing Movies — bechdel","text":"data frame 10 rows 18 variables: imdb_id IMDB Movie ID bechdel_rating Rating (0-3): 0 = unscored; 1 = least two (named) women ; 2 = talk ; 3 = something besides man. year Year title Title movie budget Budget $USD release year domgross Domestic gross $USD release year intgross International gross $USD release year plot Plot movie rated Moving rating, e.g. PG, PG-13, R, etc. language Language movie country Country movie produced imdb_rating IMDB rating movie, 0-10 director Director movie actors Major actors appearing movie genre Genre awards Awards won movie, text description runtime Movie runtime minutes poster URL movie poster image, sourced themoviedb.org. Poster images URLs ar provided TMDB API epoxy endorsed certified TMDB.","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/reference/bechdel.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Top 10 Highest-Rated, Bechdel-Passing Movies — bechdel","text":"TidyTuesday (2021-03-09), FiveThirtyEight, bechdeltest.com, themoviedb.org","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/reference/engine_pick.html","id":null,"dir":"Reference","previous_headings":"","what":"Pick an engine-specific value — engine_pick","title":"Pick an engine-specific value — engine_pick","text":"Set different values used based current epoxy knitr engine (one md, html, latex). engine-specific value used inside epoxy knitr chunks epoxy functions matching source syntax: epoxy() (md), epoxy_html() (html), epoxy_latex() (latex).","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/reference/engine_pick.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pick an engine-specific value — engine_pick","text":"","code":"engine_pick(md, html = md, latex = md)"},{"path":"http://pkg.garrickadenbuie.com/epoxy/reference/engine_pick.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pick an engine-specific value — engine_pick","text":"md, html, latex value use markdown, HTML, LaTeX context.","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/reference/engine_pick.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pick an engine-specific value — engine_pick","text":"value md, html latex depending epoxy knitr currently evaluated.","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/reference/engine_pick.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pick an engine-specific value — engine_pick","text":"","code":"# Markdown and HTML are okay with bare `$` character, # but we need to escape it in LaTeX. engine_pick(md = \"$\", latex = \"\\\\$\") #> [1] \"$\""},{"path":"http://pkg.garrickadenbuie.com/epoxy/reference/epoxy-package.html","id":null,"dir":"Reference","previous_headings":"","what":"epoxy: String Interpolation for 'R Markdown' Documents — epoxy-package","title":"epoxy: String Interpolation for 'R Markdown' Documents — epoxy-package","text":"Extra strength 'glue' data-driven templating. String interpolation 'R Markdown' documents 'Shiny' apps, built 'glue' 'whisker' packages.","code":""},{"path":[]},{"path":"http://pkg.garrickadenbuie.com/epoxy/reference/epoxy-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"epoxy: String Interpolation for 'R Markdown' Documents — epoxy-package","text":"Maintainer: Garrick Aden-Buie garrick@adenbuie.com (ORCID)","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/reference/epoxy.html","id":null,"dir":"Reference","previous_headings":"","what":"Epoxy string interpolation — epoxy","title":"Epoxy string interpolation — epoxy","text":"functions power knitr chunk engines wrappers around glue::glue(), extra conveniences provided epoxy.","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/reference/epoxy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Epoxy string interpolation — epoxy","text":"","code":"epoxy(   ...,   .data = NULL,   .style = NULL,   .sep = \"\",   .envir = parent.frame(),   .open = \"{\",   .close = \"}\",   .na = \"\",   .null = \"\",   .comment = character(),   .literal = FALSE,   .trim = FALSE,   .transformer = NULL )  epoxy_html(   ...,   .data = NULL,   .style = NULL,   .sep = \"\",   .envir = parent.frame(),   .open = \"{{\",   .close = \"}}\",   .na = \"\",   .null = \"\",   .comment = \"\",   .literal = FALSE,   .trim = FALSE,   .transformer = NULL )  epoxy_latex(   ...,   .data = NULL,   .style = NULL,   .sep = \"\",   .envir = parent.frame(),   .open = \"<\",   .close = \">\",   .na = \"\",   .null = \"\",   .comment = \"\",   .literal = FALSE,   .trim = FALSE,   .transformer = NULL )"},{"path":"http://pkg.garrickadenbuie.com/epoxy/reference/epoxy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Epoxy string interpolation — epoxy","text":"... [expressions] Unnamed arguments taken expression string(s) format. Multiple inputs concatenated together formatting. Named arguments taken temporary variables available substitution. .data data set .style epoxy_style() .sep [character(1): ‘\"\"’] Separator used separate elements. .envir [environment: parent.frame()] Environment evaluate expression . Expressions evaluated left right. .x environment, expressions evaluated environment .envir ignored. NULL passed, equivalent emptyenv(). .open [character(1): ‘\\{’] opening delimiter around template variable expression. Doubling full delimiter escapes . .close [character(1): ‘\\}’] closing delimiter around template variable expression. Doubling full delimiter escapes . .na [character(1): ‘NA’] Value replace NA values . NULL missing values propagated, NA result cause NA output. Otherwise value replaced value .na. .null [character(1): ‘character()’] Value replace NULL values . character() whole output character(). NULL NULL values dropped (paste0()). Otherwise value replaced value .null. .comment [character(1): ‘#’] Value use comment character. .literal [boolean(1): ‘FALSE’] Whether treat single double quotes, backticks, comments regular characters (vs. syntactic elements), parsing expression string. Setting .literal = TRUE probably makes sense combination custom .transformer, case glue_col(). Regard argument (especially, name) experimental. .trim [logical(1): ‘TRUE’] Whether trim input template trim() . .transformer [function] function taking three parameters code, envir data used transform output block , , evaluation. example transformers see vignette(\"transformers\").","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/reference/epoxy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Epoxy string interpolation — epoxy","text":"Returns transformed string, using glue::glue() additional transformers provided .style argument epoxy().","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/reference/epoxy.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Epoxy string interpolation — epoxy","text":"epoxy(): super glue() epoxy_html(): super glue() HTML epoxy_latex(): super glue() LaTeX","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/reference/epoxy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Epoxy string interpolation — epoxy","text":"","code":"movie <- bechdel[1, ] movies <- bechdel[2:4, ]  epoxy(\"*{movie$title}* ({movie$year}) was directed by {movie$director}.\") #> *Inception* (2010) was directed by Christopher Nolan. epoxy(\"- *{movies$title}* ({movies$year}) was directed by {movies$director}.\") #> - *Back to the Future Part II* (1989) was directed by Robert Zemeckis. #> - *The Simpsons Movie* (2007) was directed by David Silverman. #> - *Another Year* (2010) was directed by Mike Leigh.  epoxy(\"*{title}* ({year}) was directed by {director}.\", .data = movie) #> *Inception* (2010) was directed by Christopher Nolan. epoxy(\"- *{title}* ({year}) was directed by {director}.\", .data = movies) #> - *Back to the Future Part II* (1989) was directed by Robert Zemeckis. #> - *The Simpsons Movie* (2007) was directed by David Silverman. #> - *Another Year* (2010) was directed by Mike Leigh.  epoxy(   \"{title} ({year}) was directed by {director}.\",   .data = movie,   .style = \"bold\" ) #> **Inception** (**2010**) was directed by **Christopher Nolan**.  epoxy(   \"I'd be happy to watch { title| }.\",   .data = movies,   .style = c(\"italic\", \"collapse\") ) #> I'd be happy to watch _Back to the Future Part II_, _The Simpsons Movie_ or _Another Year_.  epoxy(   \"They were directed by { director& }.\",   .data = movies,   .style = c(\"collapse\", \"bold\") ) #> They were directed by **Robert Zemeckis, David Silverman and Mike Leigh**.  epoxy(\"The budget for *{title}* was {.dollar budget}.\", .data = movie) #> The budget for *Inception* was $160,000,000.  epoxy_html(   \"I'd be happy to watch {{ title| }}.\",   .data = movies,   .style = c(\"italic\", \"collapse\") ) #> I'd be happy to watch <em>Back to the Future Part II<\/em>, <em>The Simpsons Movie<\/em> or <em>Another Year<\/em>.  epoxy_latex(   \"I'd be happy to watch < title| >.\",   .data = movies,   .style = c(\"italic\", \"collapse\") ) #> I'd be happy to watch \\emph{Back to the Future Part II}, \\emph{The Simpsons Movie} or \\emph{Another Year}."},{"path":"http://pkg.garrickadenbuie.com/epoxy/reference/epoxyHTML.html","id":null,"dir":"Reference","previous_headings":"","what":"Epoxy HTML Output for Shiny — epoxyHTML","title":"Epoxy HTML Output for Shiny — epoxyHTML","text":"Expermimental. glue-like output Shiny. epoxyHTML() lets use placeholders HTML \"{{height}}\", provided values server giving renderEpoxyHTML() height value.","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/reference/epoxyHTML.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Epoxy HTML Output for Shiny — epoxyHTML","text":"","code":"epoxyHTML(   .id,   ...,   .class = NULL,   .class_item = NULL,   .container = \"div\",   .container_item = \"span\",   .placeholder = \"\",   .sep = \"\",   .open = \"{{\",   .close = \"}}\",   .na = \"\",   .null = \"\",   .literal = FALSE,   .trim = FALSE )"},{"path":"http://pkg.garrickadenbuie.com/epoxy/reference/epoxyHTML.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Epoxy HTML Output for Shiny — epoxyHTML","text":".id output id ... UI elements text (treated HTML), containing template variables. Use named values provide initial placeholder values. .class Classes added output div, addition .epoxy-html .class_item Classes added .container wrapping template variable. .container name HTML element used output element, default \"div\". .container_item name HTML element used template item, default \"span\". .placeholder Default placeholder template variable placeholder provided. .sep [character(1): ‘\"\"’] Separator used separate elements. .open Opening template variable delimiter .close Closing template variable delimiter .na [character(1): ‘NA’] Value replace NA values . NULL missing values propagated, NA result cause NA output. Otherwise value replaced value .na. .null [character(1): ‘character()’] Value replace NULL values . character() whole output character(). NULL NULL values dropped (paste0()). Otherwise value replaced value .null. .literal [boolean(1): ‘FALSE’] Whether treat single double quotes, backticks, comments regular characters (vs. syntactic elements), parsing expression string. Setting .literal = TRUE probably makes sense combination custom .transformer, case glue_col(). Regard argument (especially, name) experimental. .trim [logical(1): ‘TRUE’] Whether trim input template trim() .","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/reference/epoxyHTML.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Epoxy HTML Output for Shiny — epoxyHTML","text":"HTML object.","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/reference/epoxyHTML.html","id":"html-markup","dir":"Reference","previous_headings":"","what":"HTML Markup","title":"Epoxy HTML Output for Shiny — epoxyHTML","text":"default, placeholders inserted <span> element UI, classes specified .class_item. epoxyHTML() also supports HTML markup syntax similar pug (HTML preprocessor). markup syntax, \"{{h3.example.basic%basic-three demo}}\" creates demo placeholder inside <h3 id=\"basic-three\" class=\"example basic\"><\/h3> tag. placeholder template string follows pattern {{<markup> <name>}}. markup syntax comes first, separated placeholder name space. HTML element first, followed classes prefixed . ID prefixed #. template markup can contain one element one ID, many classes can specified.","code":""},{"path":[]},{"path":"http://pkg.garrickadenbuie.com/epoxy/reference/epoxyHTML.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Epoxy HTML Output for Shiny — epoxyHTML","text":"","code":"ui <- shiny::fluidPage(   shiny::h2(\"epoxyHTML demo\"),   epoxyHTML(     .id = 'test',     .class_item = \"inner\",     shiny::fluidRow(       shiny::tags$div(         class = \"col-xs-4\",         shiny::selectInput(           inputId = \"thing\",           label = \"What is this {{color}} thing?\",           choices = c(\"apple\", \"banana\", \"coconut\", \"dolphin\")         )       ),       shiny::tags$div(         class = \"col-xs-4\",         shiny::selectInput(           inputId = \"color\",           label = \"What color is the {{thing}}?\",           c(\"red\", \"blue\", \"black\", \"green\", \"yellow\")         )       ),       shiny::tags$div(         class = \"col-xs-4\",         shiny::sliderInput(           inputId = \"height\",           label = \"How tall is the {{color}} {{thing}}?\",           value = 5,           min = 0,           max = 10,           step = 0.1,           post = \"ft\"         )       )     ),     shiny::tags$p(class = \"big\", \"The {{color}} {{thing}} is {{height}} feet tall.\"),     # Default values for placeholders above.     thing = \"THING\",     color = \"COLOR\",     height = \"HEIGHT\"   ),   shiny::tags$style(shiny::HTML(     '.big { font-size: 1.5em; }     .inner:not(.epoxy-item__placeholder) { background-color: rgba(254, 233, 105, 0.5)}     .epoxy-item__placeholder { color: #999999; }'   )) )  server <- function(input, output, session) {   output$test <- renderEpoxyHTML(     thing = input$thing,     color = input$color,     height = input$height   ) }  if (interactive()) {   shiny::shinyApp(ui, server) }"},{"path":"http://pkg.garrickadenbuie.com/epoxy/reference/epoxy_output_mustache.html","id":null,"dir":"Reference","previous_headings":"","what":"Epoxy HTML Mustache Template — epoxy_output_mustache","title":"Epoxy HTML Mustache Template — epoxy_output_mustache","text":"Shiny output uses mustache templating render HTML. Mustache powerful template language minimal internal logic. advantage epoxy_output_mustache() parts HTML can templated -- including element attributes -- whereas epoxyHTML() requires dynamic template variables appear text portion UI.","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/reference/epoxy_output_mustache.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Epoxy HTML Mustache Template — epoxy_output_mustache","text":"","code":"epoxy_output_mustache(id, ..., sep = \"\", container = \"div\")"},{"path":"http://pkg.garrickadenbuie.com/epoxy/reference/epoxy_output_mustache.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Epoxy HTML Mustache Template — epoxy_output_mustache","text":"id ID output. ... Character strings HTML htmltools::tags. elements unnamed. sep separator used concatenate elements .... container character tag name, e.g. \"div\" \"span\", function returns htmltools::tag().","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/reference/epoxy_output_mustache.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Epoxy HTML Mustache Template — epoxy_output_mustache","text":"Returns Shiny output UI element.","code":""},{"path":[]},{"path":"http://pkg.garrickadenbuie.com/epoxy/reference/epoxy_output_mustache.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Epoxy HTML Mustache Template — epoxy_output_mustache","text":"","code":"if (interactive()) {   library(shiny)   library(epoxy)    ui <- shiny::fluidPage(     shiny::fluidRow(       shiny::column(         width = 6,         epoxy_output_mustache(           id = \"template\",           h2(class = \"{{heading_class}}\", \"Hello, {{name}}!\"),           \"{{#fruits}}\",           p(\"Your favorite fruits are...\"),           tags$ul(HTML(\"{{#fruit}}<li>{{.}}<\/li>{{/fruit}}\")),           \"{{/fruits}}\",           \"{{^fruits}}<p>Do you have any favorite fruits?<\/p>{{/fruits}}\"         )       ),       shiny::column(         width = 6,         h2(\"Inputs\"),         textInput(\"name\", \"Your name\", \"user\"),         textInput(\"fruits\", \"Favorite fruits\", placeholder = \"apple, banana\"),         helpText(\"Enter a comma-separated list of fruits.\")       )     )   )    server <- function(input, output, session) {     output$template <- renderEpoxyHTML(       name = input$name,       heading_class = if (nzchar(input$name) && input$name != \"user\") {         \"text-success\"       },       fruits = if (nzchar(input$fruits)) {         list(fruit = strsplit(input$fruits, \"\\\\s*,\\\\s*\")[[1]])       }     )   }    shinyApp(ui, server) }"},{"path":"http://pkg.garrickadenbuie.com/epoxy/reference/epoxy_style.html","id":null,"dir":"Reference","previous_headings":"","what":"epoxy Style Transformers — epoxy_style","title":"epoxy Style Transformers — epoxy_style","text":"transformers provide additional automatic formatting template strings. designed used .transformer chunk option epoxy chunks. can use epoxy_style() chain several transformers together. epoxy_style() individual epoxy style functions can used epoxy, epoxy_html epoxy_latex chunks choose correct engine .","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/reference/epoxy_style.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"epoxy Style Transformers — epoxy_style","text":"","code":"epoxy_style(..., engine = NULL, syntax = lifecycle::deprecated())  epoxy_style_default(..., engine = NULL, syntax = lifecycle::deprecated())  epoxy_style_wrap(   before = \"**\",   after = before,   engine = NULL,   transformer = glue::identity_transformer,   syntax = lifecycle::deprecated() )  epoxy_style_bold(engine = NULL, transformer = glue::identity_transformer)  epoxy_style_italic(engine = NULL, transformer = glue::identity_transformer)  epoxy_style_apply(.f = identity, ..., transformer = glue::identity_transformer)  epoxy_style_code(engine = NULL, transformer = glue::identity_transformer)  epoxy_style_collapse(   sep = \", \",   last = sep,   language = NULL,   ...,   transformer = glue::identity_transformer )"},{"path":"http://pkg.garrickadenbuie.com/epoxy/reference/epoxy_style.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"epoxy Style Transformers — epoxy_style","text":"... list style functions, e.g. epoxy_style_bold name style function, e.g. \"bold\", call style function, e.g. epoxy_style_bold(). epoxy_style() chains style functions together, applying styles left right. example, epoxy_style(\"bold\", \"collapse\") results replaced strings emboldened collapsed, e.g. **** **b**. hand, epoxy_style(\"collapse\", \"bold\")  collapse vector embolden entire string. epoxy_style_apply(), ... passed underlying call underlying function call. epoxy_style_collapse(), ... ignored. engine One \"markdown\" (\"md\"), \"html\", \"latex\". default chosen based engine chunk style function called, according option epoxy.engine. Caution: invalid options silently ignored, falling back \"markdown\". syntax Use engine instead. , epoxy_style_wrap(), characters added variables template string. transformer transformer apply replacement string. argument used chaining transformer functions. providing function argument can apply additional transformation current transformation. nearly cases, can let epoxy_style() handle . chain ends glue::identity_transformer() used transformer. .f function, function name purrr::map()-style inline function. sep, last separator use joining vector elements expression ends *. Elements separated sep, except last two elements, use last. language epoxy_style_collapse(), language passed ::() ::() choose correct /phrase spacing language. default, follow system language. See ::and_languages supported languages.","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/reference/epoxy_style.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"epoxy Style Transformers — epoxy_style","text":"function text envir suitable .transformer argument glue::glue().","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/reference/epoxy_style.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"epoxy Style Transformers — epoxy_style","text":"epoxy_style(): Construct epoxy styler, .k.. glue transformer use epoxy() glue::glue(). epoxy_style_default(): Set default epoxy .style epoxy engines subset engines. epoxy_style_wrap(): Wrap variables epoxy_style_bold(): Embolden variables using ** markdown, <strong> HTML, \\textbf{} LaTeX epoxy_style_italic(): Italicize variables using _ markdown, <em> HTML, \\emph{} LaTeX epoxy_style_apply(): Apply function replacement expressions epoxy_style_code(): Code format variables using `` markdown, <code> HTML, \\texttt{} LaTeX epoxy_style_collapse(): Collapse vector variables","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/reference/epoxy_style.html","id":"output-specific-styling","dir":"Reference","previous_headings":"","what":"Output-specific styling","title":"epoxy Style Transformers — epoxy_style","text":"epoxy_style_ functions attempt use correct engine styling replacement text markdown, HTML LaTeX. choice driven chunk engine styling function used. epoxy engine corresponds markdown, epoxy_html HTML, epoxy_latex LaTeX. Automatic engine selection works epoxy style functions used epoxy knitr engines knitr rendering process. used outside context, can choose desired engine setting engine one \"markdown\", \"html\" \"latex\".","code":""},{"path":[]},{"path":"http://pkg.garrickadenbuie.com/epoxy/reference/epoxy_style.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"epoxy Style Transformers — epoxy_style","text":"","code":"glue::glue(\"{letters[1:3]&}\", .transformer = epoxy_style(\"bold\", \"collapse\")) #> **a**, **b** and **c** glue::glue(\"{letters[1:3]&}\", .transformer = epoxy_style(\"collapse\", \"bold\")) #> **a, b and c**  # In an epoxy_html chunk... # Note that you don't have to set `engine = \"html\"`, it just knows glue::glue(   \"{letters[1:3]&}\",   .transformer = epoxy_style(\"bold\", \"collapse\", engine = \"html\") ) #> <strong>a<\/strong>, <strong>b<\/strong> and <strong>c<\/strong>  # Or in an epoxy_latex chunk... glue::glue(   \"{letters[1:3]&}\",   .transformer = epoxy_style(\"bold\", \"collapse\", engine = \"latex\") ) #> \\textbf{a}, \\textbf{b} and \\textbf{c}  # Other Transfomers ----  # Apply `format()` to all replacements number <- 1.234234234 glue::glue(   \"{fmt(number, 'number')}\",   .transformer = epoxy_style_format(     number = scales::label_number(accuracy = 0.01)   ) ) #> 1.23  # Apply _any_ function to all replacements glue::glue(   \"{number}\",   .transformer = epoxy_style_apply(round, digits = 0) ) #> 1  glue::glue(   \"{number}\",   .transformer = epoxy_style(     epoxy_style_apply(~ .x * 100),     epoxy_style_apply(round, digits = 2),     epoxy_style_apply(~ paste0(.x, \"%\"))   ) ) #> 123.42%"},{"path":"http://pkg.garrickadenbuie.com/epoxy/reference/epoxy_style_format.html","id":null,"dir":"Reference","previous_headings":"","what":"Style replacements with inline formatting — epoxy_style_format","title":"Style replacements with inline formatting — epoxy_style_format","text":"function experimental attempt inline formatting, likely removed epoxy favor epoxy_style_inline(). Makes available label_ functions scales package within inline format function, fmt(). apply formatting, wrap embraced expressions fmt(expr, label), label name labeller function scales (without leading label_), e.g. \"dollar\" \"label_dollar\" scales::label_dollar(). Short label forms exist labellers, e.g. \"$\" \"dollar\". See full listing table .   standard inline R code R Markdown, can write following:   Airbnb includes listings 10^5 cities 220 countries around 4.12 × 10^6 hosts. average guest stays 4.326 nights rate 184.952 per night. Using epoxy light-weight fmt() function epoxy_style_format(), can improve readability formatting interwoven numbers.   Airbnb includes listings 100,000 cities 220 countries around 4.1M hosts. average guest stays 4.3 nights rate $185 per night.","code":"```{r} # Airbnb stats that may not be completely accurate airbnb <- list(  countries = 220,  cities = 1e5,  avg_stay = 4.326,  avg_cost = 184.952,  hosts = 4.12e6 ) ``` * Airbnb includes listings in `r airbnb$cities` cities   in `r airbnb$countries` countries   from around `r airbnb$hosts` hosts.   The average guest stays `r airbnb$avg_stay` nights   at a rate of `r airbnb$avg_cost` per night. ```{r my_style, echo = FALSE} # Define number/dollar styles to apply consistently my_style <- epoxy_style_format(  dollar = scales::label_dollar(accuracy = 1),  number = scales::label_number(    accuracy = 0.1,    scale_cut = scales::cut_short_scale()  ) ) ```  ```{epoxy epoxy_style = my_style} * Airbnb includes listings in {fmt(airbnb$cities, \",\")} cities   in {fmt(airbnb$countries, \"auto\")} countries   from around {fmt(airbnb$hosts, \"#\")} hosts.   The average guest stays {fmt(airbnb$avg_stay, \"#\")} nights   at a rate of {fmt(airbnb$avg_cost, \"$\")} per night. ```"},{"path":[]},{"path":"http://pkg.garrickadenbuie.com/epoxy/reference/epoxy_style_format.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Style replacements with inline formatting — epoxy_style_format","text":"","code":"epoxy_style_format(   bytes = scales::label_bytes(),   date = function(x) format(x, format = \"%F\"),   time = function(x) format(x, format = \"%T\"),   datetime = function(x) format(x, format = \"%F %T\"),   dollar = scales::label_dollar(),   log = scales::label_log(),   number = scales::label_number(),   comma = scales::label_comma(),   number_auto = scales::label_number_auto(),   ordinal = scales::label_ordinal(),   parse = scales::label_parse(),   percent = scales::label_percent(),   pvalue = scales::label_pvalue(),   scientific = scales::label_scientific(),   wrap = scales::label_wrap(width = 80),   uppercase = toupper,   lowercase = tolower,   titlecase = tools::toTitleCase,   ...,   transformer = glue::identity_transformer )"},{"path":"http://pkg.garrickadenbuie.com/epoxy/reference/epoxy_style_format.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Style replacements with inline formatting — epoxy_style_format","text":"bytes function apply label \"bytes\". Default scales::label_bytes(). date function apply label \"date\" \"d\". Default function(). time function apply label \"time\" \"dt\". Default function(). datetime function apply label \"datetime\" \"dttm\". Default function(). dollar function apply label \"dollar\" \"$\". Default scales::label_dollar(). log function apply label \"log\". Default scales::label_log(). number function apply label \"number\" \"#\". Default scales::label_number(). comma function apply label \"comma\" \",\". Default scales::label_comma(). number_auto function apply label \"number_auto\", \"\", \"auto\". Default scales::label_number_auto(). ordinal function apply label \"ordinal\" \"o\". Default scales::label_ordinal(). parse function apply label \"parse\". Default scales::label_parse(). percent function apply label \"percent\", \"pct\", \"%\". Default scales::label_percent(). pvalue function apply label \"pvalue\" \"p\". Default scales::label_pvalue(). scientific function apply label \"scientific\" \"si\". Default scales::label_scientific(). wrap function apply label \"wrap\". Default scales::label_wrap(). uppercase function apply label \"uppercase\" \"uc\". Default toupper(). lowercase function apply label \"lowercase\" \"lc\". Default tolower(). titlecase function apply label \"titlecase\" \"tc\". Default tools::toTitleCase(). ... Additional formatting functions named arguments. name argument ... determines label value associated formatter fmt(). example, providing url = utils::URLencode allow apply URL-encoding formatting using fmt(expr, \"url\"). transformer transformer apply replacement string. argument used chaining transformer functions. providing function argument can apply additional transformation current transformation. nearly cases, can let epoxy_style() handle . chain ends glue::identity_transformer() used transformer.","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/reference/epoxy_style_format.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Style replacements with inline formatting — epoxy_style_format","text":"function text envir suitable .transformer argument glue::glue().","code":""},{"path":[]},{"path":"http://pkg.garrickadenbuie.com/epoxy/reference/epoxy_style_format.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Style replacements with inline formatting — epoxy_style_format","text":"","code":"revenue <- 0.2123 sales <- 42000.134 glue::glue(   '{fmt(revenue, \"%\")} of revenue generates {fmt(sales, \"$\")} in profits.',   .transformer = epoxy_style_format() ) #> 21% of revenue generates $42,000.13 in profits.  # To set labeller options, provide the label calls glue::glue(   '{fmt(revenue, \"%\")} of revenue generates {fmt(sales, \"$\")} in profits.',   .transformer = epoxy_style_format(     percent = scales::label_percent(accuracy = 0.1),     dollar = scales::label_dollar(accuracy = 10)   ) ) #> 21.2% of revenue generates $42,000 in profits.  # Add your own formatting functions search <- \"why are cats scared of cucumbers\" glue::glue(   '<https://example.com?q={fmt(search, \"url\")}>',   .transformer = epoxy_style_format(     url = utils::URLencode   ) ) #> <https://example.com?q=why%20are%20cats%20scared%20of%20cucumbers>"},{"path":"http://pkg.garrickadenbuie.com/epoxy/reference/epoxy_style_html.html","id":null,"dir":"Reference","previous_headings":"","what":"Concise syntax for expressions inside HTML elements — epoxy_style_html","title":"Concise syntax for expressions inside HTML elements — epoxy_style_html","text":"epoxy_style_html() provides pug- like syntax expressions HTML wrapped HTML elements.","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/reference/epoxy_style_html.html","id":"syntax","dir":"Reference","previous_headings":"","what":"Syntax","title":"Concise syntax for expressions inside HTML elements — epoxy_style_html","text":"can specify HTML element id class text expression placed. template specify element using syntax , followed R expression, separated space:   example, place expression <li> element id = \"food\" class = \"fruit\", write   item HTML template optional: specific HTML element desired, element name must first. element specified, default set element argument epoxy_style_html() used. IDs specified using #<id> one ID may present Classes written using .<class> many classes desired allowed. expression vector, element container used item vector.","code":"{{ [<element>][#<id> | .<class>...] expr }} {{ li#food.fruit fruit_name }}"},{"path":"http://pkg.garrickadenbuie.com/epoxy/reference/epoxy_style_html.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Concise syntax for expressions inside HTML elements — epoxy_style_html","text":"","code":"epoxy_style_html(   class = NULL,   element = \"span\",   transformer = glue::identity_transformer )"},{"path":"http://pkg.garrickadenbuie.com/epoxy/reference/epoxy_style_html.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Concise syntax for expressions inside HTML elements — epoxy_style_html","text":"class [character()] Additional classes added inline HTML element. element [character() default HTML element tag name used element specified expression. transformer transformer apply replacement string. argument used chaining transformer functions. providing function argument can apply additional transformation current transformation. nearly cases, can let epoxy_style() handle . chain ends glue::identity_transformer() used transformer.","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/reference/epoxy_style_html.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Concise syntax for expressions inside HTML elements — epoxy_style_html","text":"function text envir suitable .transformer argument glue::glue().","code":""},{"path":[]},{"path":"http://pkg.garrickadenbuie.com/epoxy/reference/epoxy_style_html.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Concise syntax for expressions inside HTML elements — epoxy_style_html","text":"","code":"epoxy_html(\"<ul>{{ li letters[1:3] }}<\/ul>\") #> <ul><li>a<\/li><li>b<\/li><li>c<\/li><\/ul> epoxy_html(\"<ul>{{ li.alpha letters[1:3] }}<\/ul>\") #> <ul><li class=\"alpha\">a<\/li><li class=\"alpha\">b<\/li><li class=\"alpha\">c<\/li><\/ul> epoxy_html(\"<ul>{{ li#my-letter letters[7] }}<\/ul>\") #> <ul><li id=\"my-letter\">g<\/li><\/ul>  # The default element is used if no element is directly requested epoxy_html(\"My name starts with {{ .name-letter letters[7] }}\") #> My name starts with <span class=\"name-letter\">g<\/span>  epoxy_html(   \"{{ h3#title title }}\",   title = \"Epoxy Style for HTML\" ) #> <h3 id=\"title\">Epoxy Style for HTML<\/h3>"},{"path":"http://pkg.garrickadenbuie.com/epoxy/reference/epoxy_style_inline.html","id":null,"dir":"Reference","previous_headings":"","what":"Epoxy Inline Style Transformer — epoxy_style_inline","title":"Epoxy Inline Style Transformer — epoxy_style_inline","text":"epoxy style heavily inspired inline formatters cli package. syntax quite similar, epoxy's syntax slightly different accommodate reporting use cases. inline styles, can include keyword, prefixed dot (.) used format template variable place.   formatters, e.g. dollar example , can customized using arguments epoxy_style_inline(). Pass customized scales::label_dollar() dollar achieve different style.   Note , unlike inline markup cli, text within template variable, keyword, treated R expression.   can also nest inline markup expressions.   Finally, can provide function applied evaluated expression.","code":"epoxy(\"It cost {.dollar 123456}.\", .style = \"inline\") #> It cost $123,456. dollars_nzd <- scales::label_dollar(suffix = \" NZD\")  epoxy(   \"It cost {.dollar 123456}.\",   .style = epoxy_style_inline(dollar = dollars_nzd) ) #> It cost $123,456 NZD. money <- 123456 epoxy(\"It cost {.dollar money}.\", .style = \"inline\") #> It cost $123,456. money <- c(123.456, 234.567) epoxy(\"It will cost either {.or {.dollar money}}.\", .style = \"inline\") #> It will cost either $123.46 or $234.57. set.seed(4242)  epoxy(   \"Here are three random percentages: {.and {.pct {.runif 3}}}.\",   .style = epoxy_style_inline(     runif = function(n) sort(runif(n))   ) ) #> Here are three random percentages: 23%, 35% and 99%."},{"path":"http://pkg.garrickadenbuie.com/epoxy/reference/epoxy_style_inline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Epoxy Inline Style Transformer — epoxy_style_inline","text":"","code":"epoxy_style_inline(   ...,   transformer = glue::identity_transformer,   and = and::and,   or = and::or,   inc = sort,   dec = function(x) sort(x, decreasing = TRUE),   bytes = scales::label_bytes(),   date = function(x) format(x, format = \"%F\"),   time = function(x) format(x, format = \"%T\"),   datetime = function(x) format(x, format = \"%F %T\"),   dollar = scales::label_dollar(prefix = engine_pick(\"$\", \"$\", \"\\\\$\")),   number = scales::label_number(),   comma = scales::label_comma(),   ordinal = scales::label_ordinal(),   percent = scales::label_percent(suffix = engine_pick(\"%\", \"%\", \"\\\\%\")),   pvalue = scales::label_pvalue(),   scientific = scales::label_scientific(),   uppercase = toupper,   lowercase = tolower,   titlecase = tools::toTitleCase )"},{"path":"http://pkg.garrickadenbuie.com/epoxy/reference/epoxy_style_inline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Epoxy Inline Style Transformer — epoxy_style_inline","text":"... Additional named inline transformers. evaluated expression template expression passed first argument function. transformer [function] function taking three parameters code, envir data used transform output block , , evaluation. example transformers see vignette(\"transformers\"). function apply x template {.x}. Default ::(). function apply x template {.x}. Default ::(). inc function apply x template {.inc x}. Default sort(). dec function apply x template {.dec x}. Default function(x) sort(x, decreasing = TRUE). bytes function apply x template {.bytes x}. Default scales::label_bytes(). date function apply x template {.date x}. Default function(x) format(x, format = \"%F\"). time function apply x template {.time x}. Default function(x) format(x, format = \"%T\"). datetime function apply x template {.datetime x} {.dttm x}. Default function(x) format(x, format = \"%F %T\"). dollar function apply x template {.dollar x}. Default scales::label_dollar(). number function apply x template {.number x} {.num x}. Default scales::label_number(). comma function apply x template {.comma x}. Default scales::label_comma(). ordinal function apply x template {.ordinal x}. Default scales::label_ordinal(). percent function apply x template {.percent x} {.pct x}. Default scales::label_percent(). pvalue function apply x template {.pvalue x}. Default scales::label_pvalue(). scientific function apply x template {.scientific x}. Default scales::label_scientific(). uppercase function apply x template {.uppercase x} {.uc x}. Default toupper(). lowercase function apply x template {.lowercase x} {.lo x}. Default tolower(). titlecase function apply x template {.titlecase x} {.tc x}. Default tools::toTitleCase().","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/reference/epoxy_style_inline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Epoxy Inline Style Transformer — epoxy_style_inline","text":"function text envir suitable .transformer argument glue::glue().","code":""},{"path":[]},{"path":"http://pkg.garrickadenbuie.com/epoxy/reference/renderEpoxyHTML.html","id":null,"dir":"Reference","previous_headings":"","what":"Render Epoxy Output — renderEpoxyHTML","title":"Render Epoxy Output — renderEpoxyHTML","text":"Server-side render function used provide values template items. Use named values matching template variable names associated epoxyHTML(). values updated app, renderEpoxyHTML() update values shown app's UI.","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/reference/renderEpoxyHTML.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Render Epoxy Output — renderEpoxyHTML","text":"","code":"renderEpoxyHTML(   ...,   .list = NULL,   env = parent.frame(),   outputFunc = epoxyHTML,   outputArgs = list() )"},{"path":"http://pkg.garrickadenbuie.com/epoxy/reference/renderEpoxyHTML.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Render Epoxy Output — renderEpoxyHTML","text":"... Named values corresponding template variables created associated epoxyHTML() UI element. .list named list shiny::reactiveValues() list names corresponding template variables created associated epoxyHTML() UI element. env environment evaluate ... outputFunc Either epoxyHTML() epoxy_output_mustache(), .e. UI function paired output. used calling renderEpoxyHTML() Shiny runtime R Markdown document providing output without explicit, corresponding UI element. outputArgs list arguments passed implicit call epoxyHTML() renderEpoxyHTML used interactive R Markdown document.","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/reference/renderEpoxyHTML.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Render Epoxy Output — renderEpoxyHTML","text":"server-side Shiny render function assigned Shiny's output object named match .id corresponding epoxyHTML() call.","code":""},{"path":[]},{"path":"http://pkg.garrickadenbuie.com/epoxy/reference/renderEpoxyHTML.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Render Epoxy Output — renderEpoxyHTML","text":"","code":"# This small app shows the current time using `epoxyHTML()` # to provide the HTML template and `renderEpoxyHTML()` to # update the current time every second.  ui <- shiny::fluidPage(   shiny::h2(\"Current Time\"),   epoxyHTML(     \"time\",     shiny::p(\"The current time is {{strong time}}.\")   ) )  server <- function(input, output, session) {   current_time <- shiny::reactive({     shiny::invalidateLater(1000)     strftime(Sys.time(), \"%F %T\")   })    output$time <- renderEpoxyHTML(time = current_time()) }  if (interactive()) {   shiny::shinyApp(ui, server) }"},{"path":"http://pkg.garrickadenbuie.com/epoxy/reference/render_epoxy.html","id":null,"dir":"Reference","previous_headings":"","what":"Render Epoxy Output — render_epoxy","title":"Render Epoxy Output — render_epoxy","text":"Server-side render function used provide values template items. Use named values matching template variable names associated ui_epoxy_html() ui_epoxy_mustache(). values updated app, render_epoxy() update values shown app's UI.","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/reference/render_epoxy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Render Epoxy Output — render_epoxy","text":"","code":"render_epoxy(   ...,   .list = NULL,   env = parent.frame(),   outputFunc = ui_epoxy_html,   outputArgs = list() )  renderEpoxyHTML(..., env = parent.frame())"},{"path":"http://pkg.garrickadenbuie.com/epoxy/reference/render_epoxy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Render Epoxy Output — render_epoxy","text":"... Named values corresponding template variables created associated ui_epoxy_html() UI element. .list named list shiny::reactiveValues() list names corresponding template variables created associated ui_epoxy_html() UI element. env environment evaluate ... outputFunc Either ui_epoxy_html() ui_epoxy_mustache(), .e. UI function paired output. used calling render_epoxy() Shiny runtime R Markdown document providing output without explicit, corresponding UI element. outputArgs list arguments passed implicit call ui_epoxy_html() render_epoxy used interactive R Markdown document.","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/reference/render_epoxy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Render Epoxy Output — render_epoxy","text":"server-side Shiny render function assigned Shiny's output object named match .id corresponding ui_epoxy_html() call.","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/reference/render_epoxy.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Render Epoxy Output — render_epoxy","text":"renderEpoxyHTML():  Deprecated alias, please use render_epoxy().","code":""},{"path":[]},{"path":"http://pkg.garrickadenbuie.com/epoxy/reference/render_epoxy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Render Epoxy Output — render_epoxy","text":"","code":"# This small app shows the current time using `ui_epoxy_html()` # to provide the HTML template and `render_epoxy()` to # update the current time every second.  ui <- shiny::fluidPage(   shiny::h2(\"Current Time\"),   ui_epoxy_html(     \"time\",     shiny::p(\"The current time is {{strong time}}.\")   ) )  server <- function(input, output, session) {   current_time <- shiny::reactive({     shiny::invalidateLater(1000)     strftime(Sys.time(), \"%F %T\")   })    output$time <- render_epoxy(time = current_time()) }  if (interactive()) {   shiny::shinyApp(ui, server) }"},{"path":"http://pkg.garrickadenbuie.com/epoxy/reference/ui_epoxy_html.html","id":null,"dir":"Reference","previous_headings":"","what":"Epoxy HTML Output for Shiny — ui_epoxy_html","title":"Epoxy HTML Output for Shiny — ui_epoxy_html","text":"glue-like output Shiny. ui_epoxy_html() lets use placeholders HTML \"{{first_name}}\", provided values server giving render_epoxy() first_name value.","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/reference/ui_epoxy_html.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Epoxy HTML Output for Shiny — ui_epoxy_html","text":"","code":"ui_epoxy_html(   .id,   ...,   .class = NULL,   .class_item = NULL,   .container = \"div\",   .container_item = \"span\",   .placeholder = \"\",   .sep = \"\",   .open = \"{{\",   .close = \"}}\",   .na = \"\",   .null = \"\",   .literal = FALSE,   .trim = FALSE )  epoxyHTML(.id, ...)"},{"path":"http://pkg.garrickadenbuie.com/epoxy/reference/ui_epoxy_html.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Epoxy HTML Output for Shiny — ui_epoxy_html","text":".id output id ... UI elements text (treated HTML), containing template variables. Use named values provide initial placeholder values. .class Classes added output div, addition .epoxy-html .class_item Classes added .container wrapping template variable. .container name HTML element used output element, default \"div\". .container_item name HTML element used template item, default \"span\". .placeholder Default placeholder template variable placeholder provided. .sep [character(1): ‘\"\"’] Separator used separate elements. .open [character(1): ‘\\{’] opening delimiter around template variable expression. Doubling full delimiter escapes . .close [character(1): ‘\\}’] closing delimiter around template variable expression. Doubling full delimiter escapes . .na [character(1): ‘NA’] Value replace NA values . NULL missing values propagated, NA result cause NA output. Otherwise value replaced value .na. .null [character(1): ‘character()’] Value replace NULL values . character() whole output character(). NULL NULL values dropped (paste0()). Otherwise value replaced value .null. .literal [boolean(1): ‘FALSE’] Whether treat single double quotes, backticks, comments regular characters (vs. syntactic elements), parsing expression string. Setting .literal = TRUE probably makes sense combination custom .transformer, case glue_col(). Regard argument (especially, name) experimental. .trim [logical(1): ‘TRUE’] Whether trim input template trim() .","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/reference/ui_epoxy_html.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Epoxy HTML Output for Shiny — ui_epoxy_html","text":"HTML object.","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/reference/ui_epoxy_html.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Epoxy HTML Output for Shiny — ui_epoxy_html","text":"epoxyHTML():  Deprecated alias, please use ui_epoxy_html().","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/reference/ui_epoxy_html.html","id":"html-markup","dir":"Reference","previous_headings":"","what":"HTML Markup","title":"Epoxy HTML Output for Shiny — ui_epoxy_html","text":"default, placeholders inserted <span> element UI, classes specified .class_item. ui_epoxy_html() also supports HTML markup syntax similar pug (HTML preprocessor). markup syntax, \"{{h3.example.basic#basic-three demo}}\" creates demo placeholder inside <h3 id=\"basic-three\" class=\"example basic\"><\/h3> tag. placeholder template string follows pattern {{<markup> <name>}}. markup syntax comes first, separated placeholder name space. HTML element first, followed classes prefixed . ID prefixed #. template markup can contain one element one ID, many classes can specified.","code":""},{"path":[]},{"path":"http://pkg.garrickadenbuie.com/epoxy/reference/ui_epoxy_html.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Epoxy HTML Output for Shiny — ui_epoxy_html","text":"","code":"ui <- shiny::fluidPage(   shiny::h2(\"ui_epoxy_html demo\"),   ui_epoxy_html(     .id = 'test',     .class_item = \"inner\",     shiny::fluidRow(       shiny::tags$div(         class = \"col-xs-4\",         shiny::selectInput(           inputId = \"thing\",           label = \"What is this {{color}} thing?\",           choices = c(\"apple\", \"banana\", \"coconut\", \"dolphin\")         )       ),       shiny::tags$div(         class = \"col-xs-4\",         shiny::selectInput(           inputId = \"color\",           label = \"What color is the {{thing}}?\",           c(\"red\", \"blue\", \"black\", \"green\", \"yellow\")         )       ),       shiny::tags$div(         class = \"col-xs-4\",         shiny::sliderInput(           inputId = \"height\",           label = \"How tall is the {{color}} {{thing}}?\",           value = 5,           min = 0,           max = 10,           step = 0.1,           post = \"ft\"         )       )     ),     shiny::tags$p(class = \"big\", \"The {{color}} {{thing}} is {{height}} feet tall.\"),     # Default values for placeholders above.     thing = \"THING\",     color = \"COLOR\",     height = \"HEIGHT\"   ),   shiny::tags$style(shiny::HTML(     '.big { font-size: 1.5em; }      .inner { background-color: rgba(254, 233, 105, 0.5);}      .epoxy-item__placeholder { color: #999999; background-color: unset; }'   )) )  server <- function(input, output, session) {   output$test <- render_epoxy(     thing = input$thing,     color = input$color,     height = input$height   ) }  if (interactive()) {   shiny::shinyApp(ui, server) }"},{"path":"http://pkg.garrickadenbuie.com/epoxy/reference/ui_epoxy_mustache.html","id":null,"dir":"Reference","previous_headings":"","what":"Epoxy HTML Mustache Template — ui_epoxy_mustache","title":"Epoxy HTML Mustache Template — ui_epoxy_mustache","text":"Shiny output uses mustache templating render HTML. Mustache powerful template language minimal internal logic. advantage ui_epoxy_mustache() parts HTML can templated -- including element attributes -- whereas ui_epoxy_html() requires dynamic template variables appear text portion UI.","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/reference/ui_epoxy_mustache.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Epoxy HTML Mustache Template — ui_epoxy_mustache","text":"","code":"ui_epoxy_mustache(id, ..., sep = \"\", container = \"div\")  ui_epoxy_whisker(id, ..., sep = \"\", container = \"div\")"},{"path":"http://pkg.garrickadenbuie.com/epoxy/reference/ui_epoxy_mustache.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Epoxy HTML Mustache Template — ui_epoxy_mustache","text":"id ID output. ... Character strings HTML htmltools::tags. elements unnamed. sep separator used concatenate elements .... container character tag name, e.g. \"div\" \"span\", function returns htmltools::tag().","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/reference/ui_epoxy_mustache.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Epoxy HTML Mustache Template — ui_epoxy_mustache","text":"Returns Shiny output UI element.","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/reference/ui_epoxy_mustache.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Epoxy HTML Mustache Template — ui_epoxy_mustache","text":"ui_epoxy_whisker(): alias ui_epoxy_mustache(), provided R users familiar syntax via whisker package.","code":""},{"path":[]},{"path":"http://pkg.garrickadenbuie.com/epoxy/reference/ui_epoxy_mustache.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Epoxy HTML Mustache Template — ui_epoxy_mustache","text":"","code":"ui <- shiny::fluidPage(   shiny::fluidRow(     shiny::column(       width = 6,       ui_epoxy_mustache(         id = \"template\",         shiny::h2(class = \"{{heading_class}}\", \"Hello, {{name}}!\"),         \"{{#fruits}}\",         shiny::p(\"Your favorite fruits are...\"),         shiny::tags$ul(shiny::HTML(\"{{#fruit}}<li>{{.}}<\/li>{{/fruit}}\")),         \"{{/fruits}}\",         \"{{^fruits}}<p>Do you have any favorite fruits?<\/p>{{/fruits}}\"       )     ),     shiny::column(       width = 6,       shiny::h2(\"Inputs\"),       shiny::textInput(\"name\", \"Your name\", \"user\"),       shiny::textInput(\"fruits\", \"Favorite fruits\", placeholder = \"apple, banana\"),       shiny::helpText(\"Enter a comma-separated list of fruits.\")     )   ) )  server <- function(input, output, session) {   output$template <- render_epoxy(     name = input$name,     heading_class = if (nzchar(input$name) && input$name != \"user\") {       \"text-success\"     },     fruits = if (nzchar(input$fruits)) {       list(fruit = strsplit(input$fruits, \"\\\\s*,\\\\s*\")[[1]])     }   ) }  if (interactive()) {   shiny::shinyApp(ui, server) }"},{"path":"http://pkg.garrickadenbuie.com/epoxy/reference/use_epoxy_knitr_engines.html","id":null,"dir":"Reference","previous_headings":"","what":"Use the epoxy knitr engines — use_epoxy_knitr_engines","title":"Use the epoxy knitr engines — use_epoxy_knitr_engines","text":"Sets epoxy's knitr engines use knitr R Markdown document formats powered knitr. engines also set loading epoxy library(), general need call function explicitly. epoxy provides four knitr engines: epoxy uses default glue syntax, e.g. {var} markdown outputs epoxy_html uses double brace syntax, e.g. {{var}} HTML outputs epoxy_latex uses double angle brackets syntax, e.g. <<var>> LaTeX outputs whisker uses whisker package provides R-based implementation mustache templating language. historical reasons, alias HTML LaTeX engines aliased also created: glue_html glue_latex. may opt third alias — glue epoxy engine — calling use_epoxy_glue_engine(), note likely overwrite glue engine provided glue package.","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/reference/use_epoxy_knitr_engines.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use the epoxy knitr engines — use_epoxy_knitr_engines","text":"","code":"use_epoxy_knitr_engines(use_glue_engine = FALSE)  use_epoxy_glue_engine()"},{"path":"http://pkg.garrickadenbuie.com/epoxy/reference/use_epoxy_knitr_engines.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use the epoxy knitr engines — use_epoxy_knitr_engines","text":"use_glue_engine TRUE (default FALSE), uses epoxy's glue engine, likely overwriting glue engine provided glue.","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/reference/use_epoxy_knitr_engines.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use the epoxy knitr engines — use_epoxy_knitr_engines","text":"Silently sets epoxy's knitr engines invisible returns knitr::knit_engines prior function call.","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/reference/use_epoxy_knitr_engines.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Use the epoxy knitr engines — use_epoxy_knitr_engines","text":"use_epoxy_glue_engine(): Use epoxy's epoxy engine glue engine.","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/reference/use_epoxy_knitr_engines.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Use the epoxy knitr engines — use_epoxy_knitr_engines","text":"","code":"if (FALSE) { # interactive() use_epoxy_knitr_engines() }"},{"path":"http://pkg.garrickadenbuie.com/epoxy/news/index.html","id":"epoxy-development-version","dir":"Changelog","previous_headings":"","what":"epoxy (development version)","title":"epoxy (development version)","text":"epoxy’s knitr engine now epoxy glue. avoids name clash glue package, provides glue knitr engine similar functionality. epoxy also provides epoxy_html epoxy_latex knitr engines, although can still used via aliases glue_html glue_latex. (#21) ui_epoxy_html() now render elements IDs using # syntax, e.g. {{h3#name.author full_name}} create element (essentially) <h3 id=\"name\" class=\"author\">{{ full_name }}<\/h3> (#22). epoxy requires glue >= 1.5.0. Added new internal dataset, bechdel, containing details random sample ten movies received score 3 Bechdel Test (#24). epoxy’s style transformers can now chained via epoxy_style(). example use epoxy_style_bold() epoxy_style_collapse() replacement strings, can call epoxy_style(\"bold\", \"collapse\"). epoxy_style() accepts style function name, e.g. \"collapse\", function object directly, e.g. epoxy_style_collapse, call style function, e.g. epoxy_style_collapse() (#26). Added new vignette(\"inline-reporting\") thanks @tjmahr inspiration (#25). epoxy style transformers bold, italic code styles now choose correct syntax epoxy (markdown), epoxy_html epoxy_latex engines. Alternatively, can force desired syntax setting syntax option (#28). epoxy’s knitr engines can now set manually via newly exported (renamed) use_epoxy_knitr_engines(). function called epoxy loaded, likely need call directly. general, can instead simply library(epoxy). epoxy previously provided glue chunk rather epoxy chunk can restore behavior calling use_epoxy_glue_engine() (#30). Added new chunk option, epoxy_style, takes precedence .transformer chunk option. new chunk option best paired epoxy_style(), convenience can prove vector style names list functions, e.g. epoxy_style = c(\"bold\", \"collapse\") (#31). new styler, epoxy_style_apply(), can used globally apply function glue expressions. epoxy_style_apply() uses syntax purrr::map() defining function, .e. tolower ~ tolower(.x) (#37). epoxy_style_format() provides small inline function, fmt() can used apply specific formatting expression. wraps label functions scales package provides shortcuts many labellers. example, {fmt(x, \"%\")} format x percentage using scales::label_percent() {fmt(x, \"$\")} format x dollar figure. can also provide functions (#39). default, epoxy_style_format() (#44) epoxy_style_collapse() (#45) now available epoxy chunks. means won’t need specify epoxy_style chunk option use inline fmt() function *, &, | collapse syntax. epoxy_style_collapse() now uses ackage, provides language-aware conjoining strings. result, sep_and sep_or arguments epoxy_style_collapse() deprecated silently ignored provided (#45). epoxy, epoxy_html() epoxy_latex() now exported functions power knitr engines use defaults (#46). HTML element syntax used ui_epoxy_html() now available epoxy_style_html() used default epoxy_html() (#46). New ui_epoxy_mustache() provides dynamically rendered Shiny UI element uses mustache templating syntax. advantage mustache templating ui_epoxy_html() dynamic variables template can appear anywhere HTML, just text portion (#51). ui_epoxy_whisker() also provided alias discoverability/user comfort (#60). epoxyHTML() renderEpoxyHTML() renamed ui_epoxy_html() render_epoxy() respectively. better fits newer Shiny naming conventions reflects render_epoxy() serves ui_epoxy_html() ui_epoxy_mustache() (#56). epoxy now uses cli-style inline formatting powered epoxy_style_inline(). styler enabled default epoxy(), epoxy_html() epoxy_latex(). Added epoxy_style_default() enable setting default .style option chunks epoxy functions. can use function set epoxy style chunk engines subset chunk engines. Added engine_pick() providing set options correct option chosen based current chunk epoxy engine.","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/news/index.html","id":"epoxy-002","dir":"Changelog","previous_headings":"","what":"epoxy 0.0.2","title":"epoxy 0.0.2","text":"Added whisker engine uses whisker package instead glue. chunk option glue_data changed data. glue_html engine now uses {{ }} open/close delimiters. glue/whisker chunks now accept .envir chunk option containing environemnt, otherwise falling back knitr::knit_global() env.","code":""}]
