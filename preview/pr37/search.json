[{"path":"http://pkg.garrickadenbuie.com/epoxy/preview/pr37/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2020 Garrick Aden-Buie Permission hereby granted, free charge, person obtaining copy software associated documentation files (‚ÄúSoftware‚Äù), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED ‚Äú‚Äù, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/preview/pr37/articles/epoxy.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"epoxy","text":"can install latest version epoxy remotes gadenbuie.r-universe.dev.","code":"# install.packages(\"remotes\") remotes::install_github(\"gadenbuie/epoxy\") options(repos = c(   gadenbuie = \"https://gadenbuie.r-universe.dev/\",   getOptions(\"repos\") ))  install.packages(\"epoxy\")"},{"path":"http://pkg.garrickadenbuie.com/epoxy/preview/pr37/articles/epoxy.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"epoxy","text":"Loading epoxy adds four new knitr engines, chunk types. type lets intermix text R code data (expr table ), geared toward different output context. ‚ö†Ô∏è Caution: Previously, epoxy provided glue engine, conflicts similar chunk engine [glue] package. can update existing documents use epoxy engine, can explicitly use epoxy‚Äôs glue chunk including following setup chunk.","code":"library(epoxy) use_epoxy_glue_engine()"},{"path":"http://pkg.garrickadenbuie.com/epoxy/preview/pr37/articles/epoxy.html","id":"use-epoxy","dir":"Articles","previous_headings":"","what":"Use epoxy","title":"epoxy","text":"use epoxy R Markdown document, create new chunk using engine choice. chunk, write markdown, HTML, LaTeX needed, wrapping R expressions inside delimiters epoxy chunk. average speed cars 15.4 mph. average distance traveled 42.98 ft. epoxy built around glue::glue(), evaluates R expressions { } inserts results string. chunk equivalent call glue::glue(): One immediate advantage using epoxy instead glue::glue() RStudio‚Äôs autocompletion feature works inside epoxy chunks! Typing cars$ chunk suggest columns cars.","code":"```{epoxy} The average speed of the cars was **{mean(cars$speed)} mph.** But on average the distance traveled was only _{mean(cars$dist)}_. ``` glue::glue(\"The average speed of the cars was **{mean(cars$speed)} mph**. But on average the distance traveled was only _{mean(cars$dist)} ft_.\") #> The average speed of the cars was **15.4 mph**. #> But on average the distance traveled was only _42.98 ft_."},{"path":"http://pkg.garrickadenbuie.com/epoxy/preview/pr37/articles/epoxy.html","id":"style-replaced-values","dir":"Articles","previous_headings":"Use epoxy","what":"Style replaced values","title":"epoxy","text":"can use epoxy_style_wrap() epoxy_style chunk option wrap evaluated R expression formatting templating text. can use pre-set epoxy_style_bold(), epoxy_style_italic(), epoxy_style_code() style transformers epoxy_style(). cars stopped 2 120 feet starting speed 4‚Äî120 mph.","code":"```{epoxy, epoxy_style = epoxy_style(\"bold\")} All cars stopped between {min(cars$dist)} and {max(cars$dist)} feet from a starting speed of {min(cars$speed)}---{max(cars$speed)} ```"},{"path":"http://pkg.garrickadenbuie.com/epoxy/preview/pr37/articles/epoxy.html","id":"epoxy-chunks-are-vectorized","dir":"Articles","previous_headings":"Use epoxy","what":"epoxy chunks are vectorized","title":"epoxy","text":"Unlike inline R code, epoxy chunks vectorized. can something watch can advantage: ‚Äú‚Äù apple ‚Äúb‚Äù banana ‚Äúc‚Äù coconut ‚Äúd‚Äù donut can collapse fields automatically using epoxy_style_collapse() transformer. can choose vectors collapsed adding *, & | end expression. * collapses commas, e.g.¬†{letters[1:3]*}. & collapses commas adds \" \" last two items | collapses commas adds \" \" last two items. first three letters , b, c. capitalized, , B C. ‚Äôre indexed 1, 2 3. can change separator entries last entry using sep, last _and _or specific arguments epoxy_style_collapse() function.","code":"```{epoxy} {1:4}. \"{letters[1:4]}\" is for {c(\"apple\", \"banana\", \"coconut\", \"donut\")} ``` ```{epoxy, epoxy_style = epoxy_style(\"collapse\")} - The first three letters are {letters[1:3]*}. - When capitalized, they are {LETTERS[1:3]&}. - They're indexed by {1:3|}. ```"},{"path":"http://pkg.garrickadenbuie.com/epoxy/preview/pr37/articles/epoxy.html","id":"templating-with-epoxy-chunks","dir":"Articles","previous_headings":"Use epoxy","what":"Templating with epoxy chunks","title":"epoxy","text":"‚Äôs also possible create reusable template. Use ref.label chunk option reuse template using values data chunk option, can list data frame. Chevrolet Malibu gets 19 city 27 highway miles per gallon. Dodge Caravan gets 7 city 24 highway miles per gallon. Ford Expedition gets 11 city 17 highway miles per gallon.","code":"mpg <- data.frame(   manufacturer = c(\"Chevrolet\", \"Dodge\", \"Ford\"),   model = c(\"Malibu\", \"Caravan\", \"Expedition\"),   cty = c(19, 7, 11),   hwy = c(27, 24, 17) ) ```{epoxy car-name, eval=FALSE} - A {manufacturer} {model} gets {cty} city and {hwy} highway miles per gallon. ```  ```{epoxy ref.label=\"car-name\", data = mpg} ```"},{"path":"http://pkg.garrickadenbuie.com/epoxy/preview/pr37/articles/epoxy.html","id":"whisker-engine","dir":"Articles","previous_headings":"","what":"Whisker Engine","title":"epoxy","text":"Sometimes epoxy engine doesn‚Äôt quite deliver template power need. cases, can use whisker engine instead. Hello R User: just won $1000! Well, $600, taxes.","code":"```{r} contestant <- list(name = \"R User\", value = 1000, taxed = 600, in_ca = TRUE) ```  ```{whisker data = contestant, echo=FALSE} Hello {{name}}: You have just won ${{value}}! {{#in_ca}} Well, ${{taxed}}, after taxes. {{/in_ca}} ``` contestant <- list(name = \"R User\", value = 1000, taxed = 600, in_ca = TRUE)"},{"path":[]},{"path":"http://pkg.garrickadenbuie.com/epoxy/preview/pr37/articles/epoxy.html","id":"html-blocks","dir":"Articles","previous_headings":"Raw Blocks","what":"HTML Blocks","title":"epoxy","text":"Use epoxy_html block epoxy (glue) R HTML together. output raw HTML. default, expressions types blocks wrapped {{ }}, like whisker templates . Chevrolet Malibu Dodge Caravan Ford Expedition","code":"<ul> ```{epoxy_html, data = mpg}   <li><strong>{{manufacturer}}<\/strong> <em>{{model}}<\/em><\/li> ``` <\/ul>"},{"path":"http://pkg.garrickadenbuie.com/epoxy/preview/pr37/articles/epoxy.html","id":"latex-blocks","dir":"Articles","previous_headings":"Raw Blocks","what":"LaTeX Blocks","title":"epoxy","text":"Similarly, can also use epoxy_latex blocks epoxy R LaTeX together. default, expressions types blocks wrapped < >. R Markdown knitting LaTeX output, renders :","code":"\\begin{itemize} ```{epoxy_latex, data = mpg} \\item \\textbf{<manufacturer>} \\textit{<model>} gets <cty> city and <hwy> highway miles per gallon. ``` \\end{itemize} \\begin{itemize} \\item \\textbf{Chevrolet} \\textit{Malibu} gets 19 city and 27 highway miles per gallon. \\item \\textbf{Dodge} \\textit{Caravan} gets 7 city and 24 highway miles per gallon. \\item \\textbf{Ford} \\textit{Expedition} gets 11 city and 17 highway miles per gallon. \\end{itemize}"},{"path":"http://pkg.garrickadenbuie.com/epoxy/preview/pr37/articles/inline-reporting.html","id":"plug-in-reporting","dir":"Articles","previous_headings":"","what":"Plug-in reporting","title":"Inline Reporting","text":"Tristan Yihui Xie call inline reporting act interleaving R expressions prose markdown text. click Knit button call rmarkdown::render() build report, knitr evaluates R expressions, turns text plugs output. common use case reporting descriptive statistics. illustrate, ‚Äôll use Orange dataset contains circumference measurements 5 orange trees 7 points time. R code might use summarize Orange data: lines might include report growth trees: dataset contains 35 tree size measurements 5 trees 7 timepoints study. normal R Markdown inline reporting written .Rmd file instead: two forms similar, epoxy chunk approach provides advantages, ‚Äôll discover vignette.","code":"n_trees <- length(levels(Orange$Tree)) n_timepoints <- length(unique(Orange$age)) ```{r setup, include = FALSE} library(epoxy) ```  ```{epoxy} The dataset contains {nrow(Orange)} tree size measurements from {n_trees} trees at {n_timepoints} time points in the study. ``` The dataset contains `r nrow(Orange)` tree size measurements from `r n_trees` trees at `r n_timepoints` time points in the study."},{"path":"http://pkg.garrickadenbuie.com/epoxy/preview/pr37/articles/inline-reporting.html","id":"collect-your-variables-in-lists","dir":"Articles","previous_headings":"","what":"Collect your variables in lists","title":"Inline Reporting","text":"example, used normal variables available global environment document. small structural change can bring great benefits. ‚Äôs worth reading Tristan‚Äôs blog post, steal thunder: store data lists. , one hand, create variables named knitted_when, knitted_where knitted_with store facts knitting process. knitted_ prefix helpful aid remember variables related. store three variables single object instead. Bundling everything list() allows report results accessing list elements name $. Report prepared 2022-04-30 inline-reporting.Rmd knitr version 1.39 üòÜ. Read knitr::knit(). still essentially equivalent R Markdown‚Äôs inline R chunks. epoxy chunks include data chunk argument, allows us reference items knitted list directly without use $. Report prepared 2022-04-30 inline-reporting.Rmd knitr version 1.39 üòÜ. Read knitr::knit(). Note can still arbitrary R code epoxy inline expressions: emo_ji() function ‚Äî vignette-safe version emo::ji() ‚Äî exists global environment.","code":"knitted <- list(   when = format(Sys.Date()),   where = knitr::current_input(),   with = format(utils::packageVersion(\"knitr\")),   doc_url = \"https://rdrr.io/pkg/knitr/man/knit.html\" ) ```{epoxy} Report prepared on {knitted$when} from `{knitted$where}`  with knitr version {knitted$with} {emo_ji('happy')}.  Read more about [`knitr::knit()`]({knitted$doc_url}). ``` ```{epoxy knitted-2, data = knitted} Report prepared on {when} from `{where}`  with knitr version {with} {emo_ji('happy')}.  Read more about [`knitr::knit()`]({doc_url}). ```"},{"path":"http://pkg.garrickadenbuie.com/epoxy/preview/pr37/articles/inline-reporting.html","id":"reporting-model-results","dir":"Articles","previous_headings":"","what":"Reporting Model Results","title":"Inline Reporting","text":"Suppose model results ‚Äôve prepared table (details, see Tristan‚Äôs blog post). results summarize linear mixed model estimating population averages trees grown several ozone conditions. ‚Äôve copied resulting data frame vignette avoid taking extra dependencies vignette. can use split() make list data frames can index values term column. now list one-row dataframes: Now can write results inline reporting: average log-size control condition 4.25 units, 95% Wald CI [4.00, 4.51]. statistically clear difference ozone conditions intercepts (day-0 values), B = ‚àí0.14, [‚àí0.45, 0.17]. control group, average growth rate 0.34 log-size units per 100 days, [0.31, 0.36]. growth rate ozone treatment group significantly slower, diff = ‚àí0.04, [‚àí0.07, ‚àí0.01].","code":"text_ready <-    data.frame(     term = c(\"intercept\", \"hund_days\", \"ozone\", \"hund_days_ozone\"),     estimate = c(\"4.25\", \"0.34\", \"&minus;0.14\", \"&minus;0.04\"),     se = c(0.131, 0.013, 0.158, 0.015),     ci = c(\"[4.00, 4.51]\", \"[0.31, 0.36]\", \"[&minus;0.45, 0.17]\",\"[&minus;0.07, &minus;0.01]\"),     stringsAsFactors = FALSE   ) stats <- split(text_ready, text_ready$term) str(stats) #> List of 4 #>  $ hund_days      :'data.frame': 1 obs. of  4 variables: #>   ..$ term    : chr \"hund_days\" #>   ..$ estimate: chr \"0.34\" #>   ..$ se      : num 0.013 #>   ..$ ci      : chr \"[0.31, 0.36]\" #>  $ hund_days_ozone:'data.frame': 1 obs. of  4 variables: #>   ..$ term    : chr \"hund_days_ozone\" #>   ..$ estimate: chr \"&minus;0.04\" #>   ..$ se      : num 0.015 #>   ..$ ci      : chr \"[&minus;0.07, &minus;0.01]\" #>  $ intercept      :'data.frame': 1 obs. of  4 variables: #>   ..$ term    : chr \"intercept\" #>   ..$ estimate: chr \"4.25\" #>   ..$ se      : num 0.131 #>   ..$ ci      : chr \"[4.00, 4.51]\" #>  $ ozone          :'data.frame': 1 obs. of  4 variables: #>   ..$ term    : chr \"ozone\" #>   ..$ estimate: chr \"&minus;0.14\" #>   ..$ se      : num 0.158 #>   ..$ ci      : chr \"[&minus;0.45, 0.17]\" ```{epoxy} The average log-size in the control condition was {stats$intercept$estimate} units,  95% Wald CI {stats$intercept$ci}. There was not a statistically clear difference between the  ozone conditions for their intercepts (day-0 values),  *B* = {stats$ozone$estimate}, {stats$ozone$ci}. For the control group, the average growth rate was  {stats$hund_days$estimate} log-size units per 100 days,  {stats$hund_days$ci}. The growth rate for  the ozone treatment group was significantly slower,  *diff* = {stats$hund_days_ozone$estimate},  {stats$hund_days_ozone$ci}. ```"},{"path":"http://pkg.garrickadenbuie.com/epoxy/preview/pr37/articles/inline-reporting.html","id":"inline-reporting-with-autocomplete","dir":"Articles","previous_headings":"Reporting Model Results","what":"Inline reporting with autocomplete","title":"Inline Reporting","text":"‚Äôs extra neat epoxy ‚Äî readily apparent ‚Äôre reading vignette ‚Äî RStudio‚Äôs autocomplete feature kicks type stats$ inside braced expression { }. Actually, IDE doesn‚Äôt know epoxy knitr engine, autocomplete tries help every word. ‚Äôs typically easy ignore suggestions words part prose, ‚Äôs usually outweighed usefulness able autocomplete names data structures.","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/preview/pr37/articles/inline-reporting.html","id":"intermittent-inline-reporting","dir":"Articles","previous_headings":"Reporting Model Results","what":"Intermittent inline-reporting","title":"Inline Reporting","text":"Note don‚Äôt need write entire document even paragraph inside epoxy chunk; can wrap data-heavy parts needed. statistically clear difference ozone conditions intercepts (day-0 values), B = ‚àí0.14, [‚àí0.45, 0.17]. growth rate ozone treatment group significantly slower, diff = ‚àí0.04, [‚àí0.07, ‚àí0.01].","code":"There was not a statistically clear difference between the  ozone conditions for their intercepts (day-0 values), ```{epoxy} *B* = {stats$ozone$estimate}, {stats$ozone$ci}. ``` The growth rate for the ozone treatment group was significantly slower, ```{epoxy} *diff* = {stats$hund_days_ozone$estimate}, {stats$hund_days_ozone$ci}. ```"},{"path":"http://pkg.garrickadenbuie.com/epoxy/preview/pr37/articles/inline-reporting.html","id":"repeated-inline-reporting","dir":"Articles","previous_headings":"","what":"Repeated inline reporting","title":"Inline Reporting","text":"Occasionally may need re-use phrase document structure different slices data.","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/preview/pr37/articles/inline-reporting.html","id":"vectorized-inline-reporting-chunks","dir":"Articles","previous_headings":"Repeated inline reporting","what":"Vectorized inline reporting chunks","title":"Inline Reporting","text":"Suppose summarize orange tree growth (normally use combination dplyr::group_by() dplyr::summarize() .) epoxy chunks, like glue::glue(), vectorized, find needing repeat thing , can use feature advantage. quick recap growth observed orange trees: Tree number 1 started 30mm , 1464 days, grew 145mm. Tree number 2 started 33mm , 1464 days, grew 203mm. Tree number 3 started 30mm , 1464 days, grew 140mm. Tree number 4 started 32mm , 1464 days, grew 214mm. Tree number 5 started 30mm , 1464 days, grew 177mm.","code":"summarize_tree_growth <- function(tree) {   tree <- Orange[Orange$Tree == tree, ]   tree <- data.frame(     tree = tree$Tree[1],     age_range = diff(range(tree$age)),     circumference_first = tree$circumference[1],     circumference_last = tree$circumference[nrow(tree)]   )   tree$growth_rate <- with(tree, (circumference_last - circumference_first) / age_range)   tree }  orange_summary <- lapply(1:5, summarize_tree_growth) orange_summary <- do.call(rbind, orange_summary) orange_summary #>   tree age_range circumference_first circumference_last growth_rate #> 1    1      1464                  30                145  0.07855191 #> 2    2      1464                  33                203  0.11612022 #> 3    3      1464                  30                140  0.07513661 #> 4    4      1464                  32                214  0.12431694 #> 5    5      1464                  30                177  0.10040984 A quick recap of the growth observed in the orange trees:  ```{epoxy data = orange_summary} - Tree number {tree} started out at {circumference_first}mm and,   over {age_range} days, grew to be {circumference_last}mm. ```"},{"path":"http://pkg.garrickadenbuie.com/epoxy/preview/pr37/articles/inline-reporting.html","id":"template-inline-reporting-chunks","dir":"Articles","previous_headings":"Repeated inline reporting","what":"Template inline reporting chunks","title":"Inline Reporting","text":"using knitr‚Äôs reference labels feature, epoxy data chunk option saw , can create epoxy template can re-use like parameterized chunk. start creating labelled epoxy chunk eval = FALSE can later use prose referencing chunk ref.label providing different slice data via data chunk option. fourth tree largest tree end study, growing average 0.87mm per week. Meanwhile, smallest tree third, grew average 0.53mm per week.","code":"```{epoxy average-growth, eval=FALSE} an average of {signif(growth_rate * 7, 2)}mm per week. ``` The fourth tree was the largest tree at the end of the study, growing ```{epoxy ref.label=\"average-growth\", data = summarize_tree_growth(4)} ``` Meanwhile, the smallest tree was the third, which grew at ```{epoxy ref.label=\"average-growth\", data = summarize_tree_growth(3)} ```"},{"path":"http://pkg.garrickadenbuie.com/epoxy/preview/pr37/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Garrick Aden-Buie. Author, maintainer.","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/preview/pr37/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Aden-Buie G (2022). epoxy: String Interpolation 'R Markdown' Documents. R package version 0.0.2.9000, https://github.com/gadenbuie/epoxy.","code":"@Manual{,   title = {epoxy: String Interpolation for 'R Markdown' Documents},   author = {Garrick Aden-Buie},   year = {2022},   note = {R package version 0.0.2.9000},   url = {https://github.com/gadenbuie/epoxy}, }"},{"path":"http://pkg.garrickadenbuie.com/epoxy/preview/pr37/index.html","id":"epoxy-","dir":"","previous_headings":"","what":"String Interpolation for R Markdown Documents","title":"String Interpolation for R Markdown Documents","text":"epoxy makes templating glue easy R Markdown documents Shiny apps.","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/preview/pr37/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"String Interpolation for R Markdown Documents","text":"can install latest version epoxy remotes gadenbuie.r-universe.dev.","code":"# install.packages(\"remotes\") remotes::install_github(\"gadenbuie/epoxy\") options(repos = c(   gadenbuie = \"https://gadenbuie.r-universe.dev/\",   getOptions(\"repos\") ))  install.packages(\"epoxy\")"},{"path":"http://pkg.garrickadenbuie.com/epoxy/preview/pr37/index.html","id":"setup","dir":"","previous_headings":"","what":"Setup","title":"String Interpolation for R Markdown Documents","text":"Loading epoxy adds four new knitr engines, chunk types. type lets intermix text R code data (expr table ), geared toward different output context. ‚ö†Ô∏è Caution: Previously, epoxy provided glue engine, conflicts similar chunk engine glue package. can update existing documents use epoxy engine, can explicitly use epoxy‚Äôs glue chunk including following setup chunk.","code":"library(epoxy) use_epoxy_glue_engine()"},{"path":"http://pkg.garrickadenbuie.com/epoxy/preview/pr37/index.html","id":"use-epoxy","dir":"","previous_headings":"","what":"Use epoxy","title":"String Interpolation for R Markdown Documents","text":"use epoxy R Markdown document, create new chunk using engine choice. chunk, write markdown, HTML, LaTeX needed, wrapping R expressions inside delimiters epoxy chunk. average speed cars 15.4 mph. average distance traveled 42.98 ft. epoxy built around glue::glue(), evaluates R expressions { } inserts results string. chunk equivalent call glue::glue(): One immediate advantage using epoxy instead glue::glue() RStudio‚Äôs autocompletion feature works inside epoxy chunks! Typing cars$ chunk suggest columns cars.","code":"```{epoxy} The average speed of the cars was **{mean(cars$speed)} mph.** But on average the distance traveled was only _{mean(cars$dist)}_. ``` glue::glue(\"The average speed of the cars was **{mean(cars$speed)} mph**. But on average the distance traveled was only _{mean(cars$dist)} ft_.\") #> The average speed of the cars was **15.4 mph**. #> But on average the distance traveled was only _42.98 ft_."},{"path":"http://pkg.garrickadenbuie.com/epoxy/preview/pr37/index.html","id":"learn-more","dir":"","previous_headings":"","what":"Learn more","title":"String Interpolation for R Markdown Documents","text":"‚Äôs whole lot epoxy can ! Learn : epoxy Package Documentation Getting Started Inline Reporting epoxy","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/preview/pr37/reference/bechdel.html","id":null,"dir":"Reference","previous_headings":"","what":"Top 10 Highest-Rated, Bechdel-Passing Movies ‚Äî bechdel","title":"Top 10 Highest-Rated, Bechdel-Passing Movies ‚Äî bechdel","text":"small dataset epoxy demonstrations top audience-rated movies pass Bechdel Test.","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/preview/pr37/reference/bechdel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Top 10 Highest-Rated, Bechdel-Passing Movies ‚Äî bechdel","text":"","code":"bechdel"},{"path":"http://pkg.garrickadenbuie.com/epoxy/preview/pr37/reference/bechdel.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Top 10 Highest-Rated, Bechdel-Passing Movies ‚Äî bechdel","text":"data frame 10 rows 18 variables: imdb_id IMDB Movie ID bechdel_rating Rating (0-3): 0 = unscored; 1 = least two (named) women ; 2 = talk ; 3 = something besides man. year Year title Title movie budget Budget $USD release year domgross Domestic gross $USD release year intgross International gross $USD release year plot Plot movie rated Moving rating, e.g. PG, PG-13, R, etc. language Language movie country Country movie produced imdb_rating IMDB rating movie, 0-10 director Director movie actors Major actors appearing movie genre Genre awards Awards won movie, text description runtime Movie runtime minutes poster URL movie poster image, sourced themoviedb.org. Poster images URLs ar provided TMDB API epoxy endorsed certified TMDB.","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/preview/pr37/reference/bechdel.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Top 10 Highest-Rated, Bechdel-Passing Movies ‚Äî bechdel","text":"TidyTuesday (2021-03-09), FiveThirtyEight, bechdeltest.com, themoviedb.org","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/preview/pr37/reference/epoxy-package.html","id":null,"dir":"Reference","previous_headings":"","what":"epoxy: String Interpolation for 'R Markdown' Documents ‚Äî epoxy-package","title":"epoxy: String Interpolation for 'R Markdown' Documents ‚Äî epoxy-package","text":"Extra strength 'glue' data-driven templating. String interpolation 'R Markdown' documents 'Shiny' apps, built 'glue' 'whisker' packages.","code":""},{"path":[]},{"path":"http://pkg.garrickadenbuie.com/epoxy/preview/pr37/reference/epoxy-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"epoxy: String Interpolation for 'R Markdown' Documents ‚Äî epoxy-package","text":"Maintainer: Garrick Aden-Buie garrick@adenbuie.com (ORCID)","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/preview/pr37/reference/epoxyHTML.html","id":null,"dir":"Reference","previous_headings":"","what":"Epoxy HTML Output for Shiny ‚Äî epoxyHTML","title":"Epoxy HTML Output for Shiny ‚Äî epoxyHTML","text":"Expermimental. glue-like output Shiny. epoxyHTML() lets use placeholders HTML \"{{height}}\", provided values server giving renderEpoxyHTML() height value.","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/preview/pr37/reference/epoxyHTML.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Epoxy HTML Output for Shiny ‚Äî epoxyHTML","text":"","code":"epoxyHTML(   .id,   ...,   .class = NULL,   .class_item = NULL,   .container = \"div\",   .container_item = \"span\",   .placeholder = \"\",   .sep = \"\",   .open = \"{{\",   .close = \"}}\",   .na = \"\",   .trim = FALSE )"},{"path":"http://pkg.garrickadenbuie.com/epoxy/preview/pr37/reference/epoxyHTML.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Epoxy HTML Output for Shiny ‚Äî epoxyHTML","text":".id output id ... UI elements text (treated HTML), containing template variables. Use named values provide initial placeholder values. .class Classes added output div, addition .epoxy-html .class_item Classes added .container wrapping template variable. .container name HTML element used output element, default \"div\". .container_item name HTML element used template item, default \"span\". .placeholder Default placeholder template variable placeholder provided. .sep [character(1): ‚Äò\"\"‚Äô] Separator used separate elements. .open Opening template variable delimiter .close Closing template variable delimiter .na [character(1): ‚ÄòNA‚Äô] Value replace NA values . NULL missing values propagated, NA result cause NA output. Otherwise value replaced value .na. .trim [logical(1): ‚ÄòTRUE‚Äô] Whether trim input template trim() .","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/preview/pr37/reference/epoxyHTML.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Epoxy HTML Output for Shiny ‚Äî epoxyHTML","text":"HTML object.","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/preview/pr37/reference/epoxyHTML.html","id":"html-markup","dir":"Reference","previous_headings":"","what":"HTML Markup","title":"Epoxy HTML Output for Shiny ‚Äî epoxyHTML","text":"default, placeholders inserted <span> element UI, classes specified .class_item. epoxyHTML() also supports HTML markup syntax similar pug (HTML preprocessor). markup syntax, \"{{h3.example.basic%basic-three demo}}\" creates demo placeholder inside <h3 id=\"basic-three\" class=\"example basic\"><\/h3> tag. placeholder template string follows pattern {{<markup> <name>}}. markup syntax comes first, separated placeholder name space. HTML element first, followed classes prefixed . ID prefixed #. template markup can contain one element one ID, many classes can specified.","code":""},{"path":[]},{"path":"http://pkg.garrickadenbuie.com/epoxy/preview/pr37/reference/epoxyHTML.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Epoxy HTML Output for Shiny ‚Äî epoxyHTML","text":"","code":"ui <- shiny::fluidPage(   shiny::h2(\"epoxyHTML demo\"),   epoxyHTML(     .id = 'test',     .class_item = \"inner\",     shiny::fluidRow(       shiny::tags$div(         class = \"col-xs-4\",         shiny::selectInput(           inputId = \"thing\",           label = \"What is this {{color}} thing?\",           choices = c(\"apple\", \"banana\", \"coconut\", \"dolphin\")         )       ),       shiny::tags$div(         class = \"col-xs-4\",         shiny::selectInput(           inputId = \"color\",           label = \"What color is the {{thing}}?\",           c(\"red\", \"blue\", \"black\", \"green\", \"yellow\")         )       ),       shiny::tags$div(         class = \"col-xs-4\",         shiny::sliderInput(           inputId = \"height\",           label = \"How tall is the {{color}} {{thing}}?\",           value = 5,           min = 0,           max = 10,           step = 0.1,           post = \"ft\"         )       )     ),     shiny::tags$p(class = \"big\", \"The {{color}} {{thing}} is {{height}} feet tall.\"),     # Default values for placeholders above.     thing = \"THING\",     color = \"COLOR\",     height = \"HEIGHT\"   ),   shiny::tags$style(shiny::HTML(     '.big { font-size: 1.5em; }     .inner:not(.epoxy-item__placeholder) { background-color: rgba(254, 233, 105, 0.5)}     .epoxy-item__placeholder { color: #999999; }'   )) )  server <- function(input, output, session) {   output$test <- renderEpoxyHTML(     thing = input$thing,     color = input$color,     height = input$height   ) }  if (interactive()) {   shiny::shinyApp(ui, server) }"},{"path":"http://pkg.garrickadenbuie.com/epoxy/preview/pr37/reference/epoxy_style.html","id":null,"dir":"Reference","previous_headings":"","what":"epoxy Style Transformers ‚Äî epoxy_style","title":"epoxy Style Transformers ‚Äî epoxy_style","text":"transformers provide additional automatic formatting template strings. designed used .transformer chunk option epoxy chunks. can use epoxy_style() chain several transformers together. epoxy_style() individual epoxy style functions can used epoxy, epoxy_html epoxy_latex chunks choose correct syntax .","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/preview/pr37/reference/epoxy_style.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"epoxy Style Transformers ‚Äî epoxy_style","text":"","code":"epoxy_style(..., syntax = NULL)  epoxy_style_wrap(   before = \"**\",   after = before,   syntax = NULL,   transformer = glue::identity_transformer )  epoxy_style_bold(syntax = NULL, transformer = glue::identity_transformer)  epoxy_style_italic(syntax = NULL, transformer = glue::identity_transformer)  epoxy_style_format(..., transformer = glue::identity_transformer)  epoxy_style_apply(.f = identity, ..., transformer = glue::identity_transformer)  epoxy_style_code(syntax = NULL, transformer = glue::identity_transformer)  epoxy_style_collapse(   sep = \", \",   last = \"\",   last_and = \" and \",   last_or = \" or \",   sep_and = sep,   sep_or = sep,   transformer = glue::identity_transformer )"},{"path":"http://pkg.garrickadenbuie.com/epoxy/preview/pr37/reference/epoxy_style.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"epoxy Style Transformers ‚Äî epoxy_style","text":"... list style functions, e.g. epoxy_style_bold name style function, e.g. \"bold\", call style function, e.g. epoxy_style_bold(). epoxy_style() chains style functions together, applying styles left right. example, epoxy_style(\"bold\", \"collapse\") results replaced strings emboldened collapsed, e.g. **** **b**. hand, epoxy_style(\"collapse\", \"bold\")  collapse vector embolden entire string. epoxy_style_format() epoxy_style_apply(), ... passed underlying call underlying function call (format() case epoxy_style_format()). syntax One \"markdown\" (\"md\"), \"html\", \"latex\". default chosen based engine chunk style function called, according option epoxy.engine. Caution: invalid options silently ignored, falling back markdown syntax. , epoxy_style_wrap(), characters added variables template string. transformer transformer apply replacement string. argument used chaining transformer functions. providing function argument can apply additional transformation current transformation. nearly cases, can let epoxy_style() handle . chain ends glue::identity_transformer() used transformer. .f function, function name purrr::map()-style inline function. sep, sep_and, sep_or separator use joining vector elements variable ends *, &, | respectively. default, \", \". last, last_and, last_or Additional text added sep last element variable ends *, &, | respectively.","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/preview/pr37/reference/epoxy_style.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"epoxy Style Transformers ‚Äî epoxy_style","text":"function text envir suitable .transformerargument glue::glue().","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/preview/pr37/reference/epoxy_style.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"epoxy Style Transformers ‚Äî epoxy_style","text":"epoxy_style_wrap: Wrap variables epoxy_style_bold: Embolden variables using ** markdown, <strong> HTML, \\textbf{} LaTeX epoxy_style_italic: Italicize variables using _ markdown, <em> HTML, \\emph{} LaTeX epoxy_style_format: Format numbers values using format(). Accepts arguments ... passed format(). epoxy_style_apply: Apply function replacement expressions epoxy_style_code: Code format variables using `` markdown, <code> HTML, \\texttt{} LaTeX epoxy_style_collapse: Collapse vector variables","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/preview/pr37/reference/epoxy_style.html","id":"output-specific-styling","dir":"Reference","previous_headings":"","what":"Output-specific styling","title":"epoxy Style Transformers ‚Äî epoxy_style","text":"epoxy_style_ functions attempt use correct syntax styling replacement text markdown, HTML LaTeX. choice driven chunk engine styling function used. epoxy engine corresponds markdown, epoxy_html HTML, epoxy_latex LaTeX. Automatic syntax selection works epoxy style functions used epoxy knitr engines knitr rendering process. used outside context, can choose desired syntax setting syntax one \"markdown\", \"html\" \"latex\".","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/preview/pr37/reference/epoxy_style.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"epoxy Style Transformers ‚Äî epoxy_style","text":"","code":"glue::glue(\"{letters[1:3]&}\", .transformer = epoxy_style(\"bold\", \"collapse\")) #> **a**, **b** and **c** glue::glue(\"{letters[1:3]&}\", .transformer = epoxy_style(\"collapse\", \"bold\")) #> **a, b and c**  # In an epoxy_html chunk... # Note that you don't have to set `syntax = \"html\"`, it just knows glue::glue(   \"{letters[1:3]&}\",   .transformer = epoxy_style(\"bold\", \"collapse\", syntax = \"html\") ) #> <strong>a<\/strong>, <strong>b<\/strong> and <strong>c<\/strong>  # Or in an epoxy_latex chunk... glue::glue(   \"{letters[1:3]&}\",   .transformer = epoxy_style(\"bold\", \"collapse\", syntax = \"latex\") ) #> \\textbf{a}, \\textbf{b} and \\textbf{c}  # Other Transfomers ----  # Apply `format()` to all replacements"},{"path":"http://pkg.garrickadenbuie.com/epoxy/preview/pr37/reference/renderEpoxyHTML.html","id":null,"dir":"Reference","previous_headings":"","what":"Render Epoxy Output ‚Äî renderEpoxyHTML","title":"Render Epoxy Output ‚Äî renderEpoxyHTML","text":"Server-side render function used provide values template items. Use named values matching template variable names associated epoxyHTML(). values updated app, renderEpoxyHTML() update values shown app's UI.","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/preview/pr37/reference/renderEpoxyHTML.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Render Epoxy Output ‚Äî renderEpoxyHTML","text":"","code":"renderEpoxyHTML(..., .list = NULL, env = parent.frame(), outputArgs = list())"},{"path":"http://pkg.garrickadenbuie.com/epoxy/preview/pr37/reference/renderEpoxyHTML.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Render Epoxy Output ‚Äî renderEpoxyHTML","text":"... Named values corresponding template variables created associated epoxyHTML() UI element. .list named list shiny::reactiveValues() list names corresponding template variables created associated epoxyHTML() UI element. env environment evaluate ... outputArgs list arguments passed implicit call epoxyHTML() renderEpoxyHTML used interactive R Markdown document.","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/preview/pr37/reference/renderEpoxyHTML.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Render Epoxy Output ‚Äî renderEpoxyHTML","text":"server-side Shiny render function assigned Shiny's output object named match .id corresponding epoxyHTML() call.","code":""},{"path":[]},{"path":"http://pkg.garrickadenbuie.com/epoxy/preview/pr37/reference/renderEpoxyHTML.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Render Epoxy Output ‚Äî renderEpoxyHTML","text":"","code":"# This small app shows the current time using `epoxyHTML()` # to provide the HTML template and `renderEpoxyHTML()` to # update the current time every second.  ui <- shiny::fluidPage(   shiny::h2(\"Current Time\"),   epoxyHTML(     \"time\",     shiny::p(\"The current time is {{strong time}}.\")   ) )  server <- function(input, output, session) {   current_time <- shiny::reactive({     shiny::invalidateLater(1000)     strftime(Sys.time(), \"%F %T\")   })    output$time <- renderEpoxyHTML(time = current_time()) }  if (interactive()) {   shiny::shinyApp(ui, server) }"},{"path":"http://pkg.garrickadenbuie.com/epoxy/preview/pr37/reference/use_epoxy_knitr_engines.html","id":null,"dir":"Reference","previous_headings":"","what":"Use the epoxy knitr engines ‚Äî use_epoxy_knitr_engines","title":"Use the epoxy knitr engines ‚Äî use_epoxy_knitr_engines","text":"Sets epoxy's knitr engines use knitr R Markdown document formats powered knitr. engines also set loading epoxy library(), general need call function explicitly. epoxy provides four knitr engines: epoxy uses default glue syntax, e.g. {var} markdown outputs epoxy_html uses double brace syntax, e.g. {{var}} HTML outputs epoxy_latex uses double angle brackets syntax, e.g. <<var>> LaTeX outputs whisker uses whisker package provides R-based implementation mustache templating language. historical reasons, alias HTML LaTeX engines aliased also created: glue_html glue_latex. may opt third alias ‚Äî glue epoxy engine ‚Äî calling use_epoxy_glue_engine(), note likely overwrite glue engine provided glue package.","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/preview/pr37/reference/use_epoxy_knitr_engines.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use the epoxy knitr engines ‚Äî use_epoxy_knitr_engines","text":"","code":"use_epoxy_knitr_engines(use_glue_engine = FALSE)  use_epoxy_glue_engine()"},{"path":"http://pkg.garrickadenbuie.com/epoxy/preview/pr37/reference/use_epoxy_knitr_engines.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use the epoxy knitr engines ‚Äî use_epoxy_knitr_engines","text":"use_glue_engine TRUE (default FALSE), uses epoxy's glue engine, likely overwriting glue engine provided glue.","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/preview/pr37/reference/use_epoxy_knitr_engines.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use the epoxy knitr engines ‚Äî use_epoxy_knitr_engines","text":"Silently sets epoxy's knitr engines invisible returns knitr::knit_engines prior function call.","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/preview/pr37/reference/use_epoxy_knitr_engines.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Use the epoxy knitr engines ‚Äî use_epoxy_knitr_engines","text":"use_epoxy_glue_engine: Use epoxy's epoxy engine glue engine.","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/preview/pr37/news/index.html","id":"epoxy-0029000","dir":"Changelog","previous_headings":"","what":"epoxy 0.0.2.9000","title":"epoxy 0.0.2.9000","text":"epoxy‚Äôs knitr engine now epoxy glue. avoids name clash glue package, provides glue knitr engine similar functionality. epoxy also provides epoxy_html epoxy_latex knitr engines, although can still used via aliases glue_html glue_latex. (#21) epoxyHTML() now render elements IDs using # syntax, e.g. {{h3#name.author full_name}} create element (essentially) <h3 id=\"name\" class=\"author\">{{ full_name }}<\/h3> (#22). epoxy requires glue >= 1.5.0. Added new internal dataset, bechdel, containing details random sample ten movies received score 3 Bechdel Test (#24). epoxy‚Äôs style transformers can now chained via epoxy_style(). example use epoxy_style_bold() epoxy_style_collapse() replacement strings, can call epoxy_style(\"bold\", \"collapse\"). epoxy_style() accepts style function name, e.g.¬†\"collapse\", function object directly, e.g.¬†epoxy_style_collapse, call style function, e.g.¬†epoxy_style_collapse() (#26). Added new vignette(\"inline-reporting\") thanks @tjmahr inspiration (#25). epoxy style transformers bold, italic code styles now choose correct syntax epoxy (markdown), epoxy_html epoxy_latex engines. Alternatively, can force desired syntax setting syntax option (#28). epoxy‚Äôs knitr engines can now set manually via newly exported (renamed) use_epoxy_knitr_engines(). function called epoxy loaded, likely need call directly. general, can instead simply library(epoxy). epoxy previously provided glue chunk rather epoxy chunk can restore behavior calling use_epoxy_glue_engine() (#30). Added new chunk option, epoxy_style, takes precedence .transformer chunk option. new chunk option best paired epoxy_style(), convenience can prove vector style names list functions, e.g.¬†epoxy_style = c(\"bold\", \"collapse\") (#31). Two new stylers, epoxy_style_format() epoxy_style_apply(), can used globally format numbers epoxy chunk. E.g. .transformer =   epoxy_style_format(digits = 2) can used format numbers epoxy chunk 2 significant digits. format styler powered general epoxy_style_apply(), allows apply arbitrary functions replacements using syntax familiar users purrr::map() (#37).","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/preview/pr37/news/index.html","id":"epoxy-002","dir":"Changelog","previous_headings":"","what":"epoxy 0.0.2","title":"epoxy 0.0.2","text":"Added whisker engine uses whisker package instead glue. chunk option glue_data changed data. glue_html engine now uses {{ }} open/close delimiters. glue/whisker chunks now accept .envir chunk option containing environemnt, otherwise falling back knitr::knit_global() env.","code":""}]
