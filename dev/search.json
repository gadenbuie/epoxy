[{"path":[]},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement garrick@adenbuie.com. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 Garrick Aden-Buie Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/articles/epoxy-report.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"epoxy in Reports","text":"Loading epoxy adds four new knitr engines, chunk types. type lets intermix text R code data (expr table ), geared toward different output context. ⚠️ Caution: Previously, epoxy provided glue engine, conflicts similar chunk engine glue package. can update existing documents use epoxy engine, can explicitly use epoxy’s glue chunk including following setup chunk.","code":"library(epoxy) use_epoxy_glue_engine()"},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/articles/epoxy-report.html","id":"using-epoxy-chunks","dir":"Articles","previous_headings":"","what":"Using epoxy chunks","title":"epoxy in Reports","text":"use epoxy R Markdown document, create new chunk using engine choice. chunk, write markdown, HTML, LaTeX needed, wrapping R expressions inside delimiters epoxy chunk. average speed cars 15.4 mph. average distance traveled 42.98 ft. epoxy built around glue::glue(), evaluates R expressions { } inserts results string. chunk equivalent call glue::glue(): One immediate advantage using epoxy instead glue::glue() RStudio’s autocompletion feature works inside epoxy chunks! Typing cars$ chunk suggest columns cars.","code":"```{epoxy} The average speed of the cars was **{mean(cars$speed)} mph.** But on average the distance traveled was only _{mean(cars$dist)}_. ``` glue::glue(\"The average speed of the cars was **{mean(cars$speed)} mph**. But on average the distance traveled was only _{mean(cars$dist)} ft_.\") #> The average speed of the cars was **15.4 mph**. #> But on average the distance traveled was only _42.98 ft_."},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/articles/epoxy-report.html","id":"inline-transformers","dir":"Articles","previous_headings":"","what":"Inline transformers","title":"epoxy in Reports","text":"epoxy provides inline transformations inspired cli’s inline markup. transformer enabled default epoxy(), epoxy_html() epoxy_latex() respective knitr chunk engines. ’s example using small list containing data movie (expand section see full code movie). can use inline transformer format replacement text build description data. movie Back Future Part II released 1989. earned $118,450,002 budget $40,000,000, features movie stars Michael J. Fox, Christopher Lloyd, Lea Thompson, Thomas F. Wilson. Read inline transformations ?epoxy_transform_inline.","code":"movie <- list(   year = 1989,   title = \"Back to the Future Part II\",   budget = 4e+07,   domgross = 118450002,   imdb_rating = 7.8,   actors = c(     \"Michael J. Fox\",     \"Christopher Lloyd\",     \"Lea Thompson\",     \"Thomas F. Wilson\"   ),   runtime = 108L ) ```{epoxy} The movie {.emph {.titlecase movie$title}} was released in {.strong movie$year}. It earned {.dollar movie$domgross} with a budget of {.dollar movie$budget}, and it features movie stars {.and movie$actors}. ```"},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/articles/epoxy-report.html","id":"transform-replaced-values","dir":"Articles","previous_headings":"Inline transformers","what":"Transform replaced values","title":"epoxy in Reports","text":"can use epoxy_transform_wrap() epoxy_transform chunk option wrap evaluated R expression formatting templating text. can use pre-set epoxy_transform_bold(), epoxy_transform_italic(), epoxy_transform_code() transformers epoxy_transform(). cars stopped 2 120 feet starting speed 4—120 mph.","code":"```{epoxy, .transformer = epoxy_transform(\"bold\")} All cars stopped between {min(cars$dist)} and {max(cars$dist)} feet from a starting speed of {min(cars$speed)}---{max(cars$speed)} ```"},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/articles/epoxy-report.html","id":"epoxy-chunks-are-vectorized","dir":"Articles","previous_headings":"Inline transformers","what":"epoxy chunks are vectorized","title":"epoxy in Reports","text":"Unlike inline R code, epoxy chunks vectorized. can something watch can advantage: “” apple “b” banana “c” coconut “d” donut can collapse fields automatically using epoxy_transform_collapse() transformer. can choose vectors collapsed adding *, & | end expression. * collapses commas, e.g. {letters[1:3]*}. & collapses commas adds \" \" last two items | collapses commas adds \" \" last two items. first three letters , b, c. capitalized, , B, C. ’re indexed 1, 2, 3. can change separator entries last entry using sep, last _and _or specific arguments epoxy_transform_collapse() function.","code":"```{epoxy} {1:4}. \"{letters[1:4]}\" is for {c(\"apple\", \"banana\", \"coconut\", \"donut\")} ``` ```{epoxy, .transformer = epoxy_transform(\"collapse\")} - The first three letters are {letters[1:3]*}. - When capitalized, they are {LETTERS[1:3]&}. - They're indexed by {1:3|}. ```"},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/articles/epoxy-report.html","id":"templating-with-epoxy-chunks","dir":"Articles","previous_headings":"Inline transformers","what":"Templating with epoxy chunks","title":"epoxy in Reports","text":"’s also possible create reusable template. Use ref.label chunk option reuse template using values .data chunk option, can list data frame. Chevrolet Malibu gets 19 city 27 highway miles per gallon. Dodge Caravan gets 7 city 24 highway miles per gallon. Ford Expedition gets 11 city 17 highway miles per gallon.","code":"mpg <- data.frame(     manufacturer = c(\"Chevrolet\", \"Dodge\", \"Ford\"),     model = c(\"Malibu\", \"Caravan\", \"Expedition\"),     cty = c(19, 7, 11),     hwy = c(27, 24, 17) ) ```{epoxy car-name, eval=FALSE} - A {manufacturer} {model} gets {cty} city and {hwy} highway miles per gallon. ```  ```{epoxy ref.label=\"car-name\", .data = mpg} ```"},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/articles/epoxy-report.html","id":"whisker-engine","dir":"Articles","previous_headings":"","what":"Whisker engine","title":"epoxy in Reports","text":"Sometimes epoxy engine doesn’t quite deliver template power need. cases, can use whisker engine instead. Hello R User: just won $1000! Well, $600, taxes.","code":"```{r} contestant <- list(name = \"R User\", value = 1000, taxed = 600, in_ca = TRUE) ```  ```{whisker .data = contestant, echo=FALSE} Hello {{name}}: You have just won ${{value}}! {{#in_ca}} Well, ${{taxed}}, after taxes. {{/in_ca}} ``` contestant <- list(name = \"R User\", value = 1000, taxed = 600, in_ca = TRUE)"},{"path":[]},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/articles/epoxy-report.html","id":"markdown-chunks","dir":"Articles","previous_headings":"HTML and LaTeX chunks","what":"Markdown chunks","title":"epoxy in Reports","text":"epoxy chunk engine can used output format. practice, works best markdown (.e. generally R Markdown Quarto) renders : ’re writing HTML LaTeX output, however, may need write literal HTML LaTeX document. epoxy chun, ’d need escape { } text doubling , otherwise content within treated template expression. avoid friction, epoxy provides two additional chunk engines, epoxy_html writing raw HTML epoxy_latex writing raw LaTeX.","code":"```{epoxy, .data = mpg} - **{manufacturer}** _{model}_ ``` - **Chevrolet** _Malibu_ - **Dodge** _Caravan_ - **Ford** _Expedition_"},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/articles/epoxy-report.html","id":"raw-html-chunks","dir":"Articles","previous_headings":"HTML and LaTeX chunks","what":"Raw HTML chunks","title":"epoxy in Reports","text":"Use epoxy_html block epoxy (glue) R HTML together. output raw HTML. default, expressions types blocks wrapped {{ }}, like whisker templates . Notice output HTML wrapped pandoc raw html block, tells pandoc content HTML shouldn’t modified1. also means output chunk included HTML documents. epoxy_html block contained within another raw html block, want force output appear, can set chunk option html_raw = FALSE. epoxy_html uses two custom transformers, epoxy_transform_inline() epoxy_transform_html(), applying html transformer inline transformer. epoxy_transform_html() can use element.class#id syntax wrap expressions HTML elements (parts optional). Let’s use syntax place manufacturer model <strong> <em> elements, custom class. epoxy_transform_html() transformer uses .<class> create <span class=\"class\"> elements, epoxy_html() also recognizes @<inline> access inline transformers. {{.uppercase manufacturer}} assumed CSS class inline transformer class.","code":"<ul> ```{epoxy_html, .data = mpg}   <li><strong>{{manufacturer}}<\/strong> <em>{{model}}<\/em><\/li> ``` <\/ul> <ul> ```{=html}   <li><strong>Chevrolet<\/strong> <em>Malibu<\/em><\/li>   <li><strong>Dodge<\/strong> <em>Caravan<\/em><\/li>   <li><strong>Ford<\/strong> <em>Expedition<\/em><\/li> ``` <\/ul> ````{=html} <ul> ```{epoxy_html, .data = mpg, html_raw = FALSE}   <li><strong>{{manufacturer}}<\/strong> <em>{{model}}<\/em><\/li> ``` <\/ul> ```` <ul> ```{epoxy_html, .data = mpg}   <li>     {{strong.car-make manufacturer}}     {{em.car-model model}}   <\/li> ``` <\/ul> <ul> ```{=html}   <li>     <strong class=\"car-make\">Chevrolet<\/strong><strong class=\"car-make\">Dodge<\/strong><strong class=\"car-make\">Ford<\/strong>     <em class=\"car-model\">Malibu<\/em><em class=\"car-model\">Caravan<\/em><em class=\"car-model\">Expedition<\/em>   <\/li> ``` <\/ul> ```{epoxy_html .data = mpg[1,]} {{.uppercase manufacturer}}  {{@uppercase manufacturer}} ``` ```{=html} <span class=\"uppercase\">Chevrolet<\/span>  CHEVROLET ```"},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/articles/epoxy-report.html","id":"raw-latex-chunks","dir":"Articles","previous_headings":"HTML and LaTeX chunks","what":"Raw LaTeX chunks","title":"epoxy in Reports","text":"Similarly, can also use epoxy_latex chunks epoxy R LaTeX together. Wrap expressions types chunks << >>. R Markdown knitting LaTeX output, renders : Note , like epoxy_html chunks, epoxy_latex places output raw latex blocks. behavior can disabled setting chunk option latex_raw = FALSE. ⚠️ Note: Prior v1.0.0, epoxy used single < > characters expression delimiters epoxy_latex() chunks. can lead subtle inescapable problems need use characters inside expression. result, epoxy_latex() now uses << >> delimit inline expressions.","code":"\\begin{itemize} ```{epoxy_latex, .data = mpg} \\item <<.strong manufacturer>> <<.emph model>> gets <<cty>> city and <<hwy>> highway miles per gallon. ``` \\end{itemize} \\begin{itemize} ```{=latex} \\item \\textbf{Chevrolet} \\emph{Malibu} gets 19 city and 27 highway miles per gallon. \\item \\textbf{Dodge} \\emph{Caravan} gets 7 city and 24 highway miles per gallon. \\item \\textbf{Ford} \\emph{Expedition} gets 11 city and 17 highway miles per gallon. ``` \\end{itemize}"},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/articles/epoxy-shiny.html","id":"templating-in-shiny","dir":"Articles","previous_headings":"","what":"Templating in Shiny","title":"epoxy in Shiny","text":"Shiny apps great way design interactive web applications, epoxy includes several functions help weave reactive data apps. ways can use epoxy Shiny apps: Make text portion element Shiny UI update dynamically. Weave reactive text prose app. Build powerful templates using mustache templating language. Shiny already includes two reactive text outputs: shiny::uiOutput() (.k.. shiny::htmlOutput()) shiny::textOutput(). great displaying reactive text app, limitations: uiOutput() tends move UI code server function, making harder know final structure UI. textOutput() great displaying reactive text, takes work get spacing around dynamic text just right. article, ’ll learn use epoxy Shiny apps epoxy improves experience writing apps dynamic text templates.","code":""},{"path":[]},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/articles/epoxy-shiny.html","id":"a-basic-shiny-app-with-textoutput","dir":"Articles","previous_headings":"Introducing epoxy in Shiny","what":"A basic Shiny app with textOutput()","title":"epoxy in Shiny","text":"Let’s start example Shiny app. ’s simple friendly app greets user name.  gets pretty close want, remember include inline = TRUE textOutput(). ’s also extra space user’s name exclamation point ’d probably like get rid of1.","code":"library(shiny)  ui <- fluidPage(   textInput(\"name\", \"What's your name?\"),   p(\"Hello,\", textOutput(\"greeting\", inline = TRUE), \"!\") )  server <- function(input, output) {   output$greeting <- renderText(input$name) }  shinyApp(ui, server)"},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/articles/epoxy-shiny.html","id":"setting-up-ui_epoxy_html","dir":"Articles","previous_headings":"Introducing epoxy in Shiny","what":"Setting up ui_epoxy_html()","title":"epoxy in Shiny","text":"’s approach dynamic text ui_epoxy_html(): Wrap portion UI ui_epoxy_html() give .id. Use {{ name }} syntax define fields dynamic text go. server code, assign render_epoxy() output matching UI’s .id pass reactive data arguments names matching dynamic fields.","code":"library(shiny) library(epoxy)  ui <- fluidPage(   textInput(\"name\", \"What's your name?\"),   ui_epoxy_html(           #<< Template wrapper     .id = \"greeting\",      #<< Unique ID     p(\"Hello, {{name}}!\")  #<< Dynamic text   )                        #<< )  server <- function(input, output) {   output$greeting <- render_epoxy( #<< Connect to template     name = input$name              #<< Reactive data field   ) }  shinyApp(ui, server)"},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/articles/epoxy-shiny.html","id":"default-or-error-values","dir":"Articles","previous_headings":"Introducing epoxy in Shiny","what":"Default or error values","title":"epoxy in Shiny","text":"Another advantage using ui_epoxy_html() textOutput() can set default values appear immediately app loading used error occurs. next app, name set \"friend\" default ui_epoxy_html(), server side ’ve also added validate() call indicating need name least 2 characters. user hasn’t yet entered name 2 characters, text name field use default value red squiggle . Hovering squiggle reveals error message.","code":"library(shiny) library(epoxy)  ui <- fluidPage(   textInput(\"name\", \"What's your name?\"),   ui_epoxy_html(     .id = \"greeting\",     p(\"Hello, {{name}}!\"),     name = \"friend\"   ) )  server <- function(input, output) {   name <- reactive({     validate(need(       nchar(input$name) > 2,       \"Name must be more than 2 characters.\"     ))     input$name   })    output$greeting <- render_epoxy(     name = name()   ) }  shinyApp(ui, server)"},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/articles/epoxy-shiny.html","id":"few-more-things","dir":"Articles","previous_headings":"Introducing epoxy in Shiny","what":"A few more things about ui_epoxy_html()","title":"epoxy in Shiny","text":"First, can reference reactive value, e.g. {{ name }}, many times want template. value can also go just anywhere UI. long ’s okay put <span> around text2.  can use {{ <markup> <expr> }} syntax3 epoxy_html(), makes possible determine HTML element class used contain dynamic text4. send array values reactive field, tag used template, making easy things like dynamically update list.  Three quick things ui_epoxy_html(): assumes bare character strings HTML, don’t worry adding HTML() place. replacement text assumed HTML, default, save accidentally injecting unsafe HTML user input app. ’re certain field contain safe HTML, can mark safe HTML three braces, e.g. {{{ <expr> }}}. replacement text sent bare text HTML, making like textOutput() uiOutput(). particular, uiOutput() allow send arbitary widgets based htmlwidgets htmltools, ui_epoxy_html() ever sends bare text HTML.","code":"library(shiny) library(epoxy)  ui <- fluidPage(   textInput(\"name\", \"What's your name?\"),   ui_epoxy_html(     .id = \"greeting\",     selectInput(       inputId = \"color\",       label = \"What's your favorite color, {{ name }}?\",       choices = c(\"red\", \"green\", \"blue\", \"purple\", \"yellow\")     ),     name = \"friend\"   ) )  server <- function(input, output) {   output$greeting <- render_epoxy(     name = input$name   ) }  shinyApp(ui, server) library(shiny) library(epoxy)  ui <- fluidPage(   textInput(\"faves\", \"What are your favorite fruits?\"),   helpText(\"Enter a list of comma-separated fruits.\"),   ui_epoxy_html(     .id = \"fruit_list\",     tags$ul(\"{{ li fruits }}\"),     fruits = \"favorite fruits\"   ) )  server <- function(input, output) {   fruits <- reactive({     validate(need(       nzchar(input$faves),       \"Please share your favorite fruits.\"     ))     fruits <- trimws(strsplit(input$faves, \",\\\\s*\")[[1]])     fruits[nzchar(fruits)]   })    output$fruit_list <- render_epoxy(     fruits = fruits()   ) }  shinyApp(ui, server)"},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/articles/epoxy-shiny.html","id":"connecting-epoxy-with-a-reactive-data-frame","dir":"Articles","previous_headings":"","what":"Connecting epoxy with a reactive data frame","title":"epoxy in Shiny","text":"One favorite use cases epoxy’s Shiny functions create UI template ’s filled row data frame. pattern, app’s inputs combined reactive expression filters data frame single row. , row sent via render_epoxy() UI, ’s dynamically injected template UI. ’s small example using epoxy’s built bechdel data set, small data set 10 highest-rated movies pass Bechdel test. app, user picks movie template filled information data set movie.  Notice instead passing named arguments field render_epoxy(), pass entire data frame .list argument. can use pattern list reactiveVal(), reactive() returns data frame, list list-like object, reactiveValues() list. .list can coexist named expressions. want build entire list within single reactive expression, set .list equal expression, wrapped braces:","code":"library(shiny) library(epoxy)  movie_choices <- bechdel$imdb_id names(movie_choices) <- bechdel$title  ui <- fixedPage(   selectInput(\"movie\", \"Pick a movie\", choices = movie_choices),   ui_epoxy_html(     .id = \"movie_info\",     p(       \"{{ em title }} was released\",       \"in {{ strong year }}.\",       \"It was directed by {{ director }}\",       \"and was rated {{ rated }}.\"     )   ) )  server <- function(input, output, session) {   movie <- reactive({     # Use the inputs to filter a single row     bechdel[bechdel$imdb_id == input$movie, ]   })    # Pass the reactive data frame to   # the .list argument of render_epoxy()   output$movie_info <- render_epoxy(.list = movie()) }  shinyApp(ui, server) render_epoxy(.list = movie()) render_epoxy(   name = input$name,   .list = movie() ) render_epoxy(.list = {   list(     name = input$name,     age = input$age   ) })"},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/articles/epoxy-shiny.html","id":"markdown-templates","dir":"Articles","previous_headings":"","what":"Markdown templates","title":"epoxy in Shiny","text":"’re using epoxy write data-driven prose, might want use markdown templates, rather writing HTML. ui_epoxy_markdown() version ui_epoxy_html() uses markdown syntax instead HTML syntax5. Let’s revisit movie app last example, time using markdown template.  even involved example, try epoxy markdown example app","code":"library(shiny) library(epoxy)  movie_choices <- bechdel$imdb_id names(movie_choices) <- bechdel$title  ui <- fixedPage(   selectInput(\"movie\", \"Pick a movie\", choices = movie_choices),   ui_epoxy_markdown(     .id = \"movie_info\",     \"_{{ title }}_ was released\",     \"in **{{ year }}**.\",     \"It was directed by {{ director }}\",     \"and was rated {{ rated }}.\"   ) )  server <- function(input, output, session) {   movie <- reactive({     bechdel[bechdel$imdb_id == input$movie, ]   })    output$movie_info <- render_epoxy(.list = movie()) }  shinyApp(ui, server) run_epoxy_example_app(\"ui_epoxy_markdown\")"},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/articles/epoxy-shiny.html","id":"mustache-templates","dir":"Articles","previous_headings":"","what":"Mustache templates","title":"epoxy in Shiny","text":"complex templates, might want use template language like Mustache. R, know syntax whisker package. ui_epoxy_mustache()6 wraps Mustache language, letting blend typical shiny htmltools UI mustache template. use ui_epoxy_mustache() instead ui_epoxy_html()? template variables used HTML attributes, e.g. links images (via href src attributes). want use mustache’s conditional logic, e.g. {{#<expr>}} ... {{/<expr>}}. Let’s revist favorite fruits example app earlier. app use’s mustache’s conditional logic show help message fruits entered.  uses mustache’s looping syntax show list fruits fruits entered.  can find detailed example epoxy mustache example app. One important thing note ui_epoxy_mustache() , unlike ui_epoxy_html(), entire template re-rendered (browser) whenever reactive source updates. ’d better use smaller, localized templates wrap entire app ui_epoxy_mustache().","code":"library(shiny) library(epoxy)  ui <- fluidPage(   textInput(\"faves\", \"What are your favorite fruits?\"),   ui_epoxy_mustache(     id = \"fruit_list\",     tags$ul(       # If fruits is not empty, wrap into list items       \"{{#fruits}}\",       tags$li(\"{{.}}\"),       \"{{/fruits}}\",       # If fruits is empty, show a help message       \"{{^fruits}}\",       tags$li(         class = \"text-muted\",         \"Enter a list of comma-separated fruits.\"       ),       \"{{/fruits}}\"     )   ) )  server <- function(input, output) {   fruits <- reactive({     req(input$faves)     fruits <- trimws(strsplit(input$faves, \",\\\\s*\")[[1]])     fruits[nzchar(fruits)]   })    output$fruit_list <- render_epoxy(     fruits = fruits()   ) }  shinyApp(ui, server) run_epoxy_example_app(\"ui_epoxy_mustache\")"},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/articles/epoxy.html","id":"use-epoxy","dir":"Articles","previous_headings":"","what":"Use epoxy","title":"epoxy","text":"Use epoxy blend data prose inline templating formatting. Use epoxy reactive templating targeted updates Shiny apps. Use epoxy R scripts, anywhere used glue.","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/articles/inline-reporting.html","id":"plug-in-reporting","dir":"Articles","previous_headings":"","what":"Plug-in reporting","title":"Inline Reporting","text":"Tristan Yihui Xie call inline reporting act interleaving R expressions prose markdown text. click Knit button call rmarkdown::render() build report, knitr evaluates R expressions, turns text plugs output. common use case reporting descriptive statistics. illustrate, ’ll use Orange dataset contains circumference measurements 5 orange trees 7 points time. R code might use summarize Orange data: lines might include report growth trees: dataset contains 35 tree size measurements 5 trees 7 timepoints study. normal R Markdown inline reporting written .Rmd file instead: two forms similar, epoxy chunk approach provides advantages, ’ll discover vignette.","code":"n_trees <- length(levels(Orange$Tree)) n_timepoints <- length(unique(Orange$age)) ```{r setup, include = FALSE} library(epoxy) ```  ```{epoxy} The dataset contains {nrow(Orange)} tree size measurements from {n_trees} trees at {n_timepoints} time points in the study. ``` The dataset contains `r nrow(Orange)` tree size measurements from `r n_trees` trees at `r n_timepoints` time points in the study."},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/articles/inline-reporting.html","id":"collect-your-variables-in-lists","dir":"Articles","previous_headings":"","what":"Collect your variables in lists","title":"Inline Reporting","text":"example, used normal variables available global environment document. small structural change can bring great benefits. ’s worth reading Tristan’s blog post, steal thunder: store data lists. , one hand, create variables named knitted_when, knitted_where knitted_with store facts knitting process. knitted_ prefix helpful aid remember variables related. store three variables single object instead. Bundling everything list() allows report results accessing list elements name $. Report prepared 2023-11-01 inline-reporting.Rmd knitr version 1.45 😆. Read knitr::knit(). still essentially equivalent R Markdown’s inline R chunks. epoxy chunks include .data chunk argument, allows us reference items knitted list directly without use $. Report prepared 2023-11-01 inline-reporting.Rmd knitr version 1.45 😆. Read knitr::knit(). Note can still arbitrary R code epoxy inline expressions: emo_ji() function — vignette-safe version emo::ji() — exists global environment.","code":"knitted <- list(     when = format(Sys.Date()),     where = knitr::current_input(),     with = format(utils::packageVersion(\"knitr\")),     doc_url = \"https://rdrr.io/pkg/knitr/man/knit.html\" ) ```{epoxy} Report prepared on {knitted$when} from `{knitted$where}` with knitr version {knitted$with} {emo_ji('happy')}. Read more about [`knitr::knit()`]({knitted$doc_url}). ``` ```{epoxy knitted-2, .data = knitted} Report prepared on {when} from `{where}` with knitr version {with} {emo_ji('happy')}. Read more about [`knitr::knit()`]({doc_url}). ```"},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/articles/inline-reporting.html","id":"reporting-model-results","dir":"Articles","previous_headings":"","what":"Reporting Model Results","title":"Inline Reporting","text":"Suppose model results ’ve prepared table (details, see Tristan’s blog post). results summarize linear mixed model estimating population averages trees grown several ozone conditions. ’ve copied resulting data frame vignette avoid taking extra dependencies vignette. can use split() make list data frames can index values term column. now list one-row dataframes: Now can write results inline reporting: average log-size control condition 4.25 units, 95% Wald CI [4.00, 4.51]. statistically clear difference ozone conditions intercepts (day-0 values), B = −0.14, [−0.45, 0.17]. control group, average growth rate 0.34 log-size units per 100 days, [0.31, 0.36]. growth rate ozone treatment group significantly slower, diff = −0.04, [−0.07, −0.01].","code":"text_ready <-     data.frame(         term = c(\"intercept\", \"hund_days\", \"ozone\", \"hund_days_ozone\"),         estimate = c(\"4.25\", \"0.34\", \"&minus;0.14\", \"&minus;0.04\"),         se = c(0.131, 0.013, 0.158, 0.015),         ci = c(\"[4.00, 4.51]\", \"[0.31, 0.36]\", \"[&minus;0.45, 0.17]\",\"[&minus;0.07, &minus;0.01]\"),         stringsAsFactors = FALSE     ) stats <- split(text_ready, text_ready$term) str(stats) #> List of 4 #>  $ hund_days      :'data.frame': 1 obs. of  4 variables: #>   ..$ term    : chr \"hund_days\" #>   ..$ estimate: chr \"0.34\" #>   ..$ se      : num 0.013 #>   ..$ ci      : chr \"[0.31, 0.36]\" #>  $ hund_days_ozone:'data.frame': 1 obs. of  4 variables: #>   ..$ term    : chr \"hund_days_ozone\" #>   ..$ estimate: chr \"&minus;0.04\" #>   ..$ se      : num 0.015 #>   ..$ ci      : chr \"[&minus;0.07, &minus;0.01]\" #>  $ intercept      :'data.frame': 1 obs. of  4 variables: #>   ..$ term    : chr \"intercept\" #>   ..$ estimate: chr \"4.25\" #>   ..$ se      : num 0.131 #>   ..$ ci      : chr \"[4.00, 4.51]\" #>  $ ozone          :'data.frame': 1 obs. of  4 variables: #>   ..$ term    : chr \"ozone\" #>   ..$ estimate: chr \"&minus;0.14\" #>   ..$ se      : num 0.158 #>   ..$ ci      : chr \"[&minus;0.45, 0.17]\" ```{epoxy} The average log-size in the control condition was {stats$intercept$estimate} units, 95% Wald CI {stats$intercept$ci}. There was not a statistically clear difference between the ozone conditions for their intercepts (day-0 values), *B* = {stats$ozone$estimate}, {stats$ozone$ci}. For the control group, the average growth rate was {stats$hund_days$estimate} log-size units per 100 days, {stats$hund_days$ci}. The growth rate for the ozone treatment group was significantly slower, *diff* = {stats$hund_days_ozone$estimate}, {stats$hund_days_ozone$ci}. ```"},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/articles/inline-reporting.html","id":"inline-reporting-with-autocomplete","dir":"Articles","previous_headings":"Reporting Model Results","what":"Inline reporting with autocomplete","title":"Inline Reporting","text":"’s extra neat epoxy — readily apparent ’re reading vignette — RStudio’s autocomplete feature kicks type stats$ inside braced expression { }. Actually, IDE doesn’t know epoxy knitr engine, autocomplete tries help every word. ’s typically easy ignore suggestions words part prose, ’s usually outweighed usefulness able autocomplete names data structures.","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/articles/inline-reporting.html","id":"intermittent-inline-reporting","dir":"Articles","previous_headings":"Reporting Model Results","what":"Intermittent inline-reporting","title":"Inline Reporting","text":"Note don’t need write entire document even paragraph inside epoxy chunk; can wrap data-heavy parts needed. statistically clear difference ozone conditions intercepts (day-0 values), B = −0.14, [−0.45, 0.17]. growth rate ozone treatment group significantly slower, diff = −0.04, [−0.07, −0.01].","code":"There was not a statistically clear difference between the ozone conditions for their intercepts (day-0 values), ```{epoxy} *B* = {stats$ozone$estimate}, {stats$ozone$ci}. ``` The growth rate for the ozone treatment group was significantly slower, ```{epoxy} *diff* = {stats$hund_days_ozone$estimate}, {stats$hund_days_ozone$ci}. ```"},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/articles/inline-reporting.html","id":"repeated-inline-reporting","dir":"Articles","previous_headings":"","what":"Repeated inline reporting","title":"Inline Reporting","text":"Occasionally may need re-use phrase document structure different slices data.","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/articles/inline-reporting.html","id":"vectorized-inline-reporting-chunks","dir":"Articles","previous_headings":"Repeated inline reporting","what":"Vectorized inline reporting chunks","title":"Inline Reporting","text":"Suppose summarize orange tree growth (normally use combination dplyr::group_by() dplyr::summarize() .) epoxy chunks, like glue::glue(), vectorized, find needing repeat thing , can use feature advantage. quick recap growth observed orange trees: Tree number 1 started 30mm , 1464 days, grew 145mm. Tree number 2 started 33mm , 1464 days, grew 203mm. Tree number 3 started 30mm , 1464 days, grew 140mm. Tree number 4 started 32mm , 1464 days, grew 214mm. Tree number 5 started 30mm , 1464 days, grew 177mm.","code":"summarize_tree_growth <- function(tree) {     tree <- Orange[Orange$Tree == tree, ]     tree <- data.frame(         tree = tree$Tree[1],         age_range = diff(range(tree$age)),         circumference_first = tree$circumference[1],         circumference_last = tree$circumference[nrow(tree)]     )     tree$growth_rate <- with(tree, (circumference_last - circumference_first) / age_range)     tree }  orange_summary <- lapply(1:5, summarize_tree_growth) orange_summary <- do.call(rbind, orange_summary) orange_summary #>   tree age_range circumference_first circumference_last growth_rate #> 1    1      1464                  30                145  0.07855191 #> 2    2      1464                  33                203  0.11612022 #> 3    3      1464                  30                140  0.07513661 #> 4    4      1464                  32                214  0.12431694 #> 5    5      1464                  30                177  0.10040984 A quick recap of the growth observed in the orange trees:  ```{epoxy .data = orange_summary} - Tree number {tree} started out at {circumference_first}mm and,   over {age_range} days, grew to be {circumference_last}mm. ```"},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/articles/inline-reporting.html","id":"template-inline-reporting-chunks","dir":"Articles","previous_headings":"Repeated inline reporting","what":"Template inline reporting chunks","title":"Inline Reporting","text":"using knitr’s reference labels feature, epoxy .data chunk option saw , can create epoxy template can re-use like parameterized chunk. start creating labelled epoxy chunk eval = FALSE can later use prose referencing chunk ref.label providing different slice data via .data chunk option. fourth tree largest tree end study, growing average 0.87mm per week. Meanwhile, smallest tree third, grew average 0.53mm per week.","code":"```{epoxy average-growth, eval=FALSE} an average of {signif(growth_rate * 7, 2)}mm per week. ``` The fourth tree was the largest tree at the end of the study, growing ```{epoxy ref.label=\"average-growth\", .data = summarize_tree_growth(4)} ``` Meanwhile, the smallest tree was the third, which grew at ```{epoxy ref.label=\"average-growth\", .data = summarize_tree_growth(3)} ```"},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Garrick Aden-Buie. Author, maintainer. Kushagra Gour. Contributor.            hint.css mustache.js community. Contributor.            mustache.js","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Aden-Buie G (2023). epoxy: String Interpolation Documents, Reports Apps. https://pkg.garrickadenbuie.com/epoxy/, https://github.com/gadenbuie/epoxy.","code":"@Manual{,   title = {epoxy: String Interpolation for Documents, Reports and Apps},   author = {Garrick Aden-Buie},   year = {2023},   note = {https://pkg.garrickadenbuie.com/epoxy/, https://github.com/gadenbuie/epoxy}, }"},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/index.html","id":"epoxy-","dir":"","previous_headings":"","what":"String Interpolation for Documents, Reports and Apps","title":"String Interpolation for Documents, Reports and Apps","text":"Extra-strength glue scripts, reports, apps","code":""},{"path":[]},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/index.html","id":"in-r-markdown-and-quarto-reports","dir":"","previous_headings":"epoxy is super glue","what":"In R Markdown and Quarto reports","title":"String Interpolation for Documents, Reports and Apps","text":"Use epoxy chunks extra-strength inline syntax. Just library(epoxy) R Markdown Quarto document get started. epoxy chunks make easy transform values place cli-inspired inline syntax described ?epoxy_transform_inline.","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/index.html","id":"in-r-scripts","dir":"","previous_headings":"epoxy is super glue","what":"In R scripts","title":"String Interpolation for Documents, Reports and Apps","text":"functions power epoxy chunks availble three flavors: epoxy() markdown general purpose outputs epoxy_html() HTML outputs, added support HTML templating (see ?epoxy_transform_html) epoxy_latex() LaTeX reports functions accompanied robust system chained glue-transformers powered epoxy_transform().","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/index.html","id":"in-shiny-apps","dir":"","previous_headings":"epoxy is super glue","what":"In Shiny apps","title":"String Interpolation for Documents, Reports and Apps","text":"ui_epoxy_html() makes easy update text HTML dynamically, anywhere Shiny app’s UI. complicated situations, ui_epoxy_mustache() lets turn Shiny UI template leverages Mustache templating language.","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/index.html","id":"learn-more","dir":"","previous_headings":"","what":"Learn more","title":"String Interpolation for Documents, Reports and Apps","text":"’s whole lot epoxy can ! Get running epoxy reports Shiny apps. Function reference usage examples. Longer posts tutorials using epoxy reports apps.","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"String Interpolation for Documents, Reports and Apps","text":"can install epoxy CRAN: can install latest development version epoxy remotes gadenbuie.r-universe.dev.","code":"install.packages(\"epoxy\") # install.packages(\"remotes\") remotes::install_github(\"gadenbuie/epoxy\") options(repos = c(   gadenbuie = \"https://gadenbuie.r-universe.dev/\",   getOption(\"repos\") ))  install.packages(\"epoxy\")"},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/reference/bechdel.html","id":null,"dir":"Reference","previous_headings":"","what":"Top 10 Highest-Rated, Bechdel-Passing Movies — bechdel","title":"Top 10 Highest-Rated, Bechdel-Passing Movies — bechdel","text":"small dataset epoxy demonstrations top audience-rated movies pass Bechdel Test.","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/reference/bechdel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Top 10 Highest-Rated, Bechdel-Passing Movies — bechdel","text":"","code":"bechdel"},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/reference/bechdel.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Top 10 Highest-Rated, Bechdel-Passing Movies — bechdel","text":"data frame 10 rows 18 variables: imdb_id IMDB Movie ID bechdel_rating Rating (0-3): 0 = unscored; 1 = least two (named) women ; 2 = talk ; 3 = something besides man. year Year title Title movie budget Budget $USD release year domgross Domestic gross $USD release year intgross International gross $USD release year plot Plot movie rated Moving rating, e.g. PG, PG-13, R, etc. language Language movie country Country movie produced imdb_rating IMDB rating movie, 0-10 director Director movie actors Major actors appearing movie genre Genre awards Awards won movie, text description runtime Movie runtime minutes poster URL movie poster image, sourced themoviedb.org. Poster images URLs ar provided TMDB API epoxy endorsed certified TMDB.","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/reference/bechdel.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Top 10 Highest-Rated, Bechdel-Passing Movies — bechdel","text":"TidyTuesday (2021-03-09), FiveThirtyEight, bechdeltest.com, themoviedb.org","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/reference/engine_pick.html","id":null,"dir":"Reference","previous_headings":"","what":"Pick an engine-specific value — engine_pick","title":"Pick an engine-specific value — engine_pick","text":"Set different values used based current epoxy knitr engine (one md, html, latex). engine-specific value used inside epoxy knitr chunks epoxy functions matching source syntax: epoxy() (md), epoxy_html() (html), epoxy_latex() (latex).","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/reference/engine_pick.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pick an engine-specific value — engine_pick","text":"","code":"engine_pick(md, html = md, latex = md)"},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/reference/engine_pick.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pick an engine-specific value — engine_pick","text":"md, html, latex value use markdown, HTML, LaTeX context.","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/reference/engine_pick.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pick an engine-specific value — engine_pick","text":"value md, html latex depending epoxy knitr currently evaluated.","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/reference/engine_pick.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pick an engine-specific value — engine_pick","text":"","code":"# Markdown and HTML are okay with bare `$` character, # but we need to escape it in LaTeX. engine_pick(md = \"$\", latex = \"\\\\$\") #> [1] \"$\""},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/reference/epoxy-package.html","id":null,"dir":"Reference","previous_headings":"","what":"epoxy: String Interpolation for Documents, Reports and Apps — epoxy-package","title":"epoxy: String Interpolation for Documents, Reports and Apps — epoxy-package","text":"Extra strength 'glue' data-driven templates. String interpolation 'Shiny' apps 'R Markdown' 'knitr'-powered 'Quarto' documents, built 'glue' 'whisker' packages.","code":""},{"path":[]},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/reference/epoxy-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"epoxy: String Interpolation for Documents, Reports and Apps — epoxy-package","text":"Maintainer: Garrick Aden-Buie garrick@adenbuie.com (ORCID) contributors: Kushagra Gour (hint.css) [contributor] mustache.js community (mustache.js) [contributor]","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/reference/epoxy.html","id":null,"dir":"Reference","previous_headings":"","what":"Epoxy string interpolation — epoxy","title":"Epoxy string interpolation — epoxy","text":"functions power knitr chunk engines wrappers around glue::glue(), extra conveniences provided epoxy. epoxy() super glue::glue(). epoxy_html() super glue::glue() HTML-specific defaults. epoxy_latex() super glue::glue() LaTeX-specific defaults. functions can called directly used knitr chunk engine chunk text handled string passed function version. used knitr chunk engine, function arguments can passed chunk options. epoxy(), epoxy_html() epoxy_latex() use epoxy_transform_inline() default. transformer brings concise inline-formatting syntax can read ?epoxy_transform_inline. epoxy_html() also includes inline transformation syntax makes easier wrap expression text HTML elements specific ID set classes. Learn syntax ?epoxy_transform_html.","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/reference/epoxy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Epoxy string interpolation — epoxy","text":"","code":"epoxy(   ...,   .data = NULL,   .sep = \"\",   .envir = parent.frame(),   .open = \"{\",   .close = \"}\",   .na = \"\",   .null = \"\",   .comment = character(),   .literal = FALSE,   .trim = FALSE,   .transformer = NULL,   .collapse = NULL,   .style = lifecycle::deprecated() )  epoxy_html(   ...,   .data = NULL,   .sep = \"\",   .envir = parent.frame(),   .open = \"{{\",   .close = \"}}\",   .na = \"\",   .null = \"\",   .comment = \"\",   .literal = FALSE,   .trim = FALSE,   .transformer = NULL,   .collapse = NULL )  epoxy_latex(   ...,   .data = NULL,   .sep = \"\",   .envir = parent.frame(),   .open = \"<<\",   .close = \">>\",   .na = \"\",   .null = \"\",   .comment = \"\",   .literal = FALSE,   .trim = FALSE,   .transformer = NULL,   .collapse = NULL )"},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/reference/epoxy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Epoxy string interpolation — epoxy","text":"... [expressions] Unnamed arguments taken expression string(s) format. Multiple inputs concatenated together formatting. Named arguments taken temporary variables available substitution. .data data set .sep [character(1): ‘\"\"’] Separator used separate elements. .envir [environment: parent.frame()] Environment evaluate expression . Expressions evaluated left right. .x environment, expressions evaluated environment .envir ignored. NULL passed, equivalent emptyenv(). .open [character(1): ‘\\{’] opening delimiter around template variable expression. Doubling full delimiter escapes . .close [character(1): ‘\\}’] closing delimiter around template variable expression. Doubling full delimiter escapes . .na [character(1): ‘NA’] Value replace NA values . NULL missing values propagated, NA result cause NA output. Otherwise value replaced value .na. .null [character(1): ‘character()’] Value replace NULL values . character() whole output character(). NULL NULL values dropped (paste0()). Otherwise value replaced value .null. .comment [character(1): ‘#’] Value use comment character. .literal [boolean(1): ‘FALSE’] Whether treat single double quotes, backticks, comments regular characters (vs. syntactic elements), parsing expression string. Setting .literal = TRUE probably makes sense combination custom .transformer, case glue_col(). Regard argument (especially, name) experimental. .trim [logical(1): ‘TRUE’] Whether trim input template trim() . .transformer transformer function transformer chain created epoxy_transform(). Alternatively, character vector epoxy transformer names, e.g. c(\"bold\", \"collapse\") list epoxy transformers, e.g. list(epoxy_transform_bold(), epoxy_transform_collapse()). epoxy, likely want use defaults consult epoxy_transform() information. See also glue::glue() information transformers. .collapse character string used collapse vector result single value. NULL (default), result collapsed. .style Please use .transformer instead.","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/reference/epoxy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Epoxy string interpolation — epoxy","text":"Returns transformed string, using glue::glue() additional transformers provided .transformer argument epoxy().","code":""},{"path":[]},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/reference/epoxy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Epoxy string interpolation — epoxy","text":"","code":"movie <- bechdel[1, ] movies <- bechdel[2:4, ]  # A basic example with a single row of data epoxy(\"{.emph movie$title} ({movie$year}) was directed by {movie$director}.\") #> _Inception_ (2010) was directed by Christopher Nolan.  # Or vectorized over multiple rows of data epoxy(\"* {.emph movies$title} ({movies$year}) was directed by {movies$director}.\") #> * _Back to the Future Part II_ (1989) was directed by Robert Zemeckis. #> * _The Simpsons Movie_ (2007) was directed by David Silverman. #> * _Another Year_ (2010) was directed by Mike Leigh.  # You can provide the data frame to `.data` to avoid repeating `data$` epoxy(\"{.emph title} ({year}) was directed by {director}.\", .data = movie) #> _Inception_ (2010) was directed by Christopher Nolan. epoxy(\"* {.emph title} ({year}) was directed by {director}.\", .data = movies) #> * _Back to the Future Part II_ (1989) was directed by Robert Zemeckis. #> * _The Simpsons Movie_ (2007) was directed by David Silverman. #> * _Another Year_ (2010) was directed by Mike Leigh.  # Inline transformers can be nested epoxy(\"I'd be happy to watch {.or {.italic title}}.\", .data = movies) #> I'd be happy to watch _Back to the Future Part II_, _The Simpsons Movie_, or _Another Year_. epoxy(\"They were directed by {.and {.bold director}}.\", .data = movies) #> They were directed by **Robert Zemeckis**, **David Silverman**, and **Mike Leigh**.  # Learn more about inline transformers in ?epoxy_transform_inline epoxy(\"The budget for {.emph title} was {.dollar budget}.\", .data = movie) #> The budget for _Inception_ was $160,000,000.  # --------- HTML and LaTeX variants --------- # There are also HTML and LaTeX variants of epoxy. # Each uses default options that are most natural for the format.  # epoxy_html() uses `{{ expr }}` for delimiters epoxy_html(\"I'd be happy to watch {{ title }}.\", .data = movie) #> I'd be happy to watch Inception. # It also supports an HTML transformer syntax epoxy_html(\"I'd be happy to watch {{em.movie-title title}}.\", .data = movie) #> I'd be happy to watch <em class=\"movie-title\">Inception<\/em>. # Or use the inline transformer syntax, which uses `@` instead of `.` in HTML epoxy_html(\"I'd be happy to watch {{@or {{@emph title}} }}.\", .data = movies) #> I'd be happy to watch <em>Back to the Future Part II<\/em>, <em>The Simpsons Movie<\/em>, or <em>Another Year<\/em>.  # epoxy_latex() uses `<< expr >>` for delimiters epoxy_latex(\"I'd be happy to watch <<.or <<.emph title >> >>.\", .data = movies) #> I'd be happy to watch \\emph{Back to the Future Part II}, \\emph{The Simpsons Movie}, or \\emph{Another Year}."},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/reference/epoxy_mustache.html","id":null,"dir":"Reference","previous_headings":"","what":"Mustache-style string interpolation — epoxy_mustache","title":"Mustache-style string interpolation — epoxy_mustache","text":"wrapper around mustache templating language, provided whisker package. hood, epoxy_mustache() uses whisker::whisker.render() render template, adds conveniences: template can passed ... single string, several strings vector strings. multiple strings passed, collapsed .sep (\"\\n\" default). epoxy_mustache() can vectorized items .data argument. .data data frame, vectorization turned default can  iterate rows data frame. output character vector length number rows data frame.","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/reference/epoxy_mustache.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mustache-style string interpolation — epoxy_mustache","text":"","code":"epoxy_mustache(   ...,   .data = parent.frame(),   .sep = \"\\n\",   .vectorized = inherits(.data, \"data.frame\"),   .partials = list() )"},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/reference/epoxy_mustache.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mustache-style string interpolation — epoxy_mustache","text":"... string vector strings containing template(s). Refer mustache documentation overview syntax. multiple strings passed, collapsed .sep (\"\\n\" default). .data data frame list. .data data frame, epoxy_mustache() transform data frame template can applied row data frame. avoid transformation, wrap .data value (). .sep separator use collapsing multiple strings passed ... single template. Defaults \"\\n\". .vectorized TRUE , epoxy_mustache() vectorize items .data. words, item row .data used render template . default, .vectorized set TRUE .data data frame FALSE otherwise. .partials named list partial templates. See whisker::whisker.render() mustache documentation details.","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/reference/epoxy_mustache.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mustache-style string interpolation — epoxy_mustache","text":"character vector length 1 .vectorized FALSE character vector length number rows items .data .vectorized TRUE.","code":""},{"path":[]},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/reference/epoxy_mustache.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mustache-style string interpolation — epoxy_mustache","text":"","code":"# The canonical mustache example epoxy_mustache(   \"Hello {{name}}!\",   \"You have just won {{value}} dollars!\",   \"{{#in_ca}}\",   \"Well, {{taxed_value}} dollars, after taxes.\",   \"{{/in_ca}}\",   .data = list(     name = \"Chris\",     value = 10000,     taxed_value = 10000 - (10000 * 0.4),     in_ca = TRUE   ) ) #> Hello Chris! #> You have just won 10000 dollars! #> Well, 6000 dollars, after taxes. #>   # Vectorized over the rows of .data epoxy_mustache(   \"mpg: {{ mpg }}\",   \"hp: {{ hp }}\",   \"wt: {{ wt }}\\n\",   .data = mtcars[1:2, ] ) #> mpg: 21 #> hp: 110 #> wt: 2.62 #>  #> mpg: 21 #> hp: 110 #> wt: 2.875 #>   # Non-vectorized epoxy_mustache(   \"mpg: {{ mpg }}\",   \"hp: {{ hp }}\",   \"wt: {{ wt }}\",   .data = mtcars[1:2, ],   .vectorized = FALSE ) #> mpg: 21,21 #> hp: 110,110 #> wt: 2.62,2.875  # With mustache partials epoxy_mustache(   \"Hello {{name}}!\",   \"{{> salutation }}\",   \"You have just won {{value}} dollars!\",   \"{{#in_ca}}\",   \"Well, {{taxed_value}} dollars, after taxes.\",   \"{{/in_ca}}\",   .partials = list(     salutation = c(\"Hope you are well, {{name}}.\")   ),   .sep = \" \",   .data = list(     name = \"Chris\",     value = 10000,     taxed_value = 10000 - (10000 * 0.4),     in_ca = TRUE   ) ) #> Hello Chris! Hope you are well, Chris. You have just won 10000 dollars!  Well, 6000 dollars, after taxes."},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/reference/epoxy_style.html","id":null,"dir":"Reference","previous_headings":"","what":"Deprecated: epoxy_style() — epoxy_style","title":"Deprecated: epoxy_style() — epoxy_style","text":"epoxy_style() renamed epoxy_transform() epoxy version 0.1.0.","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/reference/epoxy_style.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deprecated: epoxy_style() — epoxy_style","text":"","code":"epoxy_style(...)  epoxy_style_apply(...)  epoxy_style_bold(...)  epoxy_style_code(...)  epoxy_style_collapse(...)  epoxy_style_get(...)  epoxy_style_html(...)  epoxy_style_inline(...)  epoxy_style_italic(...)  epoxy_style_set(...)  epoxy_style_wrap(...)"},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/reference/epoxy_style.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deprecated: epoxy_style() — epoxy_style","text":"... Passed new epoxy_transform function.","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/reference/epoxy_style.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Deprecated: epoxy_style() — epoxy_style","text":"Returns result new epoxy_transform function.","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/reference/epoxy_style.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Deprecated: epoxy_style() — epoxy_style","text":"epoxy_style(): now epoxy_transform(). epoxy_style_apply(): now epoxy_transform_apply(). epoxy_style_bold(): now epoxy_transform_bold(). epoxy_style_code(): now epoxy_transform_code(). epoxy_style_collapse(): now epoxy_transform_collapse(). epoxy_style_get(): now epoxy_transform_get(). epoxy_style_html(): now epoxy_transform_html(). epoxy_style_inline(): now epoxy_transform_inline(). epoxy_style_italic(): now epoxy_transform_italic(). epoxy_style_set(): now epoxy_transform_set(). epoxy_style_wrap(): now epoxy_transform_wrap().","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/reference/epoxy_transform.html","id":null,"dir":"Reference","previous_headings":"","what":"epoxy Transformers — epoxy_transform","title":"epoxy Transformers — epoxy_transform","text":"transformers provide additional automatic formatting template strings. designed used .transformer chunk option epoxy chunks. can use epoxy_transform() chain several transformers together. epoxy_transform() individual epoxy transform functions can used epoxy, epoxy_html epoxy_latex chunks choose correct engine .","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/reference/epoxy_transform.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"epoxy Transformers — epoxy_transform","text":"","code":"epoxy_transform(..., engine = NULL, syntax = lifecycle::deprecated())  epoxy_transform_get(engine = c(\"md\", \"html\", \"latex\"), inline = FALSE)  epoxy_transform_set(..., engine = NULL, syntax = lifecycle::deprecated())"},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/reference/epoxy_transform.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"epoxy Transformers — epoxy_transform","text":"... Transformer functions, e.g. epoxy_transform_bold name epoxy transform function, e.g. \"bold\", call transform function, e.g. epoxy_transform_bold(). epoxy_transform() chains transformer functions together, applying transformers order first last. example, epoxy_transform(\"bold\", \"collapse\") results replaced strings emboldened collapsed, e.g. **** **b**. hand, epoxy_transform(\"collapse\", \"bold\")  collapse vector embolden entire string. epoxy_transform_apply(), ... passed underlying call underlying function call. epoxy_transform_collapse(), ... ignored. engine One \"markdown\" (\"md\"), \"html\", \"latex\". default chosen based engine chunk transform function called, according option epoxy.engine. Caution: invalid options silently ignored, falling back \"markdown\". syntax Use engine instead. inline epoxy_transform_get(), whether return session-specific inline formatting functions epoxy_transform_inline().","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/reference/epoxy_transform.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"epoxy Transformers — epoxy_transform","text":"function text envir suitable .transformer argument glue::glue().","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/reference/epoxy_transform.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"epoxy Transformers — epoxy_transform","text":"epoxy_transform(): Construct chained transformer using epoxy transformers use glue transformer. resulting transformers can passed .transformer argument epoxy() glue::glue(). epoxy_transform_get(): Get default epoxy .transformer epoxy engines subset engines. epoxy_transform_set(): Set default epoxy .transformer epoxy engines subset engines.","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/reference/epoxy_transform.html","id":"output-specific-transformations","dir":"Reference","previous_headings":"","what":"Output-specific transformations","title":"epoxy Transformers — epoxy_transform","text":"epoxy_transform_ functions attempt use correct engine transforming replacement text markdown, HTML LaTeX. choice driven chunk engine transformer function used. epoxy engine corresponds markdown, epoxy_html HTML, epoxy_latex LaTeX. Automatic engine selection works epoxy transform functions used epoxy knitr engines knitr rendering process. used outside context, can choose desired engine setting engine one \"markdown\", \"html\" \"latex\".","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/reference/epoxy_transform.html","id":"session-wide-settings","dir":"Reference","previous_headings":"","what":"Session-wide settings","title":"epoxy Transformers — epoxy_transform","text":"change transformer used epoxy() HTML LaTeX variants, use epoxy_transform_set(). function takes values epoxy_transform(), makes default transformer epoxy() calls specify transformer. default, setting made engines, can specify single engine engine argument. small example applies bold collapse transformers epoxy chunks:   often, want update default transformer customize formatting functions used inline transformer. can use epoxy_transform_set() change settings existing formatting functions add new one. Pass new function argument dot-prefixed name. next example setting .dollar transformation use \"K\" \"M\" abbreviate large numbers. also adding transformation truncates long strings fit 8 characters.   Note engine argument can used even inline tranformations, e.g. apply change HTML can use engine = \"html\". unset session defaults, two options: Unset everything passing NULL epoxy_transform_set():   Unset single inline transformation passing rlang::zap() named argument:   can provide new values overwrite current settings. , can unset session defaults specific engine.","code":"epoxy_transform_set(\"bold\", \"collapse\") epoxy_transform_set(   .dollar = scales::label_dollar(     accuracy = 0.01,     scale_cut = scales::cut_short_scale()   ),   .trunc8 = function(x) glue::glue_collapse(x, width = 8) )  epoxy(\"{.dollar 12345678}\") #> $12.34M epoxy(\"{.trunc8 12345678}\") #> 12345... epoxy_transform_set(NULL) epoxy_transform_set(.dollar = rlang::zap())"},{"path":[]},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/reference/epoxy_transform.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"epoxy Transformers — epoxy_transform","text":"","code":"epoxy(\"{.strong {.and letters[1:3]}}\") #> **a, b, and c** epoxy(\"{.and {.strong letters[1:3]}}\") #> **a**, **b**, and **c**  # If you used the development version of epoxy, the above is equivalent to: epoxy(\"{letters[1:3]&}\", .transformer = epoxy_transform(\"bold\", \"collapse\")) #> **a**, **b**, and **c** epoxy(\"{letters[1:3]&}\", .transformer = epoxy_transform(\"collapse\", \"bold\")) #> **a, b, and c**  # In an epoxy_html chunk... epoxy_html(\"{{.strong {{.or letters[1:3]}} }}\") #> <span class=\"strong\">a, b, or c<\/span>  # Or in an epoxy_latex chunk... epoxy_latex(\"<<.and <<.strong letters[1:3]>> >>\") #> \\textbf{a}, \\textbf{b}, and \\textbf{c}  # ---- Other Transformers ----  # Format numbers with an inline transformation amount <- 123.4234234 epoxy(\"{.number amount}\") #> 123 epoxy(   \"{.number amount}\",   .transformer = epoxy_transform_inline(     .number = scales::label_number(accuracy = 0.01)   ) ) #> 123.42  # Apply _any_ function to all replacements epoxy(   \"{amount} is the same as {amount}\",   .transformer = epoxy_transform_apply(round, digits = 0) ) #> 123 is the same as 123  epoxy(   \"{amount} is the same as {amount}\",   .transformer = epoxy_transform(     epoxy_transform_apply(~ .x * 100),     epoxy_transform_apply(round, digits = 2),     epoxy_transform_apply(~ paste0(.x, \"%\"))   ) ) #> 12342.34% is the same as 12342.34%"},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/reference/epoxy_transform_html.html","id":null,"dir":"Reference","previous_headings":"","what":"Concise syntax for expressions inside HTML elements — epoxy_transform_html","title":"Concise syntax for expressions inside HTML elements — epoxy_transform_html","text":"epoxy_transform_html() provides pug-like syntax expressions HTML wrapped HTML elements.","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/reference/epoxy_transform_html.html","id":"syntax","dir":"Reference","previous_headings":"","what":"Syntax","title":"Concise syntax for expressions inside HTML elements — epoxy_transform_html","text":"can specify HTML element id class text expression placed. template specify element using syntax , followed R expression, separated space:   example, place expression <li> element id = \"food\" class = \"fruit\", write   item HTML template optional: specific HTML element desired, element name must first. element specified, default set element argument epoxy_transform_html() used. IDs specified using #<id> one ID may present Classes written using .<class> many classes desired allowed. expression vector, element container used item vector. Finally, expression returns HTML, escaped default. can either use htmltools::HTML() mark safe HTML R, can write !!expr inline markup: {{ li#food.fruit !!fruit_name }}.","code":"{{ [<element>][#<id> | .<class>...] expr }} {{ li#food.fruit fruit_name }}"},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/reference/epoxy_transform_html.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Concise syntax for expressions inside HTML elements — epoxy_transform_html","text":"","code":"epoxy_transform_html(   class = NULL,   element = \"span\",   collapse = TRUE,   transformer = glue::identity_transformer )"},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/reference/epoxy_transform_html.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Concise syntax for expressions inside HTML elements — epoxy_transform_html","text":"class [character()] Additional classes added inline HTML element. element [character() default HTML element tag name used element specified expression. collapse [logical(1)] TRUE, transformed HTML outputs collapsed single character string. helpful including value vector within outer HTML tag. Use collapse = FALSE return vector HTML character strings instead, follows typically expect glue::glue(), .e. want repeat outer wrapping text element vector. transformer transformer apply replacement string. argument used chaining transformer functions. providing function argument can apply additional transformation current transformation. nearly cases, can let epoxy_transform() handle . chain ends glue::identity_transformer() used transformer.","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/reference/epoxy_transform_html.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Concise syntax for expressions inside HTML elements — epoxy_transform_html","text":"function text envir suitable .transformer argument glue::glue().","code":""},{"path":[]},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/reference/epoxy_transform_html.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Concise syntax for expressions inside HTML elements — epoxy_transform_html","text":"","code":"epoxy_html(\"<ul>{{ li letters[1:3] }}<\/ul>\") #> <ul><li>a<\/li><li>b<\/li><li>c<\/li><\/ul> epoxy_html(\"<ul>{{ li.alpha letters[1:3] }}<\/ul>\") #> <ul><li class=\"alpha\">a<\/li><li class=\"alpha\">b<\/li><li class=\"alpha\">c<\/li><\/ul> epoxy_html(\"<ul>{{ li#my-letter letters[7] }}<\/ul>\") #> <ul><li id=\"my-letter\">g<\/li><\/ul>  # The default element is used if no element is directly requested epoxy_html(\"My name starts with {{ .name-letter letters[7] }}\") #> My name starts with <span class=\"name-letter\">g<\/span>  epoxy_html(   \"{{ h3#title title }}\",   title = \"Epoxy for HTML\" ) #> <h3 id=\"title\">Epoxy for HTML<\/h3>  # If your replacement text contains HTML, it's escaped by default. hello <- \"<strong>Hi there!<\/strong>\" epoxy_html(\"{{ hello }}\") #> &lt;strong&gt;Hi there!&lt;/strong&gt;  # You can use !! inline to mark the text as safe HTML... epoxy_html(\"{{ !!hello }}\") #> <strong>Hi there!<\/strong> epoxy_html(\"{{ button !!hello }}\") #> <button><strong>Hi there!<\/strong><\/button>  # ...or you can use htmltools::HTML() to mark it as safe HTML in R. hello <- htmltools::HTML(\"<strong>Hi there!<\/strong>\") epoxy_html(\"{{ hello }}\") #> <strong>Hi there!<\/strong>"},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/reference/epoxy_transform_inline.html","id":null,"dir":"Reference","previous_headings":"","what":"Epoxy Inline Transformer — epoxy_transform_inline","title":"Epoxy Inline Transformer — epoxy_transform_inline","text":"epoxy transformer heavily inspired inline formatters cli package. syntax quite similar, epoxy's syntax slightly different accommodate reporting use cases. transform template expression inline, include keyword, prefixed dot (.) used format value template expression place.   formatters, e.g. .dollar example , can customized using arguments epoxy_transform_inline(). Pass customized scales::label_dollar() .dollar achieve different transformation.   Note , unlike inline markup cli, text within template expression, keyword, treated R expression.   can also nest inline markup expressions.   Finally, can provide functions applied evaluated expression. example, add .runif inline formatter generates n random numbers (taken template expression) sorts .","code":"epoxy(\"It cost {.dollar 123456}.\", .transformer = \"inline\") #> It cost $123,456. dollars_nzd <- scales::label_dollar(suffix = \" NZD\")  epoxy(   \"It cost {.dollar 123456}.\",   .transformer = epoxy_transform_inline(.dollar = dollars_nzd) ) #> It cost $123,456 NZD. money <- 123456 epoxy(\"It cost {.dollar money}.\", .transformer = \"inline\") #> It cost $123,456. money <- c(123.456, 234.567) epoxy(\"It will cost either {.or {.dollar money}}.\", .transformer = \"inline\") #> It will cost either $123.46 or $234.57. set.seed(4242)  epoxy(   \"Here are three random percentages: {.and {.pct {.runif 3}}}.\",   .transformer = epoxy_transform_inline(     .runif = function(n) sort(runif(n))   ) ) #> Here are three random percentages: 23%, 35%, and 99%."},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/reference/epoxy_transform_inline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Epoxy Inline Transformer — epoxy_transform_inline","text":"","code":"epoxy_transform_inline(   ...,   transformer = glue::identity_transformer,   .and = and::and,   .or = and::or,   .incr = sort,   .decr = function(x) sort(x, decreasing = TRUE),   .bytes = scales::label_bytes(),   .date = function(x) format(x, format = \"%F\"),   .time = function(x) format(x, format = \"%T\"),   .datetime = function(x) format(x, format = \"%F %T\"),   .dollar = scales::label_dollar(prefix = engine_pick(\"$\", \"$\", \"\\\\$\")),   .number = scales::label_number(),   .comma = scales::label_comma(),   .ordinal = scales::label_ordinal(),   .percent = scales::label_percent(suffix = engine_pick(\"%\", \"%\", \"\\\\%\")),   .pvalue = scales::label_pvalue(),   .scientific = scales::label_scientific(),   .uppercase = toupper,   .lowercase = tolower,   .titlecase = function(x) tools::toTitleCase(as.character(x)),   .sentence = function(x) `substr<-`(x, 1, 1, toupper(substr(x, 1, 1))),   .squote = function(x) sQuote(x, q = getOption(\"epoxy.fancy_quotes\", FALSE)),   .dquote = function(x) dQuote(x, q = getOption(\"epoxy.fancy_quotes\", FALSE)),   .strong = NULL,   .emph = NULL,   .code = NULL )"},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/reference/epoxy_transform_inline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Epoxy Inline Transformer — epoxy_transform_inline","text":"... Additional named inline transformers functions taking least one argument. evaluated expression template expression passed first argument function. argument names must include leading . match syntax used inline. transformer transformer apply replacement string. argument used chaining transformer functions. providing function argument can apply additional transformation current transformation. nearly cases, can let epoxy_transform() handle . chain ends glue::identity_transformer() used transformer. .function apply x template {.x}. Default ::(). .function apply x template {.x}. Default ::(). .incr function apply x template {.incr x}. Default sort(). .decr function apply x template {.decr x}. Default function(x) sort(x, decreasing = TRUE). .bytes function apply x template {.bytes x}. Default scales::label_bytes(). .date function apply x template {.date x}. Default function(x) format(x, format = \"%F\"). .time function apply x template {.time x}. Default function(x) format(x, format = \"%T\"). .datetime function apply x template {.datetime x} {.dttm x}. Default function(x) format(x, format = \"%F %T\"). .dollar function apply x template {.dollar x}. Default scales::label_dollar(prefix = engine_pick(\"$\", \"$\", \"\\\\$\")). .number function apply x template {.number x} {.num x}. Default scales::label_number(). .comma function apply x template {.comma x}. Default scales::label_comma(). .ordinal function apply x template {.ordinal x}. Default scales::label_ordinal(). .percent function apply x template {.percent x} {.pct x}. Default scales::label_percent(suffix = engine_pick(\"%\", \"%\", \"\\\\%\")). .pvalue function apply x template {.pvalue x}. Default scales::label_pvalue(). .scientific function apply x template {.scientific x}. Default scales::label_scientific(). .uppercase function apply x template {.uppercase x} {.uc x}. Default toupper(). .lowercase function apply x template {.lowercase x} {.lc x}. Default tolower(). .titlecase function apply x template {.titlecase x} {.tc x}. Default function(x) tools::toTitleCase(.character(x)). .sentence function apply x template {.sentence x} {.sc x}. Default function(x) `substr<-`(x, 1, 1, toupper(substr(x, 1, 1))). .squote function apply x template {.squote x}. Default function(x) sQuote(x, q = getOption(\"epoxy.fancy_quotes\", FALSE)). .dquote function apply x template {.dquote x}. Default function(x) dQuote(x, q = getOption(\"epoxy.fancy_quotes\", FALSE)). .strong function apply x template {.strong x} {.bold x}. Default chosen internally based output format. .emph function apply x template {.emph x} {.italic x}. Default chosen internally based output format. .code function apply x template {.code x}. Default chosen internally based output format.","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/reference/epoxy_transform_inline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Epoxy Inline Transformer — epoxy_transform_inline","text":"function text envir suitable .transformer argument glue::glue().","code":""},{"path":[]},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/reference/epoxy_transform_inline.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Epoxy Inline Transformer — epoxy_transform_inline","text":"","code":"revenue <- 0.2123 sales <- 42000.134  # ---- Basic Example with Inline Formatting -------------------------------- epoxy(   '{.pct revenue} of revenue generates {.dollar sales} in profits.' ) #> 21% of revenue generates $42,000.13 in profits.  # With standard {glue} (`epoxy_transform_inline()` is a glue transformer) glue::glue(   '{.pct revenue} of revenue generates {.dollar sales} in profits.',   .transformer = epoxy_transform_inline() ) #> 21% of revenue generates $42,000.13 in profits.  # ---- Setting Inline Formatting Options ---------------------------------- # To set inline format options, provide `scales::label_*()` to the supporting # epoxy_transform_inline arguments. epoxy(   '{.pct revenue} of revenue generates {.dollar sales} in profits.',   .transformer = epoxy_transform_inline(     .percent = scales::label_percent(accuracy = 0.1),     .dollar = scales::label_dollar(accuracy = 10)   ) ) #> 21.2% of revenue generates $42,000 in profits.  glue::glue(   '{.pct revenue} of revenue generates {.dollar sales} in profits.',   .transformer = epoxy_transform_inline(     .percent = scales::label_percent(accuracy = 0.1),     .dollar = scales::label_dollar(accuracy = 10)   ) ) #> 21.2% of revenue generates $42,000 in profits.  # ---- Custom Inline Formatting ------------------------------------------ # Add your own formatting functions search <- \"why are cats scared of cucumbers\"  epoxy_html(   \"https://example.com?q={{ .url_encode search }}>\",   .transformer = epoxy_transform_inline(     .url_encode = utils::URLencode   ) ) #> https://example.com?q=why%20are%20cats%20scared%20of%20cucumbers>"},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/reference/epoxy_transform_one_shot.html","id":null,"dir":"Reference","previous_headings":"","what":"One-shot epoxy transformers — epoxy_transform_one_shot","title":"One-shot epoxy transformers — epoxy_transform_one_shot","text":"transformers useful applying transformation every replacement template.","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/reference/epoxy_transform_one_shot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"One-shot epoxy transformers — epoxy_transform_one_shot","text":"","code":"epoxy_transform_wrap(   before = \"**\",   after = before,   engine = NULL,   transformer = glue::identity_transformer,   syntax = lifecycle::deprecated() )  epoxy_transform_bold(engine = NULL, transformer = glue::identity_transformer)  epoxy_transform_italic(engine = NULL, transformer = glue::identity_transformer)  epoxy_transform_apply(   .f = identity,   ...,   transformer = glue::identity_transformer )  epoxy_transform_code(engine = NULL, transformer = glue::identity_transformer)  epoxy_transform_collapse(   sep = \", \",   last = sep,   language = NULL,   ...,   transformer = glue::identity_transformer )"},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/reference/epoxy_transform_one_shot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"One-shot epoxy transformers — epoxy_transform_one_shot","text":", epoxy_transform_wrap(), characters added variables template string. engine One \"markdown\" (\"md\"), \"html\", \"latex\". default chosen based engine chunk transform function called, according option epoxy.engine. Caution: invalid options silently ignored, falling back \"markdown\". transformer transformer apply replacement string. argument used chaining transformer functions. providing function argument can apply additional transformation current transformation. nearly cases, can let epoxy_transform() handle . chain ends glue::identity_transformer() used transformer. syntax Use engine instead. .f function, function name purrr::map()-style inline function. ... Transformer functions, e.g. epoxy_transform_bold name epoxy transform function, e.g. \"bold\", call transform function, e.g. epoxy_transform_bold(). epoxy_transform() chains transformer functions together, applying transformers order first last. example, epoxy_transform(\"bold\", \"collapse\") results replaced strings emboldened collapsed, e.g. **** **b**. hand, epoxy_transform(\"collapse\", \"bold\")  collapse vector embolden entire string. epoxy_transform_apply(), ... passed underlying call underlying function call. epoxy_transform_collapse(), ... ignored. sep, last separator use joining vector elements expression ends *. Elements separated sep, except last two elements, use last. language epoxy_transform_collapse(), language passed ::() ::() choose correct /phrase spacing language. default, follow system language. See ::and_languages supported languages.","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/reference/epoxy_transform_one_shot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"One-shot epoxy transformers — epoxy_transform_one_shot","text":"function text envir suitable .transformer argument glue::glue().","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/reference/epoxy_transform_one_shot.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"One-shot epoxy transformers — epoxy_transform_one_shot","text":"epoxy_transform_wrap(): Wrap variables text added inline expression. epoxy_transform_bold(): Embolden variables using ** markdown, <strong> HTML, \\textbf{} LaTeX. epoxy_transform_italic(): Italicize variables using _ markdown, <em> HTML, \\emph{} LaTeX. epoxy_transform_apply(): Apply function replacement expressions. epoxy_transform_code(): Code format variables using `` markdown, <code> HTML, \\texttt{} LaTeX. epoxy_transform_collapse(): Collapse vector variables succinct syntax (see epoxy_transform_inline() readable option).","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/reference/epoxy_transform_one_shot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"One-shot epoxy transformers — epoxy_transform_one_shot","text":"","code":"abc <- c(\"a\", \"b\", \"c\")  epoxy(\"{abc}\", .transformer = epoxy_transform_wrap(\"'\")) #> 'a' #> 'b' #> 'c'  epoxy(\"{abc}\", .transformer = epoxy_transform_bold()) #> **a** #> **b** #> **c**  epoxy(\"{abc}\", .transformer = epoxy_transform_italic()) #> _a_ #> _b_ #> _c_  epoxy(\"{abc}\", .transformer = epoxy_transform_code()) #> `a` #> `b` #> `c`  epoxy(\"{abc}\", .transformer = epoxy_transform_apply(toupper)) #> A #> B #> C"},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/reference/epoxy_use.html","id":null,"dir":"Reference","previous_headings":"","what":"Reuse a Template Chunk — epoxy_use","title":"Reuse a Template Chunk — epoxy_use","text":"Reuse template another chunk file. calling epoxy_use_chunk() R chunk inline R expression, can reuse template defined another chunk document. Alternatively, can store template separate file use epoxy_use_file() reuse . stored file, template file can contain YAML front matter (following rules pandoc documents) options applied calling epoxy function. specific function called epoxy_use_file() can set via engine option YAML front matter; default epoxy().","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/reference/epoxy_use.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reuse a Template Chunk — epoxy_use","text":"","code":"epoxy_use_chunk(.data = NULL, label, ...)  epoxy_use_file(.data = NULL, file, ...)"},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/reference/epoxy_use.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reuse a Template Chunk — epoxy_use","text":".data data set label chunk label, .e. human-readable name, chunk containing template string. chunk epoxy, epoxy_html epoxy-provided chunk type must label. epoxy_use_chunk() apply options chunk template, giving preference arguments epoxy_use_chunk() chunk options called. See \"Template Options\" section details. ... Arguments passed epoxy .transformer transformer function transformer chain created epoxy_transform(). Alternatively, character vector epoxy transformer names, e.g. c(\"bold\", \"collapse\") list epoxy transformers, e.g. list(epoxy_transform_bold(), epoxy_transform_collapse()). epoxy, likely want use defaults consult epoxy_transform() information. See also glue::glue() information transformers. .style Please use .transformer instead. .open [character(1): ‘\\{’] opening delimiter around template variable expression. Doubling full delimiter escapes . .close [character(1): ‘\\}’] closing delimiter around template variable expression. Doubling full delimiter escapes . .collapse character string used collapse vector result single value. NULL (default), result collapsed. .sep [character(1): ‘\"\"’] Separator used separate elements. .envir [environment: parent.frame()] Environment evaluate expression . Expressions evaluated left right. .x environment, expressions evaluated environment .envir ignored. NULL passed, equivalent emptyenv(). .na [character(1): ‘NA’] Value replace NA values . NULL missing values propagated, NA result cause NA output. Otherwise value replaced value .na. .null [character(1): ‘character()’] Value replace NULL values . character() whole output character(). NULL NULL values dropped (paste0()). Otherwise value replaced value .null. .comment [character(1): ‘#’] Value use comment character. .literal [boolean(1): ‘FALSE’] Whether treat single double quotes, backticks, comments regular characters (vs. syntactic elements), parsing expression string. Setting .literal = TRUE probably makes sense combination custom .transformer, case glue_col(). Regard argument (especially, name) experimental. .trim [logical(1): ‘TRUE’] Whether trim input template trim() . file template file, .e. plain text file, containing template. .md .txt file extension recommended. addition template, file may also contain YAML front matter containing options used rendering template via epoxy().","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/reference/epoxy_use.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reuse a Template Chunk — epoxy_use","text":"character string rendered template based label chunk. results marked \"asis\" output treated regular text rather displayed code results.","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/reference/epoxy_use.html","id":"use-in-r-markdown-or-quarto","dir":"Reference","previous_headings":"","what":"Use in R Markdown or Quarto","title":"Reuse a Template Chunk — epoxy_use","text":"can even use inline:   hard believe Back Future Part II released 1989. template also stored file, e.g. movie-release.md:   YAML front matter used template files set options template. can use engine option choose epoxy function applied template, e.g. engine: epoxy_html engine: epoxy_latex. default, engine: epoxy assumed unless otherwise specified.","code":"```{epoxy movie-release} {.emph title} was released in {year}. ```  ```{r} # Re-using the template we defined above epoxy_use_chunk(bechdel[1, ], \"movie-release\") ```  ```{r} # Using in a dplyr pipeline bechdel |>   dplyr::filter(year == 1989) |>   epoxy_use_chunk(\"movie-release\") ``` It's hard to believe that `r epoxy_use_chunk(bechdel[2, ], \"movie-release\")`. --- engine: epoxy ---  {.emph title} was released in {year}."},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/reference/epoxy_use.html","id":"template-options","dir":"Reference","previous_headings":"","what":"Template Options","title":"Reuse a Template Chunk — epoxy_use","text":"rendering template, epoxy_use_chunk() epoxy_use_file() inherit options set number different ways. final template options determined following order, ranked importance. Options set higher-ranked location override options set lower-ranked location. arguments passed epoxy_use_chunk(), .data arguments passed .... options always preference options set anywhere else. chunk options chunk epoxy_use_chunk() epoxy_use_file() called. chunk options template chunk file. options typically relevant template , engine used opening closing delimiters. Global knitr chunk options document. can set knitr::opts_chunk$set(), see ?knitr::opts_chunk information.","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/reference/render_epoxy.html","id":null,"dir":"Reference","previous_headings":"","what":"Render Epoxy Output — render_epoxy","title":"Render Epoxy Output — render_epoxy","text":"Server-side render function used provide values template items. Use named values matching template variable names associated ui_epoxy_html() ui_epoxy_mustache(). values updated app, render_epoxy() update values shown app's UI.","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/reference/render_epoxy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Render Epoxy Output — render_epoxy","text":"","code":"render_epoxy(   ...,   .list = NULL,   env = parent.frame(),   outputFunc = ui_epoxy_html,   outputArgs = list() )  renderEpoxyHTML(..., env = parent.frame())"},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/reference/render_epoxy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Render Epoxy Output — render_epoxy","text":"... Named values corresponding template variables created associated ui_epoxy_html() UI element. .list named list shiny::reactiveValues() list names corresponding template variables created associated ui_epoxy_html() UI element. env environment evaluate ... outputFunc Either ui_epoxy_html() ui_epoxy_mustache(), .e. UI function paired output. used calling render_epoxy() Shiny runtime R Markdown document providing output without explicit, corresponding UI element. outputArgs list arguments passed implicit call ui_epoxy_html() render_epoxy used interactive R Markdown document.","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/reference/render_epoxy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Render Epoxy Output — render_epoxy","text":"server-side Shiny render function assigned Shiny's output object named match .id corresponding ui_epoxy_html() call.","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/reference/render_epoxy.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Render Epoxy Output — render_epoxy","text":"renderEpoxyHTML():  Deprecated alias, please use render_epoxy().","code":""},{"path":[]},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/reference/render_epoxy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Render Epoxy Output — render_epoxy","text":"","code":"# This small app shows the current time using `ui_epoxy_html()` # to provide the HTML template and `render_epoxy()` to # update the current time every second.  ui <- shiny::fluidPage(   shiny::h2(\"Current Time\"),   ui_epoxy_html(     \"time\",     shiny::p(\"The current time is {{strong time}}.\")   ) )  server <- function(input, output, session) {   current_time <- shiny::reactive({     shiny::invalidateLater(1000)     strftime(Sys.time(), \"%F %T\")   })    output$time <- render_epoxy(time = current_time()) }  if (rlang::is_interactive()) {   shiny::shinyApp(ui, server) } if (FALSE) { # rlang::is_interactive() run_epoxy_example_app(\"render_epoxy\") }"},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/reference/run_epoxy_example_app.html","id":null,"dir":"Reference","previous_headings":"","what":"Example epoxy Shiny apps — run_epoxy_example_app","title":"Example epoxy Shiny apps — run_epoxy_example_app","text":"Run example epoxy Shiny app showcasing Shiny UI server components provided epoxy.","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/reference/run_epoxy_example_app.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example epoxy Shiny apps — run_epoxy_example_app","text":"","code":"run_epoxy_example_app(   name = c(\"ui_epoxy_html\", \"ui_epoxy_markdown\", \"ui_epoxy_mustache\", \"render_epoxy\"),   display.mode = \"showcase\",   ... )"},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/reference/run_epoxy_example_app.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Example epoxy Shiny apps — run_epoxy_example_app","text":"name Name example, currently one \"ui_epoxy_html\", \"ui_epoxy_markdown\", \"ui_epoxy_mustache\", \"render_epoxy\". display.mode mode display application. set value \"showcase\", shows application code metadata DESCRIPTION file application directory alongside application. set \"normal\", displays application normally. Defaults \"auto\", displays application mode given DESCRIPTION file, . ... Arguments passed shiny::runApp appDir application run. one following: directory containing server.R, plus, either ui.R www directory contains file index.html. directory containing app.R. .R file containing Shiny application, ending expression produces Shiny app object. list ui server components. Shiny app object created shinyApp(). port TCP port application listen . port specified, shiny.port option set (options(shiny.port = XX)), port used. Otherwise, use random port 3000:8000, excluding ports blocked Google Chrome considered unsafe: 3659, 4045, 5060, 5061, 6000, 6566, 6665:6669 6697. twenty random ports tried. launch.browser true, system's default web browser launched automatically app started. Defaults true interactive sessions . value parameter can also function call application's URL. host IPv4 address application listen . Defaults shiny.host option, set, \"127.0.0.1\" . See Details. workerId Can generally ignored. Exists help editions Shiny Server Pro route requests correct process. quiet Shiny status messages shown? Defaults FALSE. test.mode application launched test mode? used recording running automated tests. Defaults shiny.testmode option, FALSE option set.","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/reference/run_epoxy_example_app.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Example epoxy Shiny apps — run_epoxy_example_app","text":"Runs Shiny example app interactively. Nothing returned.","code":""},{"path":[]},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/reference/run_epoxy_example_app.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example epoxy Shiny apps — run_epoxy_example_app","text":"","code":"# List examples by passing `name = NULL` run_epoxy_example_app(name = NULL) #> Example app options: #> • render_epoxy #> • ui_epoxy_html #> • ui_epoxy_markdown #> • ui_epoxy_mustache #> • word-list"},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/reference/ui_epoxy_html.html","id":null,"dir":"Reference","previous_headings":"","what":"Epoxy HTML Output for Shiny — ui_epoxy_html","title":"Epoxy HTML Output for Shiny — ui_epoxy_html","text":"glue-like output Shiny. ui_epoxy_html() lets use placeholders HTML \"{{first_name}}\", provided values server giving render_epoxy() first_name value. Unlike ui_epoxy_mustache(), updates highly targeted: regions server-side data changed updated ui_epoxy_html().","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/reference/ui_epoxy_html.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Epoxy HTML Output for Shiny — ui_epoxy_html","text":"","code":"ui_epoxy_html(   .id,   ...,   .class = NULL,   .style = NULL,   .item_tag = \"span\",   .item_class = NULL,   .placeholder = \"\",   .sep = \"\",   .open = \"{{\",   .close = \"}}\",   .na = \"\",   .null = \"\",   .literal = FALSE,   .trim = FALSE,   .aria_live = c(\"polite\", \"off\", \"assertive\"),   .aria_atomic = TRUE,   .class_item = deprecated(),   .container = deprecated(),   .container_item = deprecated() )  epoxyHTML(.id, ...)"},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/reference/ui_epoxy_html.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Epoxy HTML Output for Shiny — ui_epoxy_html","text":".id output id ... UI elements text (treated HTML), containing template variables. Use named values provide initial placeholder values. .class, .style Classes inline style directives added <epoxy-html> container elements ... placed. .item_tag, .item_class HTML element tag name classes used wrap template variable. default, template wrapped <span>. .placeholder Default placeholder template variable placeholder provided. .sep [character(1): ‘\"\"’] Separator used separate elements. .open [character(1): ‘\\{’] opening delimiter around template variable expression. Doubling full delimiter escapes . .close [character(1): ‘\\}’] closing delimiter around template variable expression. Doubling full delimiter escapes . .na [character(1): ‘NA’] Value replace NA values . NULL missing values propagated, NA result cause NA output. Otherwise value replaced value .na. .null [character(1): ‘character()’] Value replace NULL values . character() whole output character(). NULL NULL values dropped (paste0()). Otherwise value replaced value .null. .literal [boolean(1): ‘FALSE’] Whether treat single double quotes, backticks, comments regular characters (vs. syntactic elements), parsing expression string. Setting .literal = TRUE probably makes sense combination custom .transformer, case glue_col(). Regard argument (especially, name) experimental. .trim [logical(1): ‘TRUE’] Whether trim input template trim() . .aria_live, .aria_atomic aria-live aria-atomic attribute values entire template region. default, \"polite\", updates within region announced via screen readers. template includes changes lots disparate areas, better set \"aria-live\" = \"polite\" \"aria-atomic\" = \"true\" specific regions announced together. Otherwise, default announce entire region within ui_epoxy_html() whenever values within change. words, set .aria_live = \"\" .aria_atomic = NULL ui_epoxy_html() parent item set \"aria-live\" = \"polite\" \"aria-atomic\" = \"true\" parent containers region app receives updates. ui_epoxy_html() targeted updates, changing parts UI changed. .class_item Deprecated epoxy v1.0.0, please use .item_class instead. .container Deprecated epoxy v1.0.0, container now always <epoxy-html>. .container_item Deprecated epoxy v1.0.0, please use .item_tag instead.","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/reference/ui_epoxy_html.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Epoxy HTML Output for Shiny — ui_epoxy_html","text":"HTML object.","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/reference/ui_epoxy_html.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Epoxy HTML Output for Shiny — ui_epoxy_html","text":"epoxyHTML():  Deprecated alias, please use ui_epoxy_html().","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/reference/ui_epoxy_html.html","id":"html-markup","dir":"Reference","previous_headings":"","what":"HTML Markup","title":"Epoxy HTML Output for Shiny — ui_epoxy_html","text":"default, placeholders inserted <span> element UI, classes specified .class_item. ui_epoxy_html() also supports HTML markup syntax similar pug (HTML preprocessor). example, markup syntax   creates demo placeholder inside following tag.   placeholder template string follows pattern {{<markup> <name>}}. markup syntax comes first, separated placeholder name space. HTML element first, followed classes prefixed . ID prefixed #. template markup can contain one element one ID, many classes can specified. default, placeholder assumed text content HTML sent placeholder escaped --- words sent \"<strong>word<\/strong>\", see exact literal text app, rather emboldened word. mark placeholder safe accept HTML, use !! placeholder, e.g. {{<markup> !!<name>}}. {{h3 !!demo}} create <h3> tag accepts HTML within .","code":"\"{{h3.example.basic#basic-three demo}}\" <h3 id=\"basic-three\" class=\"example basic\"><\/h3>"},{"path":[]},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/reference/ui_epoxy_html.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Epoxy HTML Output for Shiny — ui_epoxy_html","text":"","code":"library(shiny)  ui <- fluidPage(   h2(\"ui_epoxy_html demo\"),   ui_epoxy_html(     .id = \"example\",     .item_class = \"inner\",     fluidRow(       tags$div(         class = \"col-xs-4\",         selectInput(           inputId = \"thing\",           label = \"What is this {{color}} thing?\",           choices = c(\"apple\", \"banana\", \"coconut\", \"dolphin\")         )       ),       tags$div(         class = \"col-xs-4\",         selectInput(           inputId = \"color\",           label = \"What color is the {{thing}}?\",           c(\"red\", \"blue\", \"black\", \"green\", \"yellow\")         )       ),       tags$div(         class = \"col-xs-4\",         sliderInput(           inputId = \"height\",           label = \"How tall is the {{color}} {{thing}}?\",           value = 5,           min = 0,           max = 10,           step = 0.1,           post = \"ft\"         )       )     ),     tags$p(class = \"big\", \"The {{color}} {{thing}} is {{height}} feet tall.\"),     # Default values for placeholders above.     thing = \"THING\",     color = \"COLOR\",     height = \"HEIGHT\"   ),   tags$style(HTML(     \".big { font-size: 1.5em; }      .inner { background-color: rgba(254, 233, 105, 0.5);}      .epoxy-item__placeholder { color: #999999; background-color: unset; }\"   )) )  server <- function(input, output, session) {   output$example <- render_epoxy(     thing = input$thing,     color = input$color,     height = input$height   ) }  if (interactive()) {   shinyApp(ui, server) } if (FALSE) { # rlang::is_interactive() run_epoxy_example_app(\"ui_epoxy_html\") }"},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/reference/ui_epoxy_markdown.html","id":null,"dir":"Reference","previous_headings":"","what":"Epoxy Markdown Template for Shiny — ui_epoxy_markdown","title":"Epoxy Markdown Template for Shiny — ui_epoxy_markdown","text":"Create reactive HTML Markdown template. ui_epoxy_markdown() uses template syntax ui_epoxy_html(), rather requiring HTML inputs, can write markdown. template first rendered markdown HTML using pandoc::pandoc_convert() (pandoc available) commonmark::markdown_html() otherwise.","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/reference/ui_epoxy_markdown.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Epoxy Markdown Template for Shiny — ui_epoxy_markdown","text":"","code":"ui_epoxy_markdown(   .id,   ...,   .markdown_fn = NULL,   .markdown_args = list(),   .class = NULL,   .style = NULL,   .item_tag = \"span\",   .item_class = NULL,   .placeholder = \"\",   .sep = \"\",   .open = \"{{\",   .close = \"}}\",   .na = \"\",   .null = \"\",   .literal = FALSE,   .trim = FALSE,   .aria_live = c(\"polite\", \"off\", \"assertive\"),   .aria_atomic = TRUE,   .class_item = deprecated(),   .container = deprecated(),   .container_item = deprecated() )"},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/reference/ui_epoxy_markdown.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Epoxy Markdown Template for Shiny — ui_epoxy_markdown","text":".id output id ... Unnamed arguments treated lines markdown text, named arguments treated initial values templated variables. .markdown_fn function used convert markdown HTML. function passed markdown text character vector first argument additional arguments list .markdown_args. default, use pandoc::pandoc_convert() pandoc available, otherwise use commonmark::markdown_html(). .markdown_args list arguments pass commonmark::markdown_html(). .class, .style Classes inline style directives added <epoxy-html> container elements ... placed. .item_tag, .item_class HTML element tag name classes used wrap template variable. default, template wrapped <span>. .placeholder Default placeholder template variable placeholder provided. .sep [character(1): ‘\"\"’] Separator used separate elements. .open [character(1): ‘\\{’] opening delimiter around template variable expression. Doubling full delimiter escapes . .close [character(1): ‘\\}’] closing delimiter around template variable expression. Doubling full delimiter escapes . .na [character(1): ‘NA’] Value replace NA values . NULL missing values propagated, NA result cause NA output. Otherwise value replaced value .na. .null [character(1): ‘character()’] Value replace NULL values . character() whole output character(). NULL NULL values dropped (paste0()). Otherwise value replaced value .null. .literal [boolean(1): ‘FALSE’] Whether treat single double quotes, backticks, comments regular characters (vs. syntactic elements), parsing expression string. Setting .literal = TRUE probably makes sense combination custom .transformer, case glue_col(). Regard argument (especially, name) experimental. .trim [logical(1): ‘TRUE’] Whether trim input template trim() . .aria_live, .aria_atomic aria-live aria-atomic attribute values entire template region. default, \"polite\", updates within region announced via screen readers. template includes changes lots disparate areas, better set \"aria-live\" = \"polite\" \"aria-atomic\" = \"true\" specific regions announced together. Otherwise, default announce entire region within ui_epoxy_html() whenever values within change. words, set .aria_live = \"\" .aria_atomic = NULL ui_epoxy_html() parent item set \"aria-live\" = \"polite\" \"aria-atomic\" = \"true\" parent containers region app receives updates. ui_epoxy_html() targeted updates, changing parts UI changed. .class_item Deprecated epoxy v1.0.0, please use .item_class instead. .container Deprecated epoxy v1.0.0, container now always <epoxy-html>. .container_item Deprecated epoxy v1.0.0, please use .item_tag instead.","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/reference/ui_epoxy_markdown.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Epoxy Markdown Template for Shiny — ui_epoxy_markdown","text":"HTML object.","code":""},{"path":[]},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/reference/ui_epoxy_markdown.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Epoxy Markdown Template for Shiny — ui_epoxy_markdown","text":"","code":"if (FALSE) { # rlang::is_installed(\"shiny\") && rlang::is_interactive() library(shiny)  # Shiny epoxy template functions don't support inline transformations, # so we still have to do some prep work ourselves. bechdel <- epoxy::bechdel  as_dollars <- scales::label_dollar(   scale_cut = scales::cut_short_scale() ) bechdel$budget <- as_dollars(bechdel$budget) bechdel$domgross <- as_dollars(bechdel$domgross)  vowels <- c(\"a\", \"e\", \"i\", \"o\", \"u\") bechdel$genre  <- paste(   ifelse(substr(tolower(bechdel$genre), 1, 1) %in% vowels, \"an\", \"a\"),   tolower(bechdel$genre) )  movie_ids <- rlang::set_names(   bechdel$imdb_id,   bechdel$title )  ui <- fixedPage(   fluidRow(     column(       width = 3,       selectInput(\"movie\", \"Movie\", movie_ids),       uiOutput(\"poster\")     ),     column(       width = 9,       ui_epoxy_markdown(         .id = \"about_movie\",         \" ## {{title}}  **Released:** {{ year }} \\\\ **Rated:** {{ rated }} \\\\ **IMDB Rating:** {{ imdb_rating }}  _{{ title }}_ is {{ genre }} film released in {{ year }}. It was filmed in {{ country }} with a budget of {{ budget }} and made {{ domgross }} at the box office. _{{ title }}_ recieved a Bechdel rating of **{{ bechdel_rating }}** for the following plot:  > {{ plot }} \"       )     )   ) )  server <- function(input, output, session) {   movie <- reactive({     bechdel[bechdel$imdb_id == input$movie, ]   })    output$about_movie <- render_epoxy(.list = movie())   output$poster <- renderUI(     img(       src = movie()$poster,       alt = paste0(\"Poster for \", movie()$title),       style = \"max-height: 400px; max-width: 100%; margin: 0 auto; display: block;\"     )   ) }  if (interactive()) {   shinyApp(ui, server) } } if (FALSE) { # rlang::is_interactive() run_epoxy_example_app(\"ui_epoxy_markdown\") }"},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/reference/ui_epoxy_mustache.html","id":null,"dir":"Reference","previous_headings":"","what":"Epoxy HTML Mustache Template — ui_epoxy_mustache","title":"Epoxy HTML Mustache Template — ui_epoxy_mustache","text":"Shiny output uses mustache templating render HTML. Mustache powerful template language minimal internal logic. advantage ui_epoxy_mustache() parts HTML can templated -- including element attributes -- whereas ui_epoxy_html() requires dynamic template variables appear text portion UI. downside entire template re-rendered (browser), time updated data sent server -- unlike ui_epoxy_html(), whose updates specific parts data changed.","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/reference/ui_epoxy_mustache.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Epoxy HTML Mustache Template — ui_epoxy_mustache","text":"","code":"ui_epoxy_mustache(   id,   ...,   .file = NULL,   .sep = \"\",   .container = \"epoxy-mustache\" )  ui_epoxy_whisker(   id,   ...,   .file = NULL,   .sep = \"\",   .container = \"epoxy-mustache\" )"},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/reference/ui_epoxy_mustache.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Epoxy HTML Mustache Template — ui_epoxy_mustache","text":"id ID output. ... Character strings HTML htmltools::tags. elements unnamed. .file path template file. provided, template lines included .... .sep separator used concatenate elements .... .container character tag name, e.g. \"div\" \"span\", function returns htmltools::tag().","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/reference/ui_epoxy_mustache.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Epoxy HTML Mustache Template — ui_epoxy_mustache","text":"Returns Shiny output UI element.","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/reference/ui_epoxy_mustache.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Epoxy HTML Mustache Template — ui_epoxy_mustache","text":"ui_epoxy_whisker(): alias ui_epoxy_mustache(), provided R users familiar syntax via whisker package.","code":""},{"path":[]},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/reference/ui_epoxy_mustache.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Epoxy HTML Mustache Template — ui_epoxy_mustache","text":"","code":"library(shiny)  ui <- fluidPage(   fluidRow(     style = \"max-width: 600px; margin: 0 auto\",     column(       width = 6,       ui_epoxy_mustache(         id = \"template\",         h2(class = \"{{heading_class}}\", \"Hello, {{name}}!\"),         \"{{#favorites}}\",         p(\"Your favorite fruits are...\"),         tags$ul(HTML(\"{{#fruits}}<li>{{.}}<\/li>{{/fruits}}\")),         \"{{/favorites}}\",         \"{{^favorites}}<p>Do you have any favorite fruits?<\/p>{{/favorites}}\"       )     ),     column(       width = 6,       h2(\"Inputs\"),       textInput(\"name\", \"Your name\"),       textInput(\"fruits\", \"Favorite fruits\", placeholder = \"apple, banana\"),       helpText(\"Enter a comma-separated list of fruits.\")     )   ) )  server <- function(input, output, session) {   user_name <- reactive({     if (!nzchar(input$name)) return(\"user\")     input$name   })    favorites <- reactive({     if (identical(input$fruits, \"123456\")) {       # Errors are equivalent to \"empty\" values,       # the rest of the template will still render.       stop(\"Bad fruits, bad!\")     }      if (!nzchar(input$fruits)) return(NULL)     list(fruits = strsplit(input$fruits, \"\\\\s*,\\\\s*\")[[1]])   })    output$template <- render_epoxy(     name = user_name(),     heading_class = if (user_name() != \"user\") \"text-success\",     favorites = favorites()   ) }  if (interactive()) {   shiny::shinyApp(ui, server) } if (FALSE) { # rlang::is_interactive() run_epoxy_example_app(\"ui_epoxy_mustache\") }"},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/reference/use_epoxy_knitr_engines.html","id":null,"dir":"Reference","previous_headings":"","what":"Use the epoxy knitr engines — use_epoxy_knitr_engines","title":"Use the epoxy knitr engines — use_epoxy_knitr_engines","text":"Sets epoxy's knitr engines use knitr R Markdown document formats powered knitr. engines also set loading epoxy library(), general need call function explicitly. epoxy provides four knitr engines: epoxy uses default glue syntax, e.g. {var} markdown outputs epoxy_html uses double brace syntax, e.g. {{var}} HTML outputs epoxy_latex uses double angle brackets syntax, e.g. <<var>> LaTeX outputs whisker uses whisker package provides R-based implementation mustache templating language. historical reasons, aliases HTML LaTeX engines also created: glue_html glue_latex. may opt third alias — glue epoxy engine — calling use_epoxy_glue_engine(), note likely overwrite glue engine provided glue package.","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/reference/use_epoxy_knitr_engines.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use the epoxy knitr engines — use_epoxy_knitr_engines","text":"","code":"use_epoxy_knitr_engines(   use_glue_engine = \"glue\" %in% include,   include = c(\"md\", \"html\", \"latex\", \"mustache\") )  use_epoxy_glue_engine()"},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/reference/use_epoxy_knitr_engines.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use the epoxy knitr engines — use_epoxy_knitr_engines","text":"use_glue_engine TRUE (default FALSE), uses epoxy's glue engine, likely overwriting glue engine provided glue. include epoxy knitr engines include. Defaults engines except glue engine (just alias epoxy engine).","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/reference/use_epoxy_knitr_engines.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use the epoxy knitr engines — use_epoxy_knitr_engines","text":"Silently sets epoxy's knitr engines invisible returns knitr::knit_engines prior function call.","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/reference/use_epoxy_knitr_engines.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Use the epoxy knitr engines — use_epoxy_knitr_engines","text":"use_epoxy_glue_engine(): Use epoxy's epoxy engine glue engine.","code":""},{"path":[]},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/reference/use_epoxy_knitr_engines.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Use the epoxy knitr engines — use_epoxy_knitr_engines","text":"","code":"if (FALSE) { # interactive() use_epoxy_knitr_engines() }"},{"path":[]},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/news/index.html","id":"epoxy-100","dir":"Changelog","previous_headings":"","what":"epoxy 1.0.0","title":"epoxy 1.0.0","text":"CRAN release: 2023-09-19","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/news/index.html","id":"breaking-changes-1-0-0","dir":"Changelog","previous_headings":"","what":"Breaking Changes","title":"epoxy 1.0.0","text":"Breaking change: epoxy_latex() epoxy_latex chunk engine powers now use << >> delimit inline expressions. previously may used <expr>, please now use <<expr>>. breaking change necessary allow expr include common R operators like < >. (#107) Breaking change: whisker engine now powered epoxy_mustache(), resulting small changes. particular, previously used list .data chunk option whisker chunk, relied whisker engine’s special treatment lists iterate items, ’ll need specifically opt behavior adding .vectorized = TRUE chunk option. chunk engine still vectorizes rows data frame default, ’s much likely behavior want, bare lists require specifically opting . (#103) .data now preferred chunk option passing data frames lists data epoxy chunks, previously data used places. works whisker epoxy chunks, consistent .data argument glue() epoxy(). (#102)","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/news/index.html","id":"new-features-1-0-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"epoxy 1.0.0","text":"New epoxy_mustache() provides epoxy-style interface mustache templating language, using whisker package. function also now powers whisker mustache knitr engines. epoxy also now provides aliases whisker mustache places, can use whichever name resonates . (#103) New epoxy_use_chunk() epoxy_use_file() allow re-use epoxy(), epoxy_html() epoxy-provided knitr chunk file template. epoxy_use_chunk() lets re-use template chunk new data, epoxy_use_file() lets repeatedly use template stored file. functions also re-use options template chunk options set YAML matter template file. See ?epoxy_use details options functions determined. (#106, #116)","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/news/index.html","id":"improvements-and-bug-fixes-1-0-0","dir":"Changelog","previous_headings":"","what":"Improvements and bug fixes","title":"epoxy 1.0.0","text":"epoxy() now adds .data pronoun allows refer list data frame passed either .data argument epoxy() data .data chunk options. (#100) epoxy_html() now supports inline transformations prefixed @ instead ., e.g. @strong instead .strong. Previously, place inline transformer nested {{ }} block, e.g. {{ {{ .strong expr }} }}, now need {{@strong expr}}. combine HTML transformer (epoxy_transform_html()) inline transformer, still need nest: {{.text-muted {{@strong expr}}}} creates <span class=\"text-muted\"><strong>{expr}<\/strong><\/span>. (#120) epoxy(), extension LaTex HTML counterparts, epoxy_* knitr engines gain .collapse argument determine vector epoxy-transformed templates collapsed. default NULL, means output returned vector. argument also useful epoxy_use_chunk() knitr chunks used vectorized template. (#115) Aded .sentence (alias .sc) list inline transformers provided epoxy_transform_inline(). transformer capitalize first letter first word expression. useful want need start sentence variable may contain one word. (#112) .titlecase inline transformer now coerces inputs character .character() applying tools::toTitleCase(), since toTitleCase() throw error non-character inputs. (#112) epoxy(), epoxy_html(), epoxy_latex() epoxy_mustache() (related knitr engines) collect remote tbl_sql tables evaluation. makes much easier pass data remote database using dplyr dbplyr. (#117) Fixed issue epoxy_inline_transform() used custom delimiters (#116).","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/news/index.html","id":"epoxy-011","dir":"Changelog","previous_headings":"","what":"epoxy 0.1.1","title":"epoxy 0.1.1","text":"CRAN release: 2023-06-11 epoxy_transform_html() now () returns collapsed character string inline HTML transformations. makes easier wrap vector individual HTML tags slot parent template. can still get length-consistent output setting collapse = FALSE, useful want template around expression repeat. (#96) Fixed issue epoxy_transform_set() prevented working knitr::opts_current$get(\"engine\") returned unexpected value.","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/news/index.html","id":"epoxy-010","dir":"Changelog","previous_headings":"","what":"epoxy 0.1.0","title":"epoxy 0.1.0","text":"CRAN release: 2023-05-30 epoxy’s first release CRAN! NEWS file collects changes versions available GitHub prior CRAN release.","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/news/index.html","id":"breaking-changes-0-1-0","dir":"Changelog","previous_headings":"","what":"Breaking Changes","title":"epoxy 0.1.0","text":"epoxy’s knitr engine now epoxy glue. avoids name clash glue package, provides glue knitr engine similar functionality. epoxy also provides epoxy_html epoxy_latex knitr engines, although can still used via aliases glue_html glue_latex. (#21) development version epoxy included, time, two features changed significantly release: epoxy_style() functions renamed epoxy_transform() .style argument deprecated favor .transformer argument. change made avoid confusion meanings “style”, consistency glue::glue(). epoxy_style_ prefix now epoxy_transform_, e.g. epoxy_transform_bold() epoxy_transform_collapse(). (#87) previous form inline formatting – epoxy_style_format() – removed favor epoxy_transform_inline(). new transformer uses cli-style inline formatting enabled default epoxy(), epoxy_html() epoxy_latex() (#68). epoxy_transform_html() now returns character vector rather collapsed character string template expression vector.","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/news/index.html","id":"new-features-0-1-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"epoxy 0.1.0","text":"Added new internal dataset, bechdel, containing details random sample ten movies received score 3 Bechdel Test (#24). epoxy’s transformers can now chained via epoxy_transform(). example use epoxy_transform_bold() epoxy_transform_collapse() replacement strings, can call epoxy_transform(\"bold\",   \"collapse\"). epoxy_transform() accepts transform function name, e.g. \"collapse\", function object directly, e.g. epoxy_transform_collapse, call transform function, e.g. epoxy_transform_collapse() (#26). Values passed .transformer chunk option now passed first epoxy_transform(), allowing provide vector transformer names list functions, e.g. .transformer = c(\"bold\", \"collapse\"). originally introduced using separate chunk option epoxy_style, now deprecated (#31, #87). epoxy, epoxy_html() epoxy_latex() now exported functions power knitr engines use defaults (#46). HTML element syntax used ui_epoxy_html() now available epoxy_transform_html() used default epoxy_html() (#46). HTML syntax used ui_epoxy_html() epoxy_html() now provides mechanism differentiating HTML-safe -unsafe content. mark expression HTML-safe, use !! variable expression: e.g. {{ button !!expr }} (#88). new ui_epoxy_markdown() function provides way create dynamic Shiny UI elements written Markdown. Rendering markdown HTML handled using pandoc::pandoc_convert() pandoc package installed, otherwise commonmark::markdown_html() used. New ui_epoxy_mustache() provides dynamically rendered Shiny UI element uses mustache templating syntax. advantage mustache templating ui_epoxy_html() dynamic variables template can appear anywhere HTML, just text portion (#51). ui_epoxy_whisker() also provided alias discoverability/user comfort (#60). epoxyHTML() renderEpoxyHTML() renamed ui_epoxy_html() render_epoxy() respectively. better fits newer Shiny naming conventions reflects render_epoxy() serves ui_epoxy_html() ui_epoxy_mustache() (#56). Added epoxy_transform_set() enable setting default .transformer option chunks epoxy functions. can use function set epoxy transformer chunk engines subset chunk engines. Use epoxy_transform_get() retrieve epoxy transformer particular engine. can also use epoxy_transform_set() set inline transformation functions matching syntax used epoxy_transform_inline(). See ?epoxy_transform_set example. epoxy_transform_inline() default .transformer epoxy() epoxy_latex() related knitr engines. epoxy_html() now uses .transformer = epoxy_transform(c(\"inline\", \"html\")).","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/news/index.html","id":"improvements-and-bug-fixes-0-1-0","dir":"Changelog","previous_headings":"","what":"Improvements and Bug Fixes","title":"epoxy 0.1.0","text":"Added new vignette(\"inline-reporting\") thanks @tjmahr inspiration (#25). epoxy requires glue >= 1.5.0. ui_epoxy_html() now render elements IDs using # syntax, e.g. {{h3#name.author full_name}} create element (essentially) <h3 id=\"name\" class=\"author\">{{ full_name }}<\/h3> (#22). ui_epoxy_html(), instead updating entire ui_epoxy_html() region, now updates part UI actually changed. template variables included text portion template, prefer ui_epoxy_html() ui_epoxy_mustache() reason – ui_epoxy_mustache() re-renders entire template every update. epoxy transformers bold, italic code transformations now choose correct syntax epoxy (markdown), epoxy_html epoxy_latex engines. Alternatively, can force desired syntax setting syntax option (#28). epoxy’s knitr engines can now set manually via newly exported (renamed) use_epoxy_knitr_engines(). function called epoxy loaded, likely need call directly. general, can instead simply library(epoxy). epoxy previously provided glue chunk rather epoxy chunk can restore behavior calling use_epoxy_glue_engine() (#30). new transformer, epoxy_transform_apply(), can used globally apply function glue expressions. epoxy_transform_apply() uses syntax purrr::map() defining function, .e. tolower ~ tolower(.x) (#37). epoxy_transform_collapse() now uses package, provides language-aware conjoining strings. result, sep_and sep_or arguments epoxy_transform_collapse() deprecated silently ignored provided (#45). Added engine_pick() providing set options correct option chosen based current chunk epoxy engine.","code":""},{"path":"http://pkg.garrickadenbuie.com/epoxy/dev/news/index.html","id":"epoxy-002","dir":"Changelog","previous_headings":"","what":"epoxy 0.0.2","title":"epoxy 0.0.2","text":"Added whisker engine uses whisker package instead glue. chunk option glue_data changed data. glue_html engine now uses {{ }} open/close delimiters. glue/whisker chunks now accept .envir chunk option containing environment, otherwise falling back knitr::knit_global() env.","code":""}]
